
NTIavr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00004b90  00004c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800180  00800180  00004d44  2**0
                  ALLOC
  3 .stab         000045b4  00000000  00000000  00004d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000144a  00000000  00000000  000092f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000a742  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000a922  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000ab54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000d3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000ea0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000fdec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000ffec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  000102fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010d51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 06 24 	call	0x480c	; 0x480c <main>
      8a:	0c 94 c6 25 	jmp	0x4b8c	; 0x4b8c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8f 25 	jmp	0x4b1e	; 0x4b1e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e6       	ldi	r26, 0x67	; 103
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ab 25 	jmp	0x4b56	; 0x4b56 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9b 25 	jmp	0x4b36	; 0x4b36 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9b 25 	jmp	0x4b36	; 0x4b36 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8f 25 	jmp	0x4b1e	; 0x4b1e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ab 25 	jmp	0x4b56	; 0x4b56 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e6       	ldi	r22, 0x67	; 103
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9b 25 	jmp	0x4b36	; 0x4b36 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9b 25 	jmp	0x4b36	; 0x4b36 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9b 25 	jmp	0x4b36	; 0x4b36 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9b 25 	jmp	0x4b36	; 0x4b36 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 98 25 	jmp	0x4b30	; 0x4b30 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 b4 25 	jmp	0x4b68	; 0x4b68 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 9f 25 	jmp	0x4b3e	; 0x4b3e <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 bb 25 	jmp	0x4b76	; 0x4b76 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e1 59       	subi	r30, 0x91	; 145
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <M_ExtInt_Void_ExtInt0Init>:
#include"ExtInt.h"
#include"Led.h"

void (*ExtInt_CallBack)(void);				//global pointer to function for ISR
void M_ExtInt_Void_ExtInt0Init()
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
#if SENSE_CONTROL == FALLING_EDGE
	//to select falling edge
	ClrBit(MCUCR_REG,0);
     f52:	a5 e5       	ldi	r26, 0x55	; 85
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e5 e5       	ldi	r30, 0x55	; 85
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8e 7f       	andi	r24, 0xFE	; 254
     f5e:	8c 93       	st	X, r24
	SetBit(MCUCR_REG,1);
     f60:	a5 e5       	ldi	r26, 0x55	; 85
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e5       	ldi	r30, 0x55	; 85
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	8c 93       	st	X, r24
	ClrBit(MCUCR_REG,0);
	ClrBit(MCUCR_REG,1);
#endif

	//to enable local interrupt for int0
	SetBit(GICR_REG,6);
     f6e:	ab e5       	ldi	r26, 0x5B	; 91
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	eb e5       	ldi	r30, 0x5B	; 91
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 64       	ori	r24, 0x40	; 64
     f7a:	8c 93       	st	X, r24
	//to enable global interrupt
	SetBit(SREG_REG,7);
     f7c:	af e5       	ldi	r26, 0x5F	; 95
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ef e5       	ldi	r30, 0x5F	; 95
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 68       	ori	r24, 0x80	; 128
     f88:	8c 93       	st	X, r24
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <M_ExtInt_Void_ExtInt0SetCallBack>:

void M_ExtInt_Void_ExtInt0SetCallBack(void (*Local_ptr)(void))      //this is a callback function to avoid accessing the ISR by user
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <M_ExtInt_Void_ExtInt0SetCallBack+0x6>
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	9a 83       	std	Y+2, r25	; 0x02
     f9c:	89 83       	std	Y+1, r24	; 0x01
	ExtInt_CallBack = Local_ptr;
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
     fa2:	90 93 83 01 	sts	0x0183, r25
     fa6:	80 93 82 01 	sts	0x0182, r24
}
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <__vector_1>:

ISR(INT0_vect)
{
     fb4:	1f 92       	push	r1
     fb6:	0f 92       	push	r0
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	0f 92       	push	r0
     fbc:	11 24       	eor	r1, r1
     fbe:	2f 93       	push	r18
     fc0:	3f 93       	push	r19
     fc2:	4f 93       	push	r20
     fc4:	5f 93       	push	r21
     fc6:	6f 93       	push	r22
     fc8:	7f 93       	push	r23
     fca:	8f 93       	push	r24
     fcc:	9f 93       	push	r25
     fce:	af 93       	push	r26
     fd0:	bf 93       	push	r27
     fd2:	ef 93       	push	r30
     fd4:	ff 93       	push	r31
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
	ExtInt_CallBack();
     fde:	e0 91 82 01 	lds	r30, 0x0182
     fe2:	f0 91 83 01 	lds	r31, 0x0183
     fe6:	09 95       	icall
}
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	ff 91       	pop	r31
     fee:	ef 91       	pop	r30
     ff0:	bf 91       	pop	r27
     ff2:	af 91       	pop	r26
     ff4:	9f 91       	pop	r25
     ff6:	8f 91       	pop	r24
     ff8:	7f 91       	pop	r23
     ffa:	6f 91       	pop	r22
     ffc:	5f 91       	pop	r21
     ffe:	4f 91       	pop	r20
    1000:	3f 91       	pop	r19
    1002:	2f 91       	pop	r18
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <M_Dio_Void_PinMode>:
 */

#include"Dio.h"

void M_Dio_Void_PinMode(u8 Local_u8_Num,u8 Local_u8_Mode)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	2a 97       	sbiw	r28, 0x0a	; 10
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	8b 83       	std	Y+3, r24	; 0x03
    1024:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8_Pin = Local_u8_Num % 10;
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9a e0       	ldi	r25, 0x0A	; 10
    102a:	69 2f       	mov	r22, r25
    102c:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__udivmodqi4>
    1030:	89 2f       	mov	r24, r25
    1032:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Port = Local_u8_Num / 10;
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9a e0       	ldi	r25, 0x0A	; 10
    1038:	69 2f       	mov	r22, r25
    103a:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__udivmodqi4>
    103e:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Mode)
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	3a 87       	std	Y+10, r19	; 0x0a
    1048:	29 87       	std	Y+9, r18	; 0x09
    104a:	89 85       	ldd	r24, Y+9	; 0x09
    104c:	9a 85       	ldd	r25, Y+10	; 0x0a
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	39 f0       	breq	.+14     	; 0x1060 <M_Dio_Void_PinMode+0x52>
    1052:	29 85       	ldd	r18, Y+9	; 0x09
    1054:	3a 85       	ldd	r19, Y+10	; 0x0a
    1056:	21 30       	cpi	r18, 0x01	; 1
    1058:	31 05       	cpc	r19, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <M_Dio_Void_PinMode+0x50>
    105c:	76 c0       	rjmp	.+236    	; 0x114a <M_Dio_Void_PinMode+0x13c>
    105e:	e4 c0       	rjmp	.+456    	; 0x1228 <M_Dio_Void_PinMode+0x21a>
	{
	case INPUT:
		switch(Local_u8_Port)
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	38 87       	std	Y+8, r19	; 0x08
    1068:	2f 83       	std	Y+7, r18	; 0x07
    106a:	8f 81       	ldd	r24, Y+7	; 0x07
    106c:	98 85       	ldd	r25, Y+8	; 0x08
    106e:	82 30       	cpi	r24, 0x02	; 2
    1070:	91 05       	cpc	r25, r1
    1072:	61 f1       	breq	.+88     	; 0x10cc <M_Dio_Void_PinMode+0xbe>
    1074:	2f 81       	ldd	r18, Y+7	; 0x07
    1076:	38 85       	ldd	r19, Y+8	; 0x08
    1078:	23 30       	cpi	r18, 0x03	; 3
    107a:	31 05       	cpc	r19, r1
    107c:	34 f4       	brge	.+12     	; 0x108a <M_Dio_Void_PinMode+0x7c>
    107e:	8f 81       	ldd	r24, Y+7	; 0x07
    1080:	98 85       	ldd	r25, Y+8	; 0x08
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	91 05       	cpc	r25, r1
    1086:	69 f0       	breq	.+26     	; 0x10a2 <M_Dio_Void_PinMode+0x94>
    1088:	cf c0       	rjmp	.+414    	; 0x1228 <M_Dio_Void_PinMode+0x21a>
    108a:	2f 81       	ldd	r18, Y+7	; 0x07
    108c:	38 85       	ldd	r19, Y+8	; 0x08
    108e:	23 30       	cpi	r18, 0x03	; 3
    1090:	31 05       	cpc	r19, r1
    1092:	89 f1       	breq	.+98     	; 0x10f6 <M_Dio_Void_PinMode+0xe8>
    1094:	8f 81       	ldd	r24, Y+7	; 0x07
    1096:	98 85       	ldd	r25, Y+8	; 0x08
    1098:	84 30       	cpi	r24, 0x04	; 4
    109a:	91 05       	cpc	r25, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <M_Dio_Void_PinMode+0x92>
    109e:	40 c0       	rjmp	.+128    	; 0x1120 <M_Dio_Void_PinMode+0x112>
    10a0:	c3 c0       	rjmp	.+390    	; 0x1228 <M_Dio_Void_PinMode+0x21a>
		{
			case 1:ClrBit(DDRA,Local_u8_Pin); break;
    10a2:	aa e3       	ldi	r26, 0x3A	; 58
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	ea e3       	ldi	r30, 0x3A	; 58
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <M_Dio_Void_PinMode+0xb2>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <M_Dio_Void_PinMode+0xae>
    10c4:	80 95       	com	r24
    10c6:	84 23       	and	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	ae c0       	rjmp	.+348    	; 0x1228 <M_Dio_Void_PinMode+0x21a>
			case 2:ClrBit(DDRB,Local_u8_Pin); break;
    10cc:	a7 e3       	ldi	r26, 0x37	; 55
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e7 e3       	ldi	r30, 0x37	; 55
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <M_Dio_Void_PinMode+0xdc>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <M_Dio_Void_PinMode+0xd8>
    10ee:	80 95       	com	r24
    10f0:	84 23       	and	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	99 c0       	rjmp	.+306    	; 0x1228 <M_Dio_Void_PinMode+0x21a>
			case 3:ClrBit(DDRC,Local_u8_Pin); break;
    10f6:	a4 e3       	ldi	r26, 0x34	; 52
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e4 e3       	ldi	r30, 0x34	; 52
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <M_Dio_Void_PinMode+0x106>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <M_Dio_Void_PinMode+0x102>
    1118:	80 95       	com	r24
    111a:	84 23       	and	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	84 c0       	rjmp	.+264    	; 0x1228 <M_Dio_Void_PinMode+0x21a>
			case 4:ClrBit(DDRD,Local_u8_Pin); break;
    1120:	a0 e3       	ldi	r26, 0x30	; 48
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e0 e3       	ldi	r30, 0x30	; 48
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <M_Dio_Void_PinMode+0x130>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <M_Dio_Void_PinMode+0x12c>
    1142:	80 95       	com	r24
    1144:	84 23       	and	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	6f c0       	rjmp	.+222    	; 0x1228 <M_Dio_Void_PinMode+0x21a>
			default:						  break;
		}
		break;
	case OUTPUT:
		switch(Local_u8_Port)
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	3e 83       	std	Y+6, r19	; 0x06
    1152:	2d 83       	std	Y+5, r18	; 0x05
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	91 05       	cpc	r25, r1
    115c:	51 f1       	breq	.+84     	; 0x11b2 <M_Dio_Void_PinMode+0x1a4>
    115e:	2d 81       	ldd	r18, Y+5	; 0x05
    1160:	3e 81       	ldd	r19, Y+6	; 0x06
    1162:	23 30       	cpi	r18, 0x03	; 3
    1164:	31 05       	cpc	r19, r1
    1166:	34 f4       	brge	.+12     	; 0x1174 <M_Dio_Void_PinMode+0x166>
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	9e 81       	ldd	r25, Y+6	; 0x06
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	91 05       	cpc	r25, r1
    1170:	61 f0       	breq	.+24     	; 0x118a <M_Dio_Void_PinMode+0x17c>
    1172:	5a c0       	rjmp	.+180    	; 0x1228 <M_Dio_Void_PinMode+0x21a>
    1174:	2d 81       	ldd	r18, Y+5	; 0x05
    1176:	3e 81       	ldd	r19, Y+6	; 0x06
    1178:	23 30       	cpi	r18, 0x03	; 3
    117a:	31 05       	cpc	r19, r1
    117c:	71 f1       	breq	.+92     	; 0x11da <M_Dio_Void_PinMode+0x1cc>
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	84 30       	cpi	r24, 0x04	; 4
    1184:	91 05       	cpc	r25, r1
    1186:	e9 f1       	breq	.+122    	; 0x1202 <M_Dio_Void_PinMode+0x1f4>
    1188:	4f c0       	rjmp	.+158    	; 0x1228 <M_Dio_Void_PinMode+0x21a>
		{
			case 1:SetBit(DDRA,Local_u8_Pin); break;
    118a:	aa e3       	ldi	r26, 0x3A	; 58
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	ea e3       	ldi	r30, 0x3A	; 58
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <M_Dio_Void_PinMode+0x19a>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <M_Dio_Void_PinMode+0x196>
    11ac:	84 2b       	or	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	3b c0       	rjmp	.+118    	; 0x1228 <M_Dio_Void_PinMode+0x21a>
			case 2:SetBit(DDRB,Local_u8_Pin); break;
    11b2:	a7 e3       	ldi	r26, 0x37	; 55
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e7 e3       	ldi	r30, 0x37	; 55
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <M_Dio_Void_PinMode+0x1c2>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <M_Dio_Void_PinMode+0x1be>
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	27 c0       	rjmp	.+78     	; 0x1228 <M_Dio_Void_PinMode+0x21a>
			case 3:SetBit(DDRC,Local_u8_Pin); break;
    11da:	a4 e3       	ldi	r26, 0x34	; 52
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e4 e3       	ldi	r30, 0x34	; 52
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <M_Dio_Void_PinMode+0x1ea>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <M_Dio_Void_PinMode+0x1e6>
    11fc:	84 2b       	or	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	13 c0       	rjmp	.+38     	; 0x1228 <M_Dio_Void_PinMode+0x21a>
			case 4:SetBit(DDRD,Local_u8_Pin); break;
    1202:	a0 e3       	ldi	r26, 0x30	; 48
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e0 e3       	ldi	r30, 0x30	; 48
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <M_Dio_Void_PinMode+0x212>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <M_Dio_Void_PinMode+0x20e>
    1224:	84 2b       	or	r24, r20
    1226:	8c 93       	st	X, r24
			default:						  break;
		}
		break;
	}
}
    1228:	2a 96       	adiw	r28, 0x0a	; 10
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <M_Dio_Void_PinWrite>:

void M_Dio_Void_PinWrite(u8 Local_u8_Num,u8 Local_u8_Mode)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	2a 97       	sbiw	r28, 0x0a	; 10
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	8b 83       	std	Y+3, r24	; 0x03
    1250:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8_Pin = Local_u8_Num % 10;
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9a e0       	ldi	r25, 0x0A	; 10
    1256:	69 2f       	mov	r22, r25
    1258:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__udivmodqi4>
    125c:	89 2f       	mov	r24, r25
    125e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Port = Local_u8_Num / 10;
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9a e0       	ldi	r25, 0x0A	; 10
    1264:	69 2f       	mov	r22, r25
    1266:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__udivmodqi4>
    126a:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Mode)
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	3a 87       	std	Y+10, r19	; 0x0a
    1274:	29 87       	std	Y+9, r18	; 0x09
    1276:	89 85       	ldd	r24, Y+9	; 0x09
    1278:	9a 85       	ldd	r25, Y+10	; 0x0a
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	39 f0       	breq	.+14     	; 0x128c <M_Dio_Void_PinWrite+0x52>
    127e:	29 85       	ldd	r18, Y+9	; 0x09
    1280:	3a 85       	ldd	r19, Y+10	; 0x0a
    1282:	21 30       	cpi	r18, 0x01	; 1
    1284:	31 05       	cpc	r19, r1
    1286:	09 f4       	brne	.+2      	; 0x128a <M_Dio_Void_PinWrite+0x50>
    1288:	76 c0       	rjmp	.+236    	; 0x1376 <M_Dio_Void_PinWrite+0x13c>
    128a:	e4 c0       	rjmp	.+456    	; 0x1454 <M_Dio_Void_PinWrite+0x21a>
	{
	case LOW:
		switch(Local_u8_Port)
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	38 87       	std	Y+8, r19	; 0x08
    1294:	2f 83       	std	Y+7, r18	; 0x07
    1296:	8f 81       	ldd	r24, Y+7	; 0x07
    1298:	98 85       	ldd	r25, Y+8	; 0x08
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	91 05       	cpc	r25, r1
    129e:	61 f1       	breq	.+88     	; 0x12f8 <M_Dio_Void_PinWrite+0xbe>
    12a0:	2f 81       	ldd	r18, Y+7	; 0x07
    12a2:	38 85       	ldd	r19, Y+8	; 0x08
    12a4:	23 30       	cpi	r18, 0x03	; 3
    12a6:	31 05       	cpc	r19, r1
    12a8:	34 f4       	brge	.+12     	; 0x12b6 <M_Dio_Void_PinWrite+0x7c>
    12aa:	8f 81       	ldd	r24, Y+7	; 0x07
    12ac:	98 85       	ldd	r25, Y+8	; 0x08
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	91 05       	cpc	r25, r1
    12b2:	69 f0       	breq	.+26     	; 0x12ce <M_Dio_Void_PinWrite+0x94>
    12b4:	cf c0       	rjmp	.+414    	; 0x1454 <M_Dio_Void_PinWrite+0x21a>
    12b6:	2f 81       	ldd	r18, Y+7	; 0x07
    12b8:	38 85       	ldd	r19, Y+8	; 0x08
    12ba:	23 30       	cpi	r18, 0x03	; 3
    12bc:	31 05       	cpc	r19, r1
    12be:	89 f1       	breq	.+98     	; 0x1322 <M_Dio_Void_PinWrite+0xe8>
    12c0:	8f 81       	ldd	r24, Y+7	; 0x07
    12c2:	98 85       	ldd	r25, Y+8	; 0x08
    12c4:	84 30       	cpi	r24, 0x04	; 4
    12c6:	91 05       	cpc	r25, r1
    12c8:	09 f4       	brne	.+2      	; 0x12cc <M_Dio_Void_PinWrite+0x92>
    12ca:	40 c0       	rjmp	.+128    	; 0x134c <M_Dio_Void_PinWrite+0x112>
    12cc:	c3 c0       	rjmp	.+390    	; 0x1454 <M_Dio_Void_PinWrite+0x21a>
		{
			case 1:ClrBit(PORTA,Local_u8_Pin); break;
    12ce:	ab e3       	ldi	r26, 0x3B	; 59
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	eb e3       	ldi	r30, 0x3B	; 59
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <M_Dio_Void_PinWrite+0xb2>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <M_Dio_Void_PinWrite+0xae>
    12f0:	80 95       	com	r24
    12f2:	84 23       	and	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	ae c0       	rjmp	.+348    	; 0x1454 <M_Dio_Void_PinWrite+0x21a>
			case 2:ClrBit(PORTB,Local_u8_Pin); break;
    12f8:	a8 e3       	ldi	r26, 0x38	; 56
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e8 e3       	ldi	r30, 0x38	; 56
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <M_Dio_Void_PinWrite+0xdc>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <M_Dio_Void_PinWrite+0xd8>
    131a:	80 95       	com	r24
    131c:	84 23       	and	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	99 c0       	rjmp	.+306    	; 0x1454 <M_Dio_Void_PinWrite+0x21a>
			case 3:ClrBit(PORTC,Local_u8_Pin); break;
    1322:	a5 e3       	ldi	r26, 0x35	; 53
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e5 e3       	ldi	r30, 0x35	; 53
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <M_Dio_Void_PinWrite+0x106>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <M_Dio_Void_PinWrite+0x102>
    1344:	80 95       	com	r24
    1346:	84 23       	and	r24, r20
    1348:	8c 93       	st	X, r24
    134a:	84 c0       	rjmp	.+264    	; 0x1454 <M_Dio_Void_PinWrite+0x21a>
			case 4:ClrBit(PORTD,Local_u8_Pin); break;
    134c:	a1 e3       	ldi	r26, 0x31	; 49
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e1 e3       	ldi	r30, 0x31	; 49
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <M_Dio_Void_PinWrite+0x130>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <M_Dio_Void_PinWrite+0x12c>
    136e:	80 95       	com	r24
    1370:	84 23       	and	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	6f c0       	rjmp	.+222    	; 0x1454 <M_Dio_Void_PinWrite+0x21a>
			default:						   break;
		}
		break;
	case HIGH:
		switch(Local_u8_Port)
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	3e 83       	std	Y+6, r19	; 0x06
    137e:	2d 83       	std	Y+5, r18	; 0x05
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	82 30       	cpi	r24, 0x02	; 2
    1386:	91 05       	cpc	r25, r1
    1388:	51 f1       	breq	.+84     	; 0x13de <M_Dio_Void_PinWrite+0x1a4>
    138a:	2d 81       	ldd	r18, Y+5	; 0x05
    138c:	3e 81       	ldd	r19, Y+6	; 0x06
    138e:	23 30       	cpi	r18, 0x03	; 3
    1390:	31 05       	cpc	r19, r1
    1392:	34 f4       	brge	.+12     	; 0x13a0 <M_Dio_Void_PinWrite+0x166>
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	9e 81       	ldd	r25, Y+6	; 0x06
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	91 05       	cpc	r25, r1
    139c:	61 f0       	breq	.+24     	; 0x13b6 <M_Dio_Void_PinWrite+0x17c>
    139e:	5a c0       	rjmp	.+180    	; 0x1454 <M_Dio_Void_PinWrite+0x21a>
    13a0:	2d 81       	ldd	r18, Y+5	; 0x05
    13a2:	3e 81       	ldd	r19, Y+6	; 0x06
    13a4:	23 30       	cpi	r18, 0x03	; 3
    13a6:	31 05       	cpc	r19, r1
    13a8:	71 f1       	breq	.+92     	; 0x1406 <M_Dio_Void_PinWrite+0x1cc>
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
    13ac:	9e 81       	ldd	r25, Y+6	; 0x06
    13ae:	84 30       	cpi	r24, 0x04	; 4
    13b0:	91 05       	cpc	r25, r1
    13b2:	e9 f1       	breq	.+122    	; 0x142e <M_Dio_Void_PinWrite+0x1f4>
    13b4:	4f c0       	rjmp	.+158    	; 0x1454 <M_Dio_Void_PinWrite+0x21a>
		{
			case 1:SetBit(PORTA,Local_u8_Pin); break;
    13b6:	ab e3       	ldi	r26, 0x3B	; 59
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	eb e3       	ldi	r30, 0x3B	; 59
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 2e       	mov	r0, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <M_Dio_Void_PinWrite+0x19a>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <M_Dio_Void_PinWrite+0x196>
    13d8:	84 2b       	or	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	3b c0       	rjmp	.+118    	; 0x1454 <M_Dio_Void_PinWrite+0x21a>
			case 2:SetBit(PORTB,Local_u8_Pin); break;
    13de:	a8 e3       	ldi	r26, 0x38	; 56
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e8 e3       	ldi	r30, 0x38	; 56
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 2e       	mov	r0, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <M_Dio_Void_PinWrite+0x1c2>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <M_Dio_Void_PinWrite+0x1be>
    1400:	84 2b       	or	r24, r20
    1402:	8c 93       	st	X, r24
    1404:	27 c0       	rjmp	.+78     	; 0x1454 <M_Dio_Void_PinWrite+0x21a>
			case 3:SetBit(PORTC,Local_u8_Pin); break;
    1406:	a5 e3       	ldi	r26, 0x35	; 53
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e5 e3       	ldi	r30, 0x35	; 53
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 2e       	mov	r0, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <M_Dio_Void_PinWrite+0x1ea>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	0a 94       	dec	r0
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <M_Dio_Void_PinWrite+0x1e6>
    1428:	84 2b       	or	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	13 c0       	rjmp	.+38     	; 0x1454 <M_Dio_Void_PinWrite+0x21a>
			case 4:SetBit(PORTD,Local_u8_Pin); break;
    142e:	a1 e3       	ldi	r26, 0x31	; 49
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e1 e3       	ldi	r30, 0x31	; 49
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <M_Dio_Void_PinWrite+0x212>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <M_Dio_Void_PinWrite+0x20e>
    1450:	84 2b       	or	r24, r20
    1452:	8c 93       	st	X, r24
			default:						   break;
		}
		break;
	}
}
    1454:	2a 96       	adiw	r28, 0x0a	; 10
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <M_Dio_Void_PinTog>:


void M_Dio_Void_PinTog(u8 Local_u8_Num)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	00 d0       	rcall	.+0      	; 0x146c <M_Dio_Void_PinTog+0x6>
    146c:	00 d0       	rcall	.+0      	; 0x146e <M_Dio_Void_PinTog+0x8>
    146e:	0f 92       	push	r0
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8_Pin = Local_u8_Num % 10;
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9a e0       	ldi	r25, 0x0A	; 10
    147a:	69 2f       	mov	r22, r25
    147c:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__udivmodqi4>
    1480:	89 2f       	mov	r24, r25
    1482:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Port = Local_u8_Num / 10;
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9a e0       	ldi	r25, 0x0A	; 10
    1488:	69 2f       	mov	r22, r25
    148a:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__udivmodqi4>
    148e:	89 83       	std	Y+1, r24	; 0x01
		switch(Local_u8_Port)
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	3d 83       	std	Y+5, r19	; 0x05
    1498:	2c 83       	std	Y+4, r18	; 0x04
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	9d 81       	ldd	r25, Y+5	; 0x05
    149e:	82 30       	cpi	r24, 0x02	; 2
    14a0:	91 05       	cpc	r25, r1
    14a2:	51 f1       	breq	.+84     	; 0x14f8 <M_Dio_Void_PinTog+0x92>
    14a4:	2c 81       	ldd	r18, Y+4	; 0x04
    14a6:	3d 81       	ldd	r19, Y+5	; 0x05
    14a8:	23 30       	cpi	r18, 0x03	; 3
    14aa:	31 05       	cpc	r19, r1
    14ac:	34 f4       	brge	.+12     	; 0x14ba <M_Dio_Void_PinTog+0x54>
    14ae:	8c 81       	ldd	r24, Y+4	; 0x04
    14b0:	9d 81       	ldd	r25, Y+5	; 0x05
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	91 05       	cpc	r25, r1
    14b6:	61 f0       	breq	.+24     	; 0x14d0 <M_Dio_Void_PinTog+0x6a>
    14b8:	5a c0       	rjmp	.+180    	; 0x156e <M_Dio_Void_PinTog+0x108>
    14ba:	2c 81       	ldd	r18, Y+4	; 0x04
    14bc:	3d 81       	ldd	r19, Y+5	; 0x05
    14be:	23 30       	cpi	r18, 0x03	; 3
    14c0:	31 05       	cpc	r19, r1
    14c2:	71 f1       	breq	.+92     	; 0x1520 <M_Dio_Void_PinTog+0xba>
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	9d 81       	ldd	r25, Y+5	; 0x05
    14c8:	84 30       	cpi	r24, 0x04	; 4
    14ca:	91 05       	cpc	r25, r1
    14cc:	e9 f1       	breq	.+122    	; 0x1548 <M_Dio_Void_PinTog+0xe2>
    14ce:	4f c0       	rjmp	.+158    	; 0x156e <M_Dio_Void_PinTog+0x108>
		{
			case 1:TogBit(PORTA,Local_u8_Pin); break;
    14d0:	ab e3       	ldi	r26, 0x3B	; 59
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	eb e3       	ldi	r30, 0x3B	; 59
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	48 2f       	mov	r20, r24
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	02 2e       	mov	r0, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <M_Dio_Void_PinTog+0x88>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	0a 94       	dec	r0
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <M_Dio_Void_PinTog+0x84>
    14f2:	84 27       	eor	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	3b c0       	rjmp	.+118    	; 0x156e <M_Dio_Void_PinTog+0x108>
			case 2:TogBit(PORTB,Local_u8_Pin); break;
    14f8:	a8 e3       	ldi	r26, 0x38	; 56
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e8 e3       	ldi	r30, 0x38	; 56
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <M_Dio_Void_PinTog+0xb0>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <M_Dio_Void_PinTog+0xac>
    151a:	84 27       	eor	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	27 c0       	rjmp	.+78     	; 0x156e <M_Dio_Void_PinTog+0x108>
			case 3:TogBit(PORTC,Local_u8_Pin); break;
    1520:	a5 e3       	ldi	r26, 0x35	; 53
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e5 e3       	ldi	r30, 0x35	; 53
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <M_Dio_Void_PinTog+0xd8>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <M_Dio_Void_PinTog+0xd4>
    1542:	84 27       	eor	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	13 c0       	rjmp	.+38     	; 0x156e <M_Dio_Void_PinTog+0x108>
			case 4:TogBit(PORTD,Local_u8_Pin); break;
    1548:	a1 e3       	ldi	r26, 0x31	; 49
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e1 e3       	ldi	r30, 0x31	; 49
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <M_Dio_Void_PinTog+0x100>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <M_Dio_Void_PinTog+0xfc>
    156a:	84 27       	eor	r24, r20
    156c:	8c 93       	st	X, r24
			default:						   break;
		}
}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <M_Dio_U8_PinRead>:


u8 M_Dio_U8_PinRead(u8 Local_u8_Num)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	00 d0       	rcall	.+0      	; 0x1584 <M_Dio_U8_PinRead+0x6>
    1584:	00 d0       	rcall	.+0      	; 0x1586 <M_Dio_U8_PinRead+0x8>
    1586:	00 d0       	rcall	.+0      	; 0x1588 <M_Dio_U8_PinRead+0xa>
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8_Pin = Local_u8_Num % 10;
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	9a e0       	ldi	r25, 0x0A	; 10
    1592:	69 2f       	mov	r22, r25
    1594:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__udivmodqi4>
    1598:	89 2f       	mov	r24, r25
    159a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8_Port = Local_u8_Num / 10;
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9a e0       	ldi	r25, 0x0A	; 10
    15a0:	69 2f       	mov	r22, r25
    15a2:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__udivmodqi4>
    15a6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Reading = 0;
    15a8:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_u8_Port)
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	3e 83       	std	Y+6, r19	; 0x06
    15b2:	2d 83       	std	Y+5, r18	; 0x05
    15b4:	4d 81       	ldd	r20, Y+5	; 0x05
    15b6:	5e 81       	ldd	r21, Y+6	; 0x06
    15b8:	42 30       	cpi	r20, 0x02	; 2
    15ba:	51 05       	cpc	r21, r1
    15bc:	41 f1       	breq	.+80     	; 0x160e <M_Dio_U8_PinRead+0x90>
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	91 05       	cpc	r25, r1
    15c6:	34 f4       	brge	.+12     	; 0x15d4 <M_Dio_U8_PinRead+0x56>
    15c8:	2d 81       	ldd	r18, Y+5	; 0x05
    15ca:	3e 81       	ldd	r19, Y+6	; 0x06
    15cc:	21 30       	cpi	r18, 0x01	; 1
    15ce:	31 05       	cpc	r19, r1
    15d0:	61 f0       	breq	.+24     	; 0x15ea <M_Dio_U8_PinRead+0x6c>
    15d2:	52 c0       	rjmp	.+164    	; 0x1678 <M_Dio_U8_PinRead+0xfa>
    15d4:	4d 81       	ldd	r20, Y+5	; 0x05
    15d6:	5e 81       	ldd	r21, Y+6	; 0x06
    15d8:	43 30       	cpi	r20, 0x03	; 3
    15da:	51 05       	cpc	r21, r1
    15dc:	51 f1       	breq	.+84     	; 0x1632 <M_Dio_U8_PinRead+0xb4>
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	84 30       	cpi	r24, 0x04	; 4
    15e4:	91 05       	cpc	r25, r1
    15e6:	b9 f1       	breq	.+110    	; 0x1656 <M_Dio_U8_PinRead+0xd8>
    15e8:	47 c0       	rjmp	.+142    	; 0x1678 <M_Dio_U8_PinRead+0xfa>
	{
		case 1:Local_u8_Reading = GetBit(PINA,Local_u8_Pin); break;
    15ea:	e9 e3       	ldi	r30, 0x39	; 57
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	88 2f       	mov	r24, r24
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	a9 01       	movw	r20, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <M_Dio_U8_PinRead+0x84>
    15fe:	55 95       	asr	r21
    1600:	47 95       	ror	r20
    1602:	8a 95       	dec	r24
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <M_Dio_U8_PinRead+0x80>
    1606:	ca 01       	movw	r24, r20
    1608:	81 70       	andi	r24, 0x01	; 1
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	35 c0       	rjmp	.+106    	; 0x1678 <M_Dio_U8_PinRead+0xfa>
		case 2:Local_u8_Reading = GetBit(PINB,Local_u8_Pin); break;
    160e:	e6 e3       	ldi	r30, 0x36	; 54
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	88 2f       	mov	r24, r24
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a9 01       	movw	r20, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <M_Dio_U8_PinRead+0xa8>
    1622:	55 95       	asr	r21
    1624:	47 95       	ror	r20
    1626:	8a 95       	dec	r24
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <M_Dio_U8_PinRead+0xa4>
    162a:	ca 01       	movw	r24, r20
    162c:	81 70       	andi	r24, 0x01	; 1
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	23 c0       	rjmp	.+70     	; 0x1678 <M_Dio_U8_PinRead+0xfa>
		case 3:Local_u8_Reading = GetBit(PINC,Local_u8_Pin); break;
    1632:	e3 e3       	ldi	r30, 0x33	; 51
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	a9 01       	movw	r20, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <M_Dio_U8_PinRead+0xcc>
    1646:	55 95       	asr	r21
    1648:	47 95       	ror	r20
    164a:	8a 95       	dec	r24
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <M_Dio_U8_PinRead+0xc8>
    164e:	ca 01       	movw	r24, r20
    1650:	81 70       	andi	r24, 0x01	; 1
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	11 c0       	rjmp	.+34     	; 0x1678 <M_Dio_U8_PinRead+0xfa>
		case 4:Local_u8_Reading = GetBit(PIND,Local_u8_Pin); break;
    1656:	e0 e3       	ldi	r30, 0x30	; 48
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	a9 01       	movw	r20, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <M_Dio_U8_PinRead+0xf0>
    166a:	55 95       	asr	r21
    166c:	47 95       	ror	r20
    166e:	8a 95       	dec	r24
    1670:	e2 f7       	brpl	.-8      	; 0x166a <M_Dio_U8_PinRead+0xec>
    1672:	ca 01       	movw	r24, r20
    1674:	81 70       	andi	r24, 0x01	; 1
    1676:	89 83       	std	Y+1, r24	; 0x01
		default:						  					 break;
		}
	return Local_u8_Reading;
    1678:	89 81       	ldd	r24, Y+1	; 0x01
}
    167a:	26 96       	adiw	r28, 0x06	; 6
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <M_ADC_Void_ADCInit>:

#include"ADC.h"

u16 x=0;
void M_ADC_Void_ADCInit(void)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
	//to select Vref
#if V_REF == AVCC
	SetBit(ADMUX_REG,6);
    1694:	a7 e2       	ldi	r26, 0x27	; 39
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e7 e2       	ldi	r30, 0x27	; 39
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	80 64       	ori	r24, 0x40	; 64
    16a0:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG,7);
    16a2:	a7 e2       	ldi	r26, 0x27	; 39
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e7 e2       	ldi	r30, 0x27	; 39
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	8f 77       	andi	r24, 0x7F	; 127
    16ae:	8c 93       	st	X, r24
#elif V_REF == _2V_PIN
	SetBit(ADMUX_REG,6);
	ClrBit(ADMUX_REG,7);
#endif
	//to select right adjust
	ClrBit(ADMUX_REG,5);
    16b0:	a7 e2       	ldi	r26, 0x27	; 39
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e7 e2       	ldi	r30, 0x27	; 39
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8f 7d       	andi	r24, 0xDF	; 223
    16bc:	8c 93       	st	X, r24
	//to select ADC channel (ADC0)
	ClrBit(ADMUX_REG,4);
    16be:	a7 e2       	ldi	r26, 0x27	; 39
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e7 e2       	ldi	r30, 0x27	; 39
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8f 7e       	andi	r24, 0xEF	; 239
    16ca:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG,3);
    16cc:	a7 e2       	ldi	r26, 0x27	; 39
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e7 e2       	ldi	r30, 0x27	; 39
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	87 7f       	andi	r24, 0xF7	; 247
    16d8:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG,2);
    16da:	a7 e2       	ldi	r26, 0x27	; 39
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e7 e2       	ldi	r30, 0x27	; 39
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	8b 7f       	andi	r24, 0xFB	; 251
    16e6:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG,1);
    16e8:	a7 e2       	ldi	r26, 0x27	; 39
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e7 e2       	ldi	r30, 0x27	; 39
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	8d 7f       	andi	r24, 0xFD	; 253
    16f4:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG,0);
    16f6:	a7 e2       	ldi	r26, 0x27	; 39
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e7 e2       	ldi	r30, 0x27	; 39
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8e 7f       	andi	r24, 0xFE	; 254
    1702:	8c 93       	st	X, r24
	//to select prescaler (128)
	SetBit(ADCSRA_REG,2);
    1704:	a6 e2       	ldi	r26, 0x26	; 38
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e6 e2       	ldi	r30, 0x26	; 38
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	84 60       	ori	r24, 0x04	; 4
    1710:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG,1);
    1712:	a6 e2       	ldi	r26, 0x26	; 38
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e6 e2       	ldi	r30, 0x26	; 38
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	82 60       	ori	r24, 0x02	; 2
    171e:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG,0);
    1720:	a6 e2       	ldi	r26, 0x26	; 38
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e6 e2       	ldi	r30, 0x26	; 38
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	81 60       	ori	r24, 0x01	; 1
    172c:	8c 93       	st	X, r24
	// To Enable auto trigger mode -> free running
	SetBit(ADCSRA_REG,5);
    172e:	a6 e2       	ldi	r26, 0x26	; 38
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e6 e2       	ldi	r30, 0x26	; 38
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	80 62       	ori	r24, 0x20	; 32
    173a:	8c 93       	st	X, r24
	//to enable ADC circuit
	SetBit(ADCSRA_REG,7);
    173c:	a6 e2       	ldi	r26, 0x26	; 38
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e6 e2       	ldi	r30, 0x26	; 38
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	80 68       	ori	r24, 0x80	; 128
    1748:	8c 93       	st	X, r24
}
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <M_ADC_U16_ADCRead>:

#if ADC_MODE	==	ADC_POL
u16 M_ADC_U16_ADCRead(void)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
	// to start conversion
	SetBit(ADCSRA_REG,6);
    1758:	a6 e2       	ldi	r26, 0x26	; 38
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e6 e2       	ldi	r30, 0x26	; 38
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	80 64       	ori	r24, 0x40	; 64
    1764:	8c 93       	st	X, r24
	while (GetBit(ADCSRA_REG,4) == 0);
    1766:	e6 e2       	ldi	r30, 0x26	; 38
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	82 95       	swap	r24
    176e:	8f 70       	andi	r24, 0x0F	; 15
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	81 70       	andi	r24, 0x01	; 1
    1776:	90 70       	andi	r25, 0x00	; 0
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	a9 f3       	breq	.-22     	; 0x1766 <M_ADC_U16_ADCRead+0x16>
	return ADC_REG;
    177c:	e4 e2       	ldi	r30, 0x24	; 36
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	91 81       	ldd	r25, Z+1	; 0x01
}
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <H_SSD_Void_SSDInit>:
 *      Author: musta
 */
#include"SSd.h"

void H_SSD_Void_SSDInit(void)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
	M_Dio_Void_PinMode(SSD_LED_A,OUTPUT);
    1792:	8b e0       	ldi	r24, 0x0B	; 11
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_B,OUTPUT);
    179a:	8c e0       	ldi	r24, 0x0C	; 12
    179c:	61 e0       	ldi	r22, 0x01	; 1
    179e:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_C,OUTPUT);
    17a2:	8d e0       	ldi	r24, 0x0D	; 13
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_D,OUTPUT);
    17aa:	8e e0       	ldi	r24, 0x0E	; 14
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_E,OUTPUT);
    17b2:	8f e0       	ldi	r24, 0x0F	; 15
    17b4:	61 e0       	ldi	r22, 0x01	; 1
    17b6:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_F,OUTPUT);
    17ba:	80 e1       	ldi	r24, 0x10	; 16
    17bc:	61 e0       	ldi	r22, 0x01	; 1
    17be:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_G,OUTPUT);
    17c2:	81 e1       	ldi	r24, 0x11	; 17
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_DOT,OUTPUT);
    17ca:	84 e1       	ldi	r24, 0x14	; 20
    17cc:	61 e0       	ldi	r22, 0x01	; 1
    17ce:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_EN_1,OUTPUT);
    17d2:	84 e2       	ldi	r24, 0x24	; 36
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_EN_2,OUTPUT);
    17da:	85 e2       	ldi	r24, 0x25	; 37
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
}
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <H_SSD_Void_SSDDisplay>:
void H_SSD_Void_SSDDisplay(u8 Local_u8_Num)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	a3 97       	sbiw	r28, 0x23	; 35
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 Local_u8_Units = Local_u8_Num % 10;
    17fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1800:	9a e0       	ldi	r25, 0x0A	; 10
    1802:	69 2f       	mov	r22, r25
    1804:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__udivmodqi4>
    1808:	89 2f       	mov	r24, r25
    180a:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 Local_u8_Tens = Local_u8_Num / 10;
    180c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    180e:	9a e0       	ldi	r25, 0x0A	; 10
    1810:	69 2f       	mov	r22, r25
    1812:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__udivmodqi4>
    1816:	8d 8f       	std	Y+29, r24	; 0x1d

	switch(Local_u8_Units)
    1818:	8e 8d       	ldd	r24, Y+30	; 0x1e
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	3b a3       	std	Y+35, r19	; 0x23
    1820:	2a a3       	std	Y+34, r18	; 0x22
    1822:	8a a1       	ldd	r24, Y+34	; 0x22
    1824:	9b a1       	ldd	r25, Y+35	; 0x23
    1826:	84 30       	cpi	r24, 0x04	; 4
    1828:	91 05       	cpc	r25, r1
    182a:	09 f4       	brne	.+2      	; 0x182e <H_SSD_Void_SSDDisplay+0x46>
    182c:	bb c0       	rjmp	.+374    	; 0x19a4 <H_SSD_Void_SSDDisplay+0x1bc>
    182e:	2a a1       	ldd	r18, Y+34	; 0x22
    1830:	3b a1       	ldd	r19, Y+35	; 0x23
    1832:	25 30       	cpi	r18, 0x05	; 5
    1834:	31 05       	cpc	r19, r1
    1836:	ec f4       	brge	.+58     	; 0x1872 <H_SSD_Void_SSDDisplay+0x8a>
    1838:	8a a1       	ldd	r24, Y+34	; 0x22
    183a:	9b a1       	ldd	r25, Y+35	; 0x23
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	91 05       	cpc	r25, r1
    1840:	09 f4       	brne	.+2      	; 0x1844 <H_SSD_Void_SSDDisplay+0x5c>
    1842:	59 c0       	rjmp	.+178    	; 0x18f6 <H_SSD_Void_SSDDisplay+0x10e>
    1844:	2a a1       	ldd	r18, Y+34	; 0x22
    1846:	3b a1       	ldd	r19, Y+35	; 0x23
    1848:	22 30       	cpi	r18, 0x02	; 2
    184a:	31 05       	cpc	r19, r1
    184c:	2c f4       	brge	.+10     	; 0x1858 <H_SSD_Void_SSDDisplay+0x70>
    184e:	8a a1       	ldd	r24, Y+34	; 0x22
    1850:	9b a1       	ldd	r25, Y+35	; 0x23
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	99 f1       	breq	.+102    	; 0x18bc <H_SSD_Void_SSDDisplay+0xd4>
    1856:	53 c1       	rjmp	.+678    	; 0x1afe <H_SSD_Void_SSDDisplay+0x316>
    1858:	2a a1       	ldd	r18, Y+34	; 0x22
    185a:	3b a1       	ldd	r19, Y+35	; 0x23
    185c:	22 30       	cpi	r18, 0x02	; 2
    185e:	31 05       	cpc	r19, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <H_SSD_Void_SSDDisplay+0x7c>
    1862:	66 c0       	rjmp	.+204    	; 0x1930 <H_SSD_Void_SSDDisplay+0x148>
    1864:	8a a1       	ldd	r24, Y+34	; 0x22
    1866:	9b a1       	ldd	r25, Y+35	; 0x23
    1868:	83 30       	cpi	r24, 0x03	; 3
    186a:	91 05       	cpc	r25, r1
    186c:	09 f4       	brne	.+2      	; 0x1870 <H_SSD_Void_SSDDisplay+0x88>
    186e:	7d c0       	rjmp	.+250    	; 0x196a <H_SSD_Void_SSDDisplay+0x182>
    1870:	46 c1       	rjmp	.+652    	; 0x1afe <H_SSD_Void_SSDDisplay+0x316>
    1872:	2a a1       	ldd	r18, Y+34	; 0x22
    1874:	3b a1       	ldd	r19, Y+35	; 0x23
    1876:	27 30       	cpi	r18, 0x07	; 7
    1878:	31 05       	cpc	r19, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <H_SSD_Void_SSDDisplay+0x96>
    187c:	ea c0       	rjmp	.+468    	; 0x1a52 <H_SSD_Void_SSDDisplay+0x26a>
    187e:	8a a1       	ldd	r24, Y+34	; 0x22
    1880:	9b a1       	ldd	r25, Y+35	; 0x23
    1882:	88 30       	cpi	r24, 0x08	; 8
    1884:	91 05       	cpc	r25, r1
    1886:	6c f4       	brge	.+26     	; 0x18a2 <H_SSD_Void_SSDDisplay+0xba>
    1888:	2a a1       	ldd	r18, Y+34	; 0x22
    188a:	3b a1       	ldd	r19, Y+35	; 0x23
    188c:	25 30       	cpi	r18, 0x05	; 5
    188e:	31 05       	cpc	r19, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <H_SSD_Void_SSDDisplay+0xac>
    1892:	a5 c0       	rjmp	.+330    	; 0x19de <H_SSD_Void_SSDDisplay+0x1f6>
    1894:	8a a1       	ldd	r24, Y+34	; 0x22
    1896:	9b a1       	ldd	r25, Y+35	; 0x23
    1898:	86 30       	cpi	r24, 0x06	; 6
    189a:	91 05       	cpc	r25, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <H_SSD_Void_SSDDisplay+0xb8>
    189e:	bc c0       	rjmp	.+376    	; 0x1a18 <H_SSD_Void_SSDDisplay+0x230>
    18a0:	2e c1       	rjmp	.+604    	; 0x1afe <H_SSD_Void_SSDDisplay+0x316>
    18a2:	2a a1       	ldd	r18, Y+34	; 0x22
    18a4:	3b a1       	ldd	r19, Y+35	; 0x23
    18a6:	28 30       	cpi	r18, 0x08	; 8
    18a8:	31 05       	cpc	r19, r1
    18aa:	09 f4       	brne	.+2      	; 0x18ae <H_SSD_Void_SSDDisplay+0xc6>
    18ac:	ef c0       	rjmp	.+478    	; 0x1a8c <H_SSD_Void_SSDDisplay+0x2a4>
    18ae:	8a a1       	ldd	r24, Y+34	; 0x22
    18b0:	9b a1       	ldd	r25, Y+35	; 0x23
    18b2:	89 30       	cpi	r24, 0x09	; 9
    18b4:	91 05       	cpc	r25, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <H_SSD_Void_SSDDisplay+0xd2>
    18b8:	06 c1       	rjmp	.+524    	; 0x1ac6 <H_SSD_Void_SSDDisplay+0x2de>
    18ba:	21 c1       	rjmp	.+578    	; 0x1afe <H_SSD_Void_SSDDisplay+0x316>
	{
	case 0:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    18bc:	8b e0       	ldi	r24, 0x0B	; 11
    18be:	61 e0       	ldi	r22, 0x01	; 1
    18c0:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    18c4:	8c e0       	ldi	r24, 0x0C	; 12
    18c6:	61 e0       	ldi	r22, 0x01	; 1
    18c8:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    18cc:	8d e0       	ldi	r24, 0x0D	; 13
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    18d4:	8e e0       	ldi	r24, 0x0E	; 14
    18d6:	61 e0       	ldi	r22, 0x01	; 1
    18d8:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    18dc:	8f e0       	ldi	r24, 0x0F	; 15
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    18e4:	80 e1       	ldi	r24, 0x10	; 16
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    18ec:	81 e1       	ldi	r24, 0x11	; 17
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    18f4:	04 c1       	rjmp	.+520    	; 0x1afe <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 1:
		M_Dio_Void_PinWrite(SSD_LED_A,LOW);
    18f6:	8b e0       	ldi	r24, 0x0B	; 11
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    18fe:	8c e0       	ldi	r24, 0x0C	; 12
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1906:	8d e0       	ldi	r24, 0x0D	; 13
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    190e:	8e e0       	ldi	r24, 0x0E	; 14
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1916:	80 e1       	ldi	r24, 0x10	; 16
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    191e:	8f e0       	ldi	r24, 0x0F	; 15
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    1926:	81 e1       	ldi	r24, 0x11	; 17
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    192e:	e7 c0       	rjmp	.+462    	; 0x1afe <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 2:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1930:	8b e0       	ldi	r24, 0x0B	; 11
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1938:	8c e0       	ldi	r24, 0x0C	; 12
    193a:	61 e0       	ldi	r22, 0x01	; 1
    193c:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,LOW);
    1940:	8d e0       	ldi	r24, 0x0D	; 13
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1948:	8e e0       	ldi	r24, 0x0E	; 14
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1950:	8f e0       	ldi	r24, 0x0F	; 15
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1958:	80 e1       	ldi	r24, 0x10	; 16
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1960:	81 e1       	ldi	r24, 0x11	; 17
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1968:	ca c0       	rjmp	.+404    	; 0x1afe <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 3:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    196a:	8b e0       	ldi	r24, 0x0B	; 11
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1972:	8c e0       	ldi	r24, 0x0C	; 12
    1974:	61 e0       	ldi	r22, 0x01	; 1
    1976:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    197a:	8d e0       	ldi	r24, 0x0D	; 13
    197c:	61 e0       	ldi	r22, 0x01	; 1
    197e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1982:	8e e0       	ldi	r24, 0x0E	; 14
    1984:	61 e0       	ldi	r22, 0x01	; 1
    1986:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    198a:	8f e0       	ldi	r24, 0x0F	; 15
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1992:	80 e1       	ldi	r24, 0x10	; 16
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    199a:	81 e1       	ldi	r24, 0x11	; 17
    199c:	61 e0       	ldi	r22, 0x01	; 1
    199e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    19a2:	ad c0       	rjmp	.+346    	; 0x1afe <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 4:
		M_Dio_Void_PinWrite(SSD_LED_A,LOW);
    19a4:	8b e0       	ldi	r24, 0x0B	; 11
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    19ac:	8c e0       	ldi	r24, 0x0C	; 12
    19ae:	61 e0       	ldi	r22, 0x01	; 1
    19b0:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    19b4:	8d e0       	ldi	r24, 0x0D	; 13
    19b6:	61 e0       	ldi	r22, 0x01	; 1
    19b8:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    19bc:	8e e0       	ldi	r24, 0x0E	; 14
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    19c4:	8f e0       	ldi	r24, 0x0F	; 15
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    19cc:	80 e1       	ldi	r24, 0x10	; 16
    19ce:	61 e0       	ldi	r22, 0x01	; 1
    19d0:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    19d4:	81 e1       	ldi	r24, 0x11	; 17
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    19dc:	90 c0       	rjmp	.+288    	; 0x1afe <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 5:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    19de:	8b e0       	ldi	r24, 0x0B	; 11
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,LOW);
    19e6:	8c e0       	ldi	r24, 0x0C	; 12
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    19ee:	8d e0       	ldi	r24, 0x0D	; 13
    19f0:	61 e0       	ldi	r22, 0x01	; 1
    19f2:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    19f6:	8e e0       	ldi	r24, 0x0E	; 14
    19f8:	61 e0       	ldi	r22, 0x01	; 1
    19fa:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    19fe:	8f e0       	ldi	r24, 0x0F	; 15
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1a06:	80 e1       	ldi	r24, 0x10	; 16
    1a08:	61 e0       	ldi	r22, 0x01	; 1
    1a0a:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1a0e:	81 e1       	ldi	r24, 0x11	; 17
    1a10:	61 e0       	ldi	r22, 0x01	; 1
    1a12:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1a16:	73 c0       	rjmp	.+230    	; 0x1afe <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 6:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1a18:	8b e0       	ldi	r24, 0x0B	; 11
    1a1a:	61 e0       	ldi	r22, 0x01	; 1
    1a1c:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,LOW);
    1a20:	8c e0       	ldi	r24, 0x0C	; 12
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1a28:	8d e0       	ldi	r24, 0x0D	; 13
    1a2a:	61 e0       	ldi	r22, 0x01	; 1
    1a2c:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1a30:	8e e0       	ldi	r24, 0x0E	; 14
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1a38:	8f e0       	ldi	r24, 0x0F	; 15
    1a3a:	61 e0       	ldi	r22, 0x01	; 1
    1a3c:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1a40:	80 e1       	ldi	r24, 0x10	; 16
    1a42:	61 e0       	ldi	r22, 0x01	; 1
    1a44:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1a48:	81 e1       	ldi	r24, 0x11	; 17
    1a4a:	61 e0       	ldi	r22, 0x01	; 1
    1a4c:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1a50:	56 c0       	rjmp	.+172    	; 0x1afe <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 7:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1a52:	8b e0       	ldi	r24, 0x0B	; 11
    1a54:	61 e0       	ldi	r22, 0x01	; 1
    1a56:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1a5a:	8c e0       	ldi	r24, 0x0C	; 12
    1a5c:	61 e0       	ldi	r22, 0x01	; 1
    1a5e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1a62:	8d e0       	ldi	r24, 0x0D	; 13
    1a64:	61 e0       	ldi	r22, 0x01	; 1
    1a66:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    1a6a:	8e e0       	ldi	r24, 0x0E	; 14
    1a6c:	60 e0       	ldi	r22, 0x00	; 0
    1a6e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1a72:	8f e0       	ldi	r24, 0x0F	; 15
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1a7a:	80 e1       	ldi	r24, 0x10	; 16
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    1a82:	81 e1       	ldi	r24, 0x11	; 17
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1a8a:	39 c0       	rjmp	.+114    	; 0x1afe <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 8:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1a8c:	8b e0       	ldi	r24, 0x0B	; 11
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1a94:	8c e0       	ldi	r24, 0x0C	; 12
    1a96:	61 e0       	ldi	r22, 0x01	; 1
    1a98:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1a9c:	8d e0       	ldi	r24, 0x0D	; 13
    1a9e:	61 e0       	ldi	r22, 0x01	; 1
    1aa0:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1aa4:	8e e0       	ldi	r24, 0x0E	; 14
    1aa6:	61 e0       	ldi	r22, 0x01	; 1
    1aa8:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1aac:	8f e0       	ldi	r24, 0x0F	; 15
    1aae:	61 e0       	ldi	r22, 0x01	; 1
    1ab0:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1ab4:	80 e1       	ldi	r24, 0x10	; 16
    1ab6:	61 e0       	ldi	r22, 0x01	; 1
    1ab8:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1abc:	81 e1       	ldi	r24, 0x11	; 17
    1abe:	61 e0       	ldi	r22, 0x01	; 1
    1ac0:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1ac4:	1c c0       	rjmp	.+56     	; 0x1afe <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 9:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1ac6:	8b e0       	ldi	r24, 0x0B	; 11
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1ace:	8c e0       	ldi	r24, 0x0C	; 12
    1ad0:	61 e0       	ldi	r22, 0x01	; 1
    1ad2:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1ad6:	8d e0       	ldi	r24, 0x0D	; 13
    1ad8:	61 e0       	ldi	r22, 0x01	; 1
    1ada:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1ade:	8e e0       	ldi	r24, 0x0E	; 14
    1ae0:	61 e0       	ldi	r22, 0x01	; 1
    1ae2:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1ae6:	8f e0       	ldi	r24, 0x0F	; 15
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1aee:	80 e1       	ldi	r24, 0x10	; 16
    1af0:	61 e0       	ldi	r22, 0x01	; 1
    1af2:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1af6:	81 e1       	ldi	r24, 0x11	; 17
    1af8:	61 e0       	ldi	r22, 0x01	; 1
    1afa:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		break;

	}

	M_Dio_Void_PinWrite(SSD_EN_1,HIGH);
    1afe:	84 e2       	ldi	r24, 0x24	; 36
    1b00:	61 e0       	ldi	r22, 0x01	; 1
    1b02:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(SSD_EN_2,LOW);
    1b06:	85 e2       	ldi	r24, 0x25	; 37
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a0 e8       	ldi	r26, 0x80	; 128
    1b14:	bf e3       	ldi	r27, 0x3F	; 63
    1b16:	89 8f       	std	Y+25, r24	; 0x19
    1b18:	9a 8f       	std	Y+26, r25	; 0x1a
    1b1a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	4a e7       	ldi	r20, 0x7A	; 122
    1b2c:	55 e4       	ldi	r21, 0x45	; 69
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	8d 8b       	std	Y+21, r24	; 0x15
    1b38:	9e 8b       	std	Y+22, r25	; 0x16
    1b3a:	af 8b       	std	Y+23, r26	; 0x17
    1b3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b40:	7e 89       	ldd	r23, Y+22	; 0x16
    1b42:	8f 89       	ldd	r24, Y+23	; 0x17
    1b44:	98 8d       	ldd	r25, Y+24	; 0x18
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	5f e3       	ldi	r21, 0x3F	; 63
    1b4e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1b52:	88 23       	and	r24, r24
    1b54:	2c f4       	brge	.+10     	; 0x1b60 <H_SSD_Void_SSDDisplay+0x378>
		__ticks = 1;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9c 8b       	std	Y+20, r25	; 0x14
    1b5c:	8b 8b       	std	Y+19, r24	; 0x13
    1b5e:	3f c0       	rjmp	.+126    	; 0x1bde <H_SSD_Void_SSDDisplay+0x3f6>
	else if (__tmp > 65535)
    1b60:	6d 89       	ldd	r22, Y+21	; 0x15
    1b62:	7e 89       	ldd	r23, Y+22	; 0x16
    1b64:	8f 89       	ldd	r24, Y+23	; 0x17
    1b66:	98 8d       	ldd	r25, Y+24	; 0x18
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	3f ef       	ldi	r19, 0xFF	; 255
    1b6c:	4f e7       	ldi	r20, 0x7F	; 127
    1b6e:	57 e4       	ldi	r21, 0x47	; 71
    1b70:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1b74:	18 16       	cp	r1, r24
    1b76:	4c f5       	brge	.+82     	; 0x1bca <H_SSD_Void_SSDDisplay+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b78:	69 8d       	ldd	r22, Y+25	; 0x19
    1b7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e2       	ldi	r20, 0x20	; 32
    1b86:	51 e4       	ldi	r21, 0x41	; 65
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	bc 01       	movw	r22, r24
    1b92:	cd 01       	movw	r24, r26
    1b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9c 8b       	std	Y+20, r25	; 0x14
    1b9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ba0:	0f c0       	rjmp	.+30     	; 0x1bc0 <H_SSD_Void_SSDDisplay+0x3d8>
    1ba2:	80 e9       	ldi	r24, 0x90	; 144
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	9a 8b       	std	Y+18, r25	; 0x12
    1ba8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1baa:	89 89       	ldd	r24, Y+17	; 0x11
    1bac:	9a 89       	ldd	r25, Y+18	; 0x12
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <H_SSD_Void_SSDDisplay+0x3c6>
    1bb2:	9a 8b       	std	Y+18, r25	; 0x12
    1bb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	9c 8b       	std	Y+20, r25	; 0x14
    1bbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	69 f7       	brne	.-38     	; 0x1ba2 <H_SSD_Void_SSDDisplay+0x3ba>
    1bc8:	14 c0       	rjmp	.+40     	; 0x1bf2 <H_SSD_Void_SSDDisplay+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bca:	6d 89       	ldd	r22, Y+21	; 0x15
    1bcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bce:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9c 8b       	std	Y+20, r25	; 0x14
    1bdc:	8b 8b       	std	Y+19, r24	; 0x13
    1bde:	8b 89       	ldd	r24, Y+19	; 0x13
    1be0:	9c 89       	ldd	r25, Y+20	; 0x14
    1be2:	98 8b       	std	Y+16, r25	; 0x10
    1be4:	8f 87       	std	Y+15, r24	; 0x0f
    1be6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be8:	98 89       	ldd	r25, Y+16	; 0x10
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <H_SSD_Void_SSDDisplay+0x402>
    1bee:	98 8b       	std	Y+16, r25	; 0x10
    1bf0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_Void_PinWrite(SSD_EN_1,LOW);
    1bf2:	84 e2       	ldi	r24, 0x24	; 36
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>

	switch(Local_u8_Tens)
    1bfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	39 a3       	std	Y+33, r19	; 0x21
    1c02:	28 a3       	std	Y+32, r18	; 0x20
    1c04:	88 a1       	ldd	r24, Y+32	; 0x20
    1c06:	99 a1       	ldd	r25, Y+33	; 0x21
    1c08:	84 30       	cpi	r24, 0x04	; 4
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <H_SSD_Void_SSDDisplay+0x428>
    1c0e:	bb c0       	rjmp	.+374    	; 0x1d86 <H_SSD_Void_SSDDisplay+0x59e>
    1c10:	28 a1       	ldd	r18, Y+32	; 0x20
    1c12:	39 a1       	ldd	r19, Y+33	; 0x21
    1c14:	25 30       	cpi	r18, 0x05	; 5
    1c16:	31 05       	cpc	r19, r1
    1c18:	ec f4       	brge	.+58     	; 0x1c54 <H_SSD_Void_SSDDisplay+0x46c>
    1c1a:	88 a1       	ldd	r24, Y+32	; 0x20
    1c1c:	99 a1       	ldd	r25, Y+33	; 0x21
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	91 05       	cpc	r25, r1
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <H_SSD_Void_SSDDisplay+0x43e>
    1c24:	59 c0       	rjmp	.+178    	; 0x1cd8 <H_SSD_Void_SSDDisplay+0x4f0>
    1c26:	28 a1       	ldd	r18, Y+32	; 0x20
    1c28:	39 a1       	ldd	r19, Y+33	; 0x21
    1c2a:	22 30       	cpi	r18, 0x02	; 2
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	2c f4       	brge	.+10     	; 0x1c3a <H_SSD_Void_SSDDisplay+0x452>
    1c30:	88 a1       	ldd	r24, Y+32	; 0x20
    1c32:	99 a1       	ldd	r25, Y+33	; 0x21
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	99 f1       	breq	.+102    	; 0x1c9e <H_SSD_Void_SSDDisplay+0x4b6>
    1c38:	53 c1       	rjmp	.+678    	; 0x1ee0 <H_SSD_Void_SSDDisplay+0x6f8>
    1c3a:	28 a1       	ldd	r18, Y+32	; 0x20
    1c3c:	39 a1       	ldd	r19, Y+33	; 0x21
    1c3e:	22 30       	cpi	r18, 0x02	; 2
    1c40:	31 05       	cpc	r19, r1
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <H_SSD_Void_SSDDisplay+0x45e>
    1c44:	66 c0       	rjmp	.+204    	; 0x1d12 <H_SSD_Void_SSDDisplay+0x52a>
    1c46:	88 a1       	ldd	r24, Y+32	; 0x20
    1c48:	99 a1       	ldd	r25, Y+33	; 0x21
    1c4a:	83 30       	cpi	r24, 0x03	; 3
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <H_SSD_Void_SSDDisplay+0x46a>
    1c50:	7d c0       	rjmp	.+250    	; 0x1d4c <H_SSD_Void_SSDDisplay+0x564>
    1c52:	46 c1       	rjmp	.+652    	; 0x1ee0 <H_SSD_Void_SSDDisplay+0x6f8>
    1c54:	28 a1       	ldd	r18, Y+32	; 0x20
    1c56:	39 a1       	ldd	r19, Y+33	; 0x21
    1c58:	27 30       	cpi	r18, 0x07	; 7
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <H_SSD_Void_SSDDisplay+0x478>
    1c5e:	ea c0       	rjmp	.+468    	; 0x1e34 <H_SSD_Void_SSDDisplay+0x64c>
    1c60:	88 a1       	ldd	r24, Y+32	; 0x20
    1c62:	99 a1       	ldd	r25, Y+33	; 0x21
    1c64:	88 30       	cpi	r24, 0x08	; 8
    1c66:	91 05       	cpc	r25, r1
    1c68:	6c f4       	brge	.+26     	; 0x1c84 <H_SSD_Void_SSDDisplay+0x49c>
    1c6a:	28 a1       	ldd	r18, Y+32	; 0x20
    1c6c:	39 a1       	ldd	r19, Y+33	; 0x21
    1c6e:	25 30       	cpi	r18, 0x05	; 5
    1c70:	31 05       	cpc	r19, r1
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <H_SSD_Void_SSDDisplay+0x48e>
    1c74:	a5 c0       	rjmp	.+330    	; 0x1dc0 <H_SSD_Void_SSDDisplay+0x5d8>
    1c76:	88 a1       	ldd	r24, Y+32	; 0x20
    1c78:	99 a1       	ldd	r25, Y+33	; 0x21
    1c7a:	86 30       	cpi	r24, 0x06	; 6
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <H_SSD_Void_SSDDisplay+0x49a>
    1c80:	bc c0       	rjmp	.+376    	; 0x1dfa <H_SSD_Void_SSDDisplay+0x612>
    1c82:	2e c1       	rjmp	.+604    	; 0x1ee0 <H_SSD_Void_SSDDisplay+0x6f8>
    1c84:	28 a1       	ldd	r18, Y+32	; 0x20
    1c86:	39 a1       	ldd	r19, Y+33	; 0x21
    1c88:	28 30       	cpi	r18, 0x08	; 8
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <H_SSD_Void_SSDDisplay+0x4a8>
    1c8e:	ef c0       	rjmp	.+478    	; 0x1e6e <H_SSD_Void_SSDDisplay+0x686>
    1c90:	88 a1       	ldd	r24, Y+32	; 0x20
    1c92:	99 a1       	ldd	r25, Y+33	; 0x21
    1c94:	89 30       	cpi	r24, 0x09	; 9
    1c96:	91 05       	cpc	r25, r1
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <H_SSD_Void_SSDDisplay+0x4b4>
    1c9a:	06 c1       	rjmp	.+524    	; 0x1ea8 <H_SSD_Void_SSDDisplay+0x6c0>
    1c9c:	21 c1       	rjmp	.+578    	; 0x1ee0 <H_SSD_Void_SSDDisplay+0x6f8>
	{
	case 0:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1c9e:	8b e0       	ldi	r24, 0x0B	; 11
    1ca0:	61 e0       	ldi	r22, 0x01	; 1
    1ca2:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1ca6:	8c e0       	ldi	r24, 0x0C	; 12
    1ca8:	61 e0       	ldi	r22, 0x01	; 1
    1caa:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1cae:	8d e0       	ldi	r24, 0x0D	; 13
    1cb0:	61 e0       	ldi	r22, 0x01	; 1
    1cb2:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1cb6:	8e e0       	ldi	r24, 0x0E	; 14
    1cb8:	61 e0       	ldi	r22, 0x01	; 1
    1cba:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1cbe:	8f e0       	ldi	r24, 0x0F	; 15
    1cc0:	61 e0       	ldi	r22, 0x01	; 1
    1cc2:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1cc6:	80 e1       	ldi	r24, 0x10	; 16
    1cc8:	61 e0       	ldi	r22, 0x01	; 1
    1cca:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    1cce:	81 e1       	ldi	r24, 0x11	; 17
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1cd6:	04 c1       	rjmp	.+520    	; 0x1ee0 <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 1:
		M_Dio_Void_PinWrite(SSD_LED_A,LOW);
    1cd8:	8b e0       	ldi	r24, 0x0B	; 11
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1ce0:	8c e0       	ldi	r24, 0x0C	; 12
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1ce8:	8d e0       	ldi	r24, 0x0D	; 13
    1cea:	61 e0       	ldi	r22, 0x01	; 1
    1cec:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    1cf0:	8e e0       	ldi	r24, 0x0E	; 14
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1cf8:	80 e1       	ldi	r24, 0x10	; 16
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1d00:	8f e0       	ldi	r24, 0x0F	; 15
    1d02:	60 e0       	ldi	r22, 0x00	; 0
    1d04:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    1d08:	81 e1       	ldi	r24, 0x11	; 17
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1d10:	e7 c0       	rjmp	.+462    	; 0x1ee0 <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 2:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1d12:	8b e0       	ldi	r24, 0x0B	; 11
    1d14:	61 e0       	ldi	r22, 0x01	; 1
    1d16:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1d1a:	8c e0       	ldi	r24, 0x0C	; 12
    1d1c:	61 e0       	ldi	r22, 0x01	; 1
    1d1e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,LOW);
    1d22:	8d e0       	ldi	r24, 0x0D	; 13
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1d2a:	8e e0       	ldi	r24, 0x0E	; 14
    1d2c:	61 e0       	ldi	r22, 0x01	; 1
    1d2e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1d32:	8f e0       	ldi	r24, 0x0F	; 15
    1d34:	61 e0       	ldi	r22, 0x01	; 1
    1d36:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1d3a:	80 e1       	ldi	r24, 0x10	; 16
    1d3c:	60 e0       	ldi	r22, 0x00	; 0
    1d3e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1d42:	81 e1       	ldi	r24, 0x11	; 17
    1d44:	61 e0       	ldi	r22, 0x01	; 1
    1d46:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1d4a:	ca c0       	rjmp	.+404    	; 0x1ee0 <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 3:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1d4c:	8b e0       	ldi	r24, 0x0B	; 11
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1d54:	8c e0       	ldi	r24, 0x0C	; 12
    1d56:	61 e0       	ldi	r22, 0x01	; 1
    1d58:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1d5c:	8d e0       	ldi	r24, 0x0D	; 13
    1d5e:	61 e0       	ldi	r22, 0x01	; 1
    1d60:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1d64:	8e e0       	ldi	r24, 0x0E	; 14
    1d66:	61 e0       	ldi	r22, 0x01	; 1
    1d68:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1d6c:	8f e0       	ldi	r24, 0x0F	; 15
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1d74:	80 e1       	ldi	r24, 0x10	; 16
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1d7c:	81 e1       	ldi	r24, 0x11	; 17
    1d7e:	61 e0       	ldi	r22, 0x01	; 1
    1d80:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1d84:	ad c0       	rjmp	.+346    	; 0x1ee0 <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 4:
		M_Dio_Void_PinWrite(SSD_LED_A,LOW);
    1d86:	8b e0       	ldi	r24, 0x0B	; 11
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1d8e:	8c e0       	ldi	r24, 0x0C	; 12
    1d90:	61 e0       	ldi	r22, 0x01	; 1
    1d92:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1d96:	8d e0       	ldi	r24, 0x0D	; 13
    1d98:	61 e0       	ldi	r22, 0x01	; 1
    1d9a:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    1d9e:	8e e0       	ldi	r24, 0x0E	; 14
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1da6:	8f e0       	ldi	r24, 0x0F	; 15
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1dae:	80 e1       	ldi	r24, 0x10	; 16
    1db0:	61 e0       	ldi	r22, 0x01	; 1
    1db2:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1db6:	81 e1       	ldi	r24, 0x11	; 17
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1dbe:	90 c0       	rjmp	.+288    	; 0x1ee0 <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 5:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1dc0:	8b e0       	ldi	r24, 0x0B	; 11
    1dc2:	61 e0       	ldi	r22, 0x01	; 1
    1dc4:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,LOW);
    1dc8:	8c e0       	ldi	r24, 0x0C	; 12
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1dd0:	8d e0       	ldi	r24, 0x0D	; 13
    1dd2:	61 e0       	ldi	r22, 0x01	; 1
    1dd4:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1dd8:	8e e0       	ldi	r24, 0x0E	; 14
    1dda:	61 e0       	ldi	r22, 0x01	; 1
    1ddc:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1de0:	8f e0       	ldi	r24, 0x0F	; 15
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1de8:	80 e1       	ldi	r24, 0x10	; 16
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1df0:	81 e1       	ldi	r24, 0x11	; 17
    1df2:	61 e0       	ldi	r22, 0x01	; 1
    1df4:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1df8:	73 c0       	rjmp	.+230    	; 0x1ee0 <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 6:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1dfa:	8b e0       	ldi	r24, 0x0B	; 11
    1dfc:	61 e0       	ldi	r22, 0x01	; 1
    1dfe:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,LOW);
    1e02:	8c e0       	ldi	r24, 0x0C	; 12
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1e0a:	8d e0       	ldi	r24, 0x0D	; 13
    1e0c:	61 e0       	ldi	r22, 0x01	; 1
    1e0e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1e12:	8e e0       	ldi	r24, 0x0E	; 14
    1e14:	61 e0       	ldi	r22, 0x01	; 1
    1e16:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1e1a:	8f e0       	ldi	r24, 0x0F	; 15
    1e1c:	61 e0       	ldi	r22, 0x01	; 1
    1e1e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1e22:	80 e1       	ldi	r24, 0x10	; 16
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1e2a:	81 e1       	ldi	r24, 0x11	; 17
    1e2c:	61 e0       	ldi	r22, 0x01	; 1
    1e2e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1e32:	56 c0       	rjmp	.+172    	; 0x1ee0 <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 7:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1e34:	8b e0       	ldi	r24, 0x0B	; 11
    1e36:	61 e0       	ldi	r22, 0x01	; 1
    1e38:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1e3c:	8c e0       	ldi	r24, 0x0C	; 12
    1e3e:	61 e0       	ldi	r22, 0x01	; 1
    1e40:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1e44:	8d e0       	ldi	r24, 0x0D	; 13
    1e46:	61 e0       	ldi	r22, 0x01	; 1
    1e48:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    1e4c:	8e e0       	ldi	r24, 0x0E	; 14
    1e4e:	60 e0       	ldi	r22, 0x00	; 0
    1e50:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1e54:	8f e0       	ldi	r24, 0x0F	; 15
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1e5c:	80 e1       	ldi	r24, 0x10	; 16
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    1e64:	81 e1       	ldi	r24, 0x11	; 17
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1e6c:	39 c0       	rjmp	.+114    	; 0x1ee0 <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 8:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1e6e:	8b e0       	ldi	r24, 0x0B	; 11
    1e70:	61 e0       	ldi	r22, 0x01	; 1
    1e72:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1e76:	8c e0       	ldi	r24, 0x0C	; 12
    1e78:	61 e0       	ldi	r22, 0x01	; 1
    1e7a:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1e7e:	8d e0       	ldi	r24, 0x0D	; 13
    1e80:	61 e0       	ldi	r22, 0x01	; 1
    1e82:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1e86:	8e e0       	ldi	r24, 0x0E	; 14
    1e88:	61 e0       	ldi	r22, 0x01	; 1
    1e8a:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1e8e:	8f e0       	ldi	r24, 0x0F	; 15
    1e90:	61 e0       	ldi	r22, 0x01	; 1
    1e92:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1e96:	80 e1       	ldi	r24, 0x10	; 16
    1e98:	61 e0       	ldi	r22, 0x01	; 1
    1e9a:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1e9e:	81 e1       	ldi	r24, 0x11	; 17
    1ea0:	61 e0       	ldi	r22, 0x01	; 1
    1ea2:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1ea6:	1c c0       	rjmp	.+56     	; 0x1ee0 <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 9:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1ea8:	8b e0       	ldi	r24, 0x0B	; 11
    1eaa:	61 e0       	ldi	r22, 0x01	; 1
    1eac:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1eb0:	8c e0       	ldi	r24, 0x0C	; 12
    1eb2:	61 e0       	ldi	r22, 0x01	; 1
    1eb4:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1eb8:	8d e0       	ldi	r24, 0x0D	; 13
    1eba:	61 e0       	ldi	r22, 0x01	; 1
    1ebc:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1ec0:	8e e0       	ldi	r24, 0x0E	; 14
    1ec2:	61 e0       	ldi	r22, 0x01	; 1
    1ec4:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1ec8:	8f e0       	ldi	r24, 0x0F	; 15
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1ed0:	80 e1       	ldi	r24, 0x10	; 16
    1ed2:	61 e0       	ldi	r22, 0x01	; 1
    1ed4:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1ed8:	81 e1       	ldi	r24, 0x11	; 17
    1eda:	61 e0       	ldi	r22, 0x01	; 1
    1edc:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		break;

	}

	M_Dio_Void_PinWrite(SSD_EN_1,LOW);
    1ee0:	84 e2       	ldi	r24, 0x24	; 36
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(SSD_EN_2,HIGH);
    1ee8:	85 e2       	ldi	r24, 0x25	; 37
    1eea:	61 e0       	ldi	r22, 0x01	; 1
    1eec:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	a0 e8       	ldi	r26, 0x80	; 128
    1ef6:	bf e3       	ldi	r27, 0x3F	; 63
    1ef8:	8b 87       	std	Y+11, r24	; 0x0b
    1efa:	9c 87       	std	Y+12, r25	; 0x0c
    1efc:	ad 87       	std	Y+13, r26	; 0x0d
    1efe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	4a e7       	ldi	r20, 0x7A	; 122
    1f0e:	55 e4       	ldi	r21, 0x45	; 69
    1f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	8f 83       	std	Y+7, r24	; 0x07
    1f1a:	98 87       	std	Y+8, r25	; 0x08
    1f1c:	a9 87       	std	Y+9, r26	; 0x09
    1f1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f20:	6f 81       	ldd	r22, Y+7	; 0x07
    1f22:	78 85       	ldd	r23, Y+8	; 0x08
    1f24:	89 85       	ldd	r24, Y+9	; 0x09
    1f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e8       	ldi	r20, 0x80	; 128
    1f2e:	5f e3       	ldi	r21, 0x3F	; 63
    1f30:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1f34:	88 23       	and	r24, r24
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <H_SSD_Void_SSDDisplay+0x75a>
		__ticks = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9e 83       	std	Y+6, r25	; 0x06
    1f3e:	8d 83       	std	Y+5, r24	; 0x05
    1f40:	3f c0       	rjmp	.+126    	; 0x1fc0 <H_SSD_Void_SSDDisplay+0x7d8>
	else if (__tmp > 65535)
    1f42:	6f 81       	ldd	r22, Y+7	; 0x07
    1f44:	78 85       	ldd	r23, Y+8	; 0x08
    1f46:	89 85       	ldd	r24, Y+9	; 0x09
    1f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	57 e4       	ldi	r21, 0x47	; 71
    1f52:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1f56:	18 16       	cp	r1, r24
    1f58:	4c f5       	brge	.+82     	; 0x1fac <H_SSD_Void_SSDDisplay+0x7c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e2       	ldi	r20, 0x20	; 32
    1f68:	51 e4       	ldi	r21, 0x41	; 65
    1f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	bc 01       	movw	r22, r24
    1f74:	cd 01       	movw	r24, r26
    1f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9e 83       	std	Y+6, r25	; 0x06
    1f80:	8d 83       	std	Y+5, r24	; 0x05
    1f82:	0f c0       	rjmp	.+30     	; 0x1fa2 <H_SSD_Void_SSDDisplay+0x7ba>
    1f84:	80 e9       	ldi	r24, 0x90	; 144
    1f86:	91 e0       	ldi	r25, 0x01	; 1
    1f88:	9c 83       	std	Y+4, r25	; 0x04
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <H_SSD_Void_SSDDisplay+0x7a8>
    1f94:	9c 83       	std	Y+4, r25	; 0x04
    1f96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	69 f7       	brne	.-38     	; 0x1f84 <H_SSD_Void_SSDDisplay+0x79c>
    1faa:	14 c0       	rjmp	.+40     	; 0x1fd4 <H_SSD_Void_SSDDisplay+0x7ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fac:	6f 81       	ldd	r22, Y+7	; 0x07
    1fae:	78 85       	ldd	r23, Y+8	; 0x08
    1fb0:	89 85       	ldd	r24, Y+9	; 0x09
    1fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <H_SSD_Void_SSDDisplay+0x7e4>
    1fd0:	9a 83       	std	Y+2, r25	; 0x02
    1fd2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	M_Dio_Void_PinWrite(SSD_EN_2,LOW);
    1fd4:	85 e2       	ldi	r24, 0x25	; 37
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
}
    1fdc:	a3 96       	adiw	r28, 0x23	; 35
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <H_SSD_Void_SSDCountUp>:

void H_SSD_Void_SSDCountUp(u8 Local_u8_Num)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	60 97       	sbiw	r28, 0x10	; 16
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8_Count = 0;
    2004:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_u8_Count = 0 ; Local_u8_Count <= Local_u8_Num ; Local_u8_Count++)
    2006:	1f 86       	std	Y+15, r1	; 0x0f
    2008:	78 c0       	rjmp	.+240    	; 0x20fa <H_SSD_Void_SSDCountUp+0x10c>
	{
		H_SSD_Void_SSDDisplay(Local_u8_Count);
    200a:	8f 85       	ldd	r24, Y+15	; 0x0f
    200c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <H_SSD_Void_SSDDisplay>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	a0 ea       	ldi	r26, 0xA0	; 160
    2016:	b0 e4       	ldi	r27, 0x40	; 64
    2018:	8b 87       	std	Y+11, r24	; 0x0b
    201a:	9c 87       	std	Y+12, r25	; 0x0c
    201c:	ad 87       	std	Y+13, r26	; 0x0d
    201e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2020:	6b 85       	ldd	r22, Y+11	; 0x0b
    2022:	7c 85       	ldd	r23, Y+12	; 0x0c
    2024:	8d 85       	ldd	r24, Y+13	; 0x0d
    2026:	9e 85       	ldd	r25, Y+14	; 0x0e
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	4a e7       	ldi	r20, 0x7A	; 122
    202e:	55 e4       	ldi	r21, 0x45	; 69
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8f 83       	std	Y+7, r24	; 0x07
    203a:	98 87       	std	Y+8, r25	; 0x08
    203c:	a9 87       	std	Y+9, r26	; 0x09
    203e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2040:	6f 81       	ldd	r22, Y+7	; 0x07
    2042:	78 85       	ldd	r23, Y+8	; 0x08
    2044:	89 85       	ldd	r24, Y+9	; 0x09
    2046:	9a 85       	ldd	r25, Y+10	; 0x0a
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e8       	ldi	r20, 0x80	; 128
    204e:	5f e3       	ldi	r21, 0x3F	; 63
    2050:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2054:	88 23       	and	r24, r24
    2056:	2c f4       	brge	.+10     	; 0x2062 <H_SSD_Void_SSDCountUp+0x74>
		__ticks = 1;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
    2060:	3f c0       	rjmp	.+126    	; 0x20e0 <H_SSD_Void_SSDCountUp+0xf2>
	else if (__tmp > 65535)
    2062:	6f 81       	ldd	r22, Y+7	; 0x07
    2064:	78 85       	ldd	r23, Y+8	; 0x08
    2066:	89 85       	ldd	r24, Y+9	; 0x09
    2068:	9a 85       	ldd	r25, Y+10	; 0x0a
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	3f ef       	ldi	r19, 0xFF	; 255
    206e:	4f e7       	ldi	r20, 0x7F	; 127
    2070:	57 e4       	ldi	r21, 0x47	; 71
    2072:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2076:	18 16       	cp	r1, r24
    2078:	4c f5       	brge	.+82     	; 0x20cc <H_SSD_Void_SSDCountUp+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207a:	6b 85       	ldd	r22, Y+11	; 0x0b
    207c:	7c 85       	ldd	r23, Y+12	; 0x0c
    207e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2080:	9e 85       	ldd	r25, Y+14	; 0x0e
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e2       	ldi	r20, 0x20	; 32
    2088:	51 e4       	ldi	r21, 0x41	; 65
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <H_SSD_Void_SSDCountUp+0xd4>
    20a4:	80 e9       	ldi	r24, 0x90	; 144
    20a6:	91 e0       	ldi	r25, 0x01	; 1
    20a8:	9c 83       	std	Y+4, r25	; 0x04
    20aa:	8b 83       	std	Y+3, r24	; 0x03
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	9c 81       	ldd	r25, Y+4	; 0x04
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <H_SSD_Void_SSDCountUp+0xc2>
    20b4:	9c 83       	std	Y+4, r25	; 0x04
    20b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ba:	9e 81       	ldd	r25, Y+6	; 0x06
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	9e 83       	std	Y+6, r25	; 0x06
    20c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c2:	8d 81       	ldd	r24, Y+5	; 0x05
    20c4:	9e 81       	ldd	r25, Y+6	; 0x06
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	69 f7       	brne	.-38     	; 0x20a4 <H_SSD_Void_SSDCountUp+0xb6>
    20ca:	14 c0       	rjmp	.+40     	; 0x20f4 <H_SSD_Void_SSDCountUp+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20cc:	6f 81       	ldd	r22, Y+7	; 0x07
    20ce:	78 85       	ldd	r23, Y+8	; 0x08
    20d0:	89 85       	ldd	r24, Y+9	; 0x09
    20d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	9e 81       	ldd	r25, Y+6	; 0x06
    20e4:	9a 83       	std	Y+2, r25	; 0x02
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <H_SSD_Void_SSDCountUp+0xfe>
    20f0:	9a 83       	std	Y+2, r25	; 0x02
    20f2:	89 83       	std	Y+1, r24	; 0x01
}

void H_SSD_Void_SSDCountUp(u8 Local_u8_Num)
{
	u8 Local_u8_Count = 0;
	for(Local_u8_Count = 0 ; Local_u8_Count <= Local_u8_Num ; Local_u8_Count++)
    20f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f6:	8f 5f       	subi	r24, 0xFF	; 255
    20f8:	8f 87       	std	Y+15, r24	; 0x0f
    20fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    20fc:	88 89       	ldd	r24, Y+16	; 0x10
    20fe:	89 17       	cp	r24, r25
    2100:	08 f0       	brcs	.+2      	; 0x2104 <H_SSD_Void_SSDCountUp+0x116>
    2102:	83 cf       	rjmp	.-250    	; 0x200a <H_SSD_Void_SSDCountUp+0x1c>
	{
		H_SSD_Void_SSDDisplay(Local_u8_Count);
		_delay_ms(5);
	}
}
    2104:	60 96       	adiw	r28, 0x10	; 16
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <H_SSD_Void_SSDCountDown>:

void H_SSD_Void_SSDCountDown(u8 Local_u8_Num)
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	60 97       	sbiw	r28, 0x10	; 16
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	88 8b       	std	Y+16, r24	; 0x10
	s8 Local_u8_Count = Local_u8_Num;
    212c:	88 89       	ldd	r24, Y+16	; 0x10
    212e:	8f 87       	std	Y+15, r24	; 0x0f
	for(Local_u8_Count = Local_u8_Num ; Local_u8_Count > Local_u8_Num ; Local_u8_Count--)
    2130:	88 89       	ldd	r24, Y+16	; 0x10
    2132:	8f 87       	std	Y+15, r24	; 0x0f
    2134:	78 c0       	rjmp	.+240    	; 0x2226 <H_SSD_Void_SSDCountDown+0x110>
	{
		H_SSD_Void_SSDDisplay(Local_u8_Count);
    2136:	8f 85       	ldd	r24, Y+15	; 0x0f
    2138:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <H_SSD_Void_SSDDisplay>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	a0 ea       	ldi	r26, 0xA0	; 160
    2142:	b0 e4       	ldi	r27, 0x40	; 64
    2144:	8b 87       	std	Y+11, r24	; 0x0b
    2146:	9c 87       	std	Y+12, r25	; 0x0c
    2148:	ad 87       	std	Y+13, r26	; 0x0d
    214a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214c:	6b 85       	ldd	r22, Y+11	; 0x0b
    214e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2150:	8d 85       	ldd	r24, Y+13	; 0x0d
    2152:	9e 85       	ldd	r25, Y+14	; 0x0e
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	4a e7       	ldi	r20, 0x7A	; 122
    215a:	55 e4       	ldi	r21, 0x45	; 69
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	8f 83       	std	Y+7, r24	; 0x07
    2166:	98 87       	std	Y+8, r25	; 0x08
    2168:	a9 87       	std	Y+9, r26	; 0x09
    216a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    216c:	6f 81       	ldd	r22, Y+7	; 0x07
    216e:	78 85       	ldd	r23, Y+8	; 0x08
    2170:	89 85       	ldd	r24, Y+9	; 0x09
    2172:	9a 85       	ldd	r25, Y+10	; 0x0a
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e8       	ldi	r20, 0x80	; 128
    217a:	5f e3       	ldi	r21, 0x3F	; 63
    217c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2180:	88 23       	and	r24, r24
    2182:	2c f4       	brge	.+10     	; 0x218e <H_SSD_Void_SSDCountDown+0x78>
		__ticks = 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9e 83       	std	Y+6, r25	; 0x06
    218a:	8d 83       	std	Y+5, r24	; 0x05
    218c:	3f c0       	rjmp	.+126    	; 0x220c <H_SSD_Void_SSDCountDown+0xf6>
	else if (__tmp > 65535)
    218e:	6f 81       	ldd	r22, Y+7	; 0x07
    2190:	78 85       	ldd	r23, Y+8	; 0x08
    2192:	89 85       	ldd	r24, Y+9	; 0x09
    2194:	9a 85       	ldd	r25, Y+10	; 0x0a
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	3f ef       	ldi	r19, 0xFF	; 255
    219a:	4f e7       	ldi	r20, 0x7F	; 127
    219c:	57 e4       	ldi	r21, 0x47	; 71
    219e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    21a2:	18 16       	cp	r1, r24
    21a4:	4c f5       	brge	.+82     	; 0x21f8 <H_SSD_Void_SSDCountDown+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e2       	ldi	r20, 0x20	; 32
    21b4:	51 e4       	ldi	r21, 0x41	; 65
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9e 83       	std	Y+6, r25	; 0x06
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <H_SSD_Void_SSDCountDown+0xd8>
    21d0:	80 e9       	ldi	r24, 0x90	; 144
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	9c 83       	std	Y+4, r25	; 0x04
    21d6:	8b 83       	std	Y+3, r24	; 0x03
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <H_SSD_Void_SSDCountDown+0xc6>
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	9e 83       	std	Y+6, r25	; 0x06
    21ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	9e 81       	ldd	r25, Y+6	; 0x06
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	69 f7       	brne	.-38     	; 0x21d0 <H_SSD_Void_SSDCountDown+0xba>
    21f6:	14 c0       	rjmp	.+40     	; 0x2220 <H_SSD_Void_SSDCountDown+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f8:	6f 81       	ldd	r22, Y+7	; 0x07
    21fa:	78 85       	ldd	r23, Y+8	; 0x08
    21fc:	89 85       	ldd	r24, Y+9	; 0x09
    21fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <H_SSD_Void_SSDCountDown+0x102>
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
}

void H_SSD_Void_SSDCountDown(u8 Local_u8_Num)
{
	s8 Local_u8_Count = Local_u8_Num;
	for(Local_u8_Count = Local_u8_Num ; Local_u8_Count > Local_u8_Num ; Local_u8_Count--)
    2220:	8f 85       	ldd	r24, Y+15	; 0x0f
    2222:	81 50       	subi	r24, 0x01	; 1
    2224:	8f 87       	std	Y+15, r24	; 0x0f
    2226:	8f 85       	ldd	r24, Y+15	; 0x0f
    2228:	28 2f       	mov	r18, r24
    222a:	33 27       	eor	r19, r19
    222c:	27 fd       	sbrc	r18, 7
    222e:	30 95       	com	r19
    2230:	88 89       	ldd	r24, Y+16	; 0x10
    2232:	88 2f       	mov	r24, r24
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	82 17       	cp	r24, r18
    2238:	93 07       	cpc	r25, r19
    223a:	0c f4       	brge	.+2      	; 0x223e <H_SSD_Void_SSDCountDown+0x128>
    223c:	7c cf       	rjmp	.-264    	; 0x2136 <H_SSD_Void_SSDCountDown+0x20>
	{
		H_SSD_Void_SSDDisplay(Local_u8_Count);
		_delay_ms(5);
	}
}
    223e:	60 96       	adiw	r28, 0x10	; 16
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <H_Relay_Void_RelayInit>:
 */

#include"Relay.h"

void H_Relay_Void_RelayInit(u8 Local_u8_RelayNum)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <H_Relay_Void_RelayInit+0x6>
    2256:	0f 92       	push	r0
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_RelayNum)
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	3b 83       	std	Y+3, r19	; 0x03
    2266:	2a 83       	std	Y+2, r18	; 0x02
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	9b 81       	ldd	r25, Y+3	; 0x03
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	91 05       	cpc	r25, r1
    2270:	31 f0       	breq	.+12     	; 0x227e <H_Relay_Void_RelayInit+0x2e>
    2272:	2a 81       	ldd	r18, Y+2	; 0x02
    2274:	3b 81       	ldd	r19, Y+3	; 0x03
    2276:	22 30       	cpi	r18, 0x02	; 2
    2278:	31 05       	cpc	r19, r1
    227a:	31 f0       	breq	.+12     	; 0x2288 <H_Relay_Void_RelayInit+0x38>
    227c:	09 c0       	rjmp	.+18     	; 0x2290 <H_Relay_Void_RelayInit+0x40>
	{
		case RELAY1:
			M_Dio_Void_PinMode(Relay1_Pin,OUTPUT);		break;
    227e:	82 e2       	ldi	r24, 0x22	; 34
    2280:	61 e0       	ldi	r22, 0x01	; 1
    2282:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
    2286:	04 c0       	rjmp	.+8      	; 0x2290 <H_Relay_Void_RelayInit+0x40>
		case RELAY2:
			M_Dio_Void_PinMode(Relay2_Pin,OUTPUT);		break;
    2288:	81 e2       	ldi	r24, 0x21	; 33
    228a:	61 e0       	ldi	r22, 0x01	; 1
    228c:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
		default:									break;
	}
}
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <H_Relay_Void_RelayOn>:
void H_Relay_Void_RelayOn(u8 Local_u8_RelayNum)
{
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	00 d0       	rcall	.+0      	; 0x22a2 <H_Relay_Void_RelayOn+0x6>
    22a2:	0f 92       	push	r0
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    22a8:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_RelayNum)
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	3b 83       	std	Y+3, r19	; 0x03
    22b2:	2a 83       	std	Y+2, r18	; 0x02
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	9b 81       	ldd	r25, Y+3	; 0x03
    22b8:	81 30       	cpi	r24, 0x01	; 1
    22ba:	91 05       	cpc	r25, r1
    22bc:	31 f0       	breq	.+12     	; 0x22ca <H_Relay_Void_RelayOn+0x2e>
    22be:	2a 81       	ldd	r18, Y+2	; 0x02
    22c0:	3b 81       	ldd	r19, Y+3	; 0x03
    22c2:	22 30       	cpi	r18, 0x02	; 2
    22c4:	31 05       	cpc	r19, r1
    22c6:	31 f0       	breq	.+12     	; 0x22d4 <H_Relay_Void_RelayOn+0x38>
    22c8:	09 c0       	rjmp	.+18     	; 0x22dc <H_Relay_Void_RelayOn+0x40>
	{
		case RELAY1:
			M_Dio_Void_PinWrite(Relay1_Pin,HIGH);		break;
    22ca:	82 e2       	ldi	r24, 0x22	; 34
    22cc:	61 e0       	ldi	r22, 0x01	; 1
    22ce:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    22d2:	04 c0       	rjmp	.+8      	; 0x22dc <H_Relay_Void_RelayOn+0x40>
		case RELAY2:
			M_Dio_Void_PinWrite(Relay2_Pin,HIGH);		break;
    22d4:	81 e2       	ldi	r24, 0x21	; 33
    22d6:	61 e0       	ldi	r22, 0x01	; 1
    22d8:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		default:									break;
	}
}
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <H_Relay_Void_RelayOff>:
void H_Relay_Void_RelayOff(u8 Local_u8_RelayNum)
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <H_Relay_Void_RelayOff+0x6>
    22ee:	0f 92       	push	r0
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_RelayNum)
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	3b 83       	std	Y+3, r19	; 0x03
    22fe:	2a 83       	std	Y+2, r18	; 0x02
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	9b 81       	ldd	r25, Y+3	; 0x03
    2304:	81 30       	cpi	r24, 0x01	; 1
    2306:	91 05       	cpc	r25, r1
    2308:	31 f0       	breq	.+12     	; 0x2316 <H_Relay_Void_RelayOff+0x2e>
    230a:	2a 81       	ldd	r18, Y+2	; 0x02
    230c:	3b 81       	ldd	r19, Y+3	; 0x03
    230e:	22 30       	cpi	r18, 0x02	; 2
    2310:	31 05       	cpc	r19, r1
    2312:	31 f0       	breq	.+12     	; 0x2320 <H_Relay_Void_RelayOff+0x38>
    2314:	09 c0       	rjmp	.+18     	; 0x2328 <H_Relay_Void_RelayOff+0x40>
	{
		case RELAY1:
			M_Dio_Void_PinWrite(Relay1_Pin,LOW);		break;
    2316:	82 e2       	ldi	r24, 0x22	; 34
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    231e:	04 c0       	rjmp	.+8      	; 0x2328 <H_Relay_Void_RelayOff+0x40>
		case RELAY2:
			M_Dio_Void_PinWrite(Relay2_Pin,LOW);		break;
    2320:	81 e2       	ldi	r24, 0x21	; 33
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		default:									break;
	}
}
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	08 95       	ret

00002334 <H_Relay_Void_RelayTog>:
void H_Relay_Void_RelayTog(u8 Local_u8_RelayNum)
{
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	00 d0       	rcall	.+0      	; 0x233a <H_Relay_Void_RelayTog+0x6>
    233a:	0f 92       	push	r0
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_RelayNum)
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	3b 83       	std	Y+3, r19	; 0x03
    234a:	2a 83       	std	Y+2, r18	; 0x02
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	9b 81       	ldd	r25, Y+3	; 0x03
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	91 05       	cpc	r25, r1
    2354:	31 f0       	breq	.+12     	; 0x2362 <H_Relay_Void_RelayTog+0x2e>
    2356:	2a 81       	ldd	r18, Y+2	; 0x02
    2358:	3b 81       	ldd	r19, Y+3	; 0x03
    235a:	22 30       	cpi	r18, 0x02	; 2
    235c:	31 05       	cpc	r19, r1
    235e:	29 f0       	breq	.+10     	; 0x236a <H_Relay_Void_RelayTog+0x36>
    2360:	07 c0       	rjmp	.+14     	; 0x2370 <H_Relay_Void_RelayTog+0x3c>
	{
		case RELAY1:
			M_Dio_Void_PinTog(Relay1_Pin);		break;
    2362:	82 e2       	ldi	r24, 0x22	; 34
    2364:	0e 94 33 0a 	call	0x1466	; 0x1466 <M_Dio_Void_PinTog>
    2368:	03 c0       	rjmp	.+6      	; 0x2370 <H_Relay_Void_RelayTog+0x3c>
		case RELAY2:
			M_Dio_Void_PinTog(Relay2_Pin );		break;
    236a:	81 e2       	ldi	r24, 0x21	; 33
    236c:	0e 94 33 0a 	call	0x1466	; 0x1466 <M_Dio_Void_PinTog>
		default:							break;
	}
}
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <H_PushButton_Void_PushButtonInit>:

#include"PushButton.h"
#include"util/delay.h"

void H_PushButton_Void_PushButtonInit(u8 Local_u8_PushButton)
{
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	00 d0       	rcall	.+0      	; 0x2382 <H_PushButton_Void_PushButtonInit+0x6>
    2382:	0f 92       	push	r0
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_PushButton)
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	28 2f       	mov	r18, r24
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	3b 83       	std	Y+3, r19	; 0x03
    2392:	2a 83       	std	Y+2, r18	; 0x02
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	9b 81       	ldd	r25, Y+3	; 0x03
    2398:	82 30       	cpi	r24, 0x02	; 2
    239a:	91 05       	cpc	r25, r1
    239c:	d9 f0       	breq	.+54     	; 0x23d4 <H_PushButton_Void_PushButtonInit+0x58>
    239e:	2a 81       	ldd	r18, Y+2	; 0x02
    23a0:	3b 81       	ldd	r19, Y+3	; 0x03
    23a2:	23 30       	cpi	r18, 0x03	; 3
    23a4:	31 05       	cpc	r19, r1
    23a6:	34 f4       	brge	.+12     	; 0x23b4 <H_PushButton_Void_PushButtonInit+0x38>
    23a8:	8a 81       	ldd	r24, Y+2	; 0x02
    23aa:	9b 81       	ldd	r25, Y+3	; 0x03
    23ac:	81 30       	cpi	r24, 0x01	; 1
    23ae:	91 05       	cpc	r25, r1
    23b0:	61 f0       	breq	.+24     	; 0x23ca <H_PushButton_Void_PushButtonInit+0x4e>
    23b2:	1e c0       	rjmp	.+60     	; 0x23f0 <H_PushButton_Void_PushButtonInit+0x74>
    23b4:	2a 81       	ldd	r18, Y+2	; 0x02
    23b6:	3b 81       	ldd	r19, Y+3	; 0x03
    23b8:	23 30       	cpi	r18, 0x03	; 3
    23ba:	31 05       	cpc	r19, r1
    23bc:	81 f0       	breq	.+32     	; 0x23de <H_PushButton_Void_PushButtonInit+0x62>
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	9b 81       	ldd	r25, Y+3	; 0x03
    23c2:	84 30       	cpi	r24, 0x04	; 4
    23c4:	91 05       	cpc	r25, r1
    23c6:	81 f0       	breq	.+32     	; 0x23e8 <H_PushButton_Void_PushButtonInit+0x6c>
    23c8:	13 c0       	rjmp	.+38     	; 0x23f0 <H_PushButton_Void_PushButtonInit+0x74>
	{
	case PUSHBUTTON1: M_Dio_Void_PinMode(PUSHBUTTON1_PIN,INPUT);	break;
    23ca:	8a e2       	ldi	r24, 0x2A	; 42
    23cc:	60 e0       	ldi	r22, 0x00	; 0
    23ce:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
    23d2:	0e c0       	rjmp	.+28     	; 0x23f0 <H_PushButton_Void_PushButtonInit+0x74>
	case PUSHBUTTON2: M_Dio_Void_PinMode(PUSHBUTTON2_PIN,INPUT);	break;
    23d4:	8b e2       	ldi	r24, 0x2B	; 43
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
    23dc:	09 c0       	rjmp	.+18     	; 0x23f0 <H_PushButton_Void_PushButtonInit+0x74>
	case PUSHBUTTON3: M_Dio_Void_PinMode(PUSHBUTTON3_PIN,INPUT);	break;
    23de:	8c e2       	ldi	r24, 0x2C	; 44
    23e0:	60 e0       	ldi	r22, 0x00	; 0
    23e2:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
    23e6:	04 c0       	rjmp	.+8      	; 0x23f0 <H_PushButton_Void_PushButtonInit+0x74>
	case PUSHBUTTON4: M_Dio_Void_PinMode(PUSHBUTTON4_PIN,INPUT);	break;
    23e8:	8d e2       	ldi	r24, 0x2D	; 45
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	default:														break;
	}
}
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <H_PushButton_Void_PushButtonRead>:
u8 H_PushButton_Void_PushButtonRead(u8 Local_u8_PushButton)
{
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	ec 97       	sbiw	r28, 0x3c	; 60
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_u8_Reading = RELEASED;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	89 af       	std	Y+57, r24	; 0x39
	switch(Local_u8_PushButton)
    2416:	8a ad       	ldd	r24, Y+58	; 0x3a
    2418:	28 2f       	mov	r18, r24
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	3c af       	std	Y+60, r19	; 0x3c
    241e:	2b af       	std	Y+59, r18	; 0x3b
    2420:	8b ad       	ldd	r24, Y+59	; 0x3b
    2422:	9c ad       	ldd	r25, Y+60	; 0x3c
    2424:	82 30       	cpi	r24, 0x02	; 2
    2426:	91 05       	cpc	r25, r1
    2428:	09 f4       	brne	.+2      	; 0x242c <H_PushButton_Void_PushButtonRead+0x30>
    242a:	9f c0       	rjmp	.+318    	; 0x256a <H_PushButton_Void_PushButtonRead+0x16e>
    242c:	2b ad       	ldd	r18, Y+59	; 0x3b
    242e:	3c ad       	ldd	r19, Y+60	; 0x3c
    2430:	23 30       	cpi	r18, 0x03	; 3
    2432:	31 05       	cpc	r19, r1
    2434:	34 f4       	brge	.+12     	; 0x2442 <H_PushButton_Void_PushButtonRead+0x46>
    2436:	8b ad       	ldd	r24, Y+59	; 0x3b
    2438:	9c ad       	ldd	r25, Y+60	; 0x3c
    243a:	81 30       	cpi	r24, 0x01	; 1
    243c:	91 05       	cpc	r25, r1
    243e:	71 f0       	breq	.+28     	; 0x245c <H_PushButton_Void_PushButtonRead+0x60>
    2440:	27 c2       	rjmp	.+1102   	; 0x2890 <H_PushButton_Void_PushButtonRead+0x494>
    2442:	2b ad       	ldd	r18, Y+59	; 0x3b
    2444:	3c ad       	ldd	r19, Y+60	; 0x3c
    2446:	23 30       	cpi	r18, 0x03	; 3
    2448:	31 05       	cpc	r19, r1
    244a:	09 f4       	brne	.+2      	; 0x244e <H_PushButton_Void_PushButtonRead+0x52>
    244c:	15 c1       	rjmp	.+554    	; 0x2678 <H_PushButton_Void_PushButtonRead+0x27c>
    244e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2450:	9c ad       	ldd	r25, Y+60	; 0x3c
    2452:	84 30       	cpi	r24, 0x04	; 4
    2454:	91 05       	cpc	r25, r1
    2456:	09 f4       	brne	.+2      	; 0x245a <H_PushButton_Void_PushButtonRead+0x5e>
    2458:	96 c1       	rjmp	.+812    	; 0x2786 <H_PushButton_Void_PushButtonRead+0x38a>
    245a:	1a c2       	rjmp	.+1076   	; 0x2890 <H_PushButton_Void_PushButtonRead+0x494>
	{
	case PUSHBUTTON1:
		Local_u8_Reading = M_Dio_U8_PinRead(PUSHBUTTON1_PIN) ;
    245c:	8a e2       	ldi	r24, 0x2A	; 42
    245e:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    2462:	89 af       	std	Y+57, r24	; 0x39
		if(Local_u8_Reading == PRESSED)
    2464:	89 ad       	ldd	r24, Y+57	; 0x39
    2466:	88 23       	and	r24, r24
    2468:	09 f0       	breq	.+2      	; 0x246c <H_PushButton_Void_PushButtonRead+0x70>
    246a:	12 c2       	rjmp	.+1060   	; 0x2890 <H_PushButton_Void_PushButtonRead+0x494>
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	a8 ec       	ldi	r26, 0xC8	; 200
    2472:	b2 e4       	ldi	r27, 0x42	; 66
    2474:	8d ab       	std	Y+53, r24	; 0x35
    2476:	9e ab       	std	Y+54, r25	; 0x36
    2478:	af ab       	std	Y+55, r26	; 0x37
    247a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247c:	6d a9       	ldd	r22, Y+53	; 0x35
    247e:	7e a9       	ldd	r23, Y+54	; 0x36
    2480:	8f a9       	ldd	r24, Y+55	; 0x37
    2482:	98 ad       	ldd	r25, Y+56	; 0x38
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4a e7       	ldi	r20, 0x7A	; 122
    248a:	55 e4       	ldi	r21, 0x45	; 69
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	89 ab       	std	Y+49, r24	; 0x31
    2496:	9a ab       	std	Y+50, r25	; 0x32
    2498:	ab ab       	std	Y+51, r26	; 0x33
    249a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    249c:	69 a9       	ldd	r22, Y+49	; 0x31
    249e:	7a a9       	ldd	r23, Y+50	; 0x32
    24a0:	8b a9       	ldd	r24, Y+51	; 0x33
    24a2:	9c a9       	ldd	r25, Y+52	; 0x34
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e8       	ldi	r20, 0x80	; 128
    24aa:	5f e3       	ldi	r21, 0x3F	; 63
    24ac:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    24b0:	88 23       	and	r24, r24
    24b2:	2c f4       	brge	.+10     	; 0x24be <H_PushButton_Void_PushButtonRead+0xc2>
		__ticks = 1;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	98 ab       	std	Y+48, r25	; 0x30
    24ba:	8f a7       	std	Y+47, r24	; 0x2f
    24bc:	3f c0       	rjmp	.+126    	; 0x253c <H_PushButton_Void_PushButtonRead+0x140>
	else if (__tmp > 65535)
    24be:	69 a9       	ldd	r22, Y+49	; 0x31
    24c0:	7a a9       	ldd	r23, Y+50	; 0x32
    24c2:	8b a9       	ldd	r24, Y+51	; 0x33
    24c4:	9c a9       	ldd	r25, Y+52	; 0x34
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	3f ef       	ldi	r19, 0xFF	; 255
    24ca:	4f e7       	ldi	r20, 0x7F	; 127
    24cc:	57 e4       	ldi	r21, 0x47	; 71
    24ce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    24d2:	18 16       	cp	r1, r24
    24d4:	4c f5       	brge	.+82     	; 0x2528 <H_PushButton_Void_PushButtonRead+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d6:	6d a9       	ldd	r22, Y+53	; 0x35
    24d8:	7e a9       	ldd	r23, Y+54	; 0x36
    24da:	8f a9       	ldd	r24, Y+55	; 0x37
    24dc:	98 ad       	ldd	r25, Y+56	; 0x38
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e2       	ldi	r20, 0x20	; 32
    24e4:	51 e4       	ldi	r21, 0x41	; 65
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	98 ab       	std	Y+48, r25	; 0x30
    24fc:	8f a7       	std	Y+47, r24	; 0x2f
    24fe:	0f c0       	rjmp	.+30     	; 0x251e <H_PushButton_Void_PushButtonRead+0x122>
    2500:	80 e9       	ldi	r24, 0x90	; 144
    2502:	91 e0       	ldi	r25, 0x01	; 1
    2504:	9e a7       	std	Y+46, r25	; 0x2e
    2506:	8d a7       	std	Y+45, r24	; 0x2d
    2508:	8d a5       	ldd	r24, Y+45	; 0x2d
    250a:	9e a5       	ldd	r25, Y+46	; 0x2e
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <H_PushButton_Void_PushButtonRead+0x110>
    2510:	9e a7       	std	Y+46, r25	; 0x2e
    2512:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2514:	8f a5       	ldd	r24, Y+47	; 0x2f
    2516:	98 a9       	ldd	r25, Y+48	; 0x30
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	98 ab       	std	Y+48, r25	; 0x30
    251c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2520:	98 a9       	ldd	r25, Y+48	; 0x30
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	69 f7       	brne	.-38     	; 0x2500 <H_PushButton_Void_PushButtonRead+0x104>
    2526:	14 c0       	rjmp	.+40     	; 0x2550 <H_PushButton_Void_PushButtonRead+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2528:	69 a9       	ldd	r22, Y+49	; 0x31
    252a:	7a a9       	ldd	r23, Y+50	; 0x32
    252c:	8b a9       	ldd	r24, Y+51	; 0x33
    252e:	9c a9       	ldd	r25, Y+52	; 0x34
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	98 ab       	std	Y+48, r25	; 0x30
    253a:	8f a7       	std	Y+47, r24	; 0x2f
    253c:	8f a5       	ldd	r24, Y+47	; 0x2f
    253e:	98 a9       	ldd	r25, Y+48	; 0x30
    2540:	9c a7       	std	Y+44, r25	; 0x2c
    2542:	8b a7       	std	Y+43, r24	; 0x2b
    2544:	8b a5       	ldd	r24, Y+43	; 0x2b
    2546:	9c a5       	ldd	r25, Y+44	; 0x2c
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <H_PushButton_Void_PushButtonRead+0x14c>
    254c:	9c a7       	std	Y+44, r25	; 0x2c
    254e:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_U8_PinRead(PUSHBUTTON1_PIN) == PRESSED)
    2550:	8a e2       	ldi	r24, 0x2A	; 42
    2552:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    2556:	88 23       	and	r24, r24
    2558:	09 f0       	breq	.+2      	; 0x255c <H_PushButton_Void_PushButtonRead+0x160>
    255a:	9a c1       	rjmp	.+820    	; 0x2890 <H_PushButton_Void_PushButtonRead+0x494>
			{
				while(M_Dio_U8_PinRead(PUSHBUTTON1_PIN) == PRESSED);
    255c:	8a e2       	ldi	r24, 0x2A	; 42
    255e:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    2562:	88 23       	and	r24, r24
    2564:	d9 f3       	breq	.-10     	; 0x255c <H_PushButton_Void_PushButtonRead+0x160>
				Local_u8_Reading = PRESSED;
    2566:	19 ae       	std	Y+57, r1	; 0x39
    2568:	93 c1       	rjmp	.+806    	; 0x2890 <H_PushButton_Void_PushButtonRead+0x494>
			}
		}
		break;
	case PUSHBUTTON2:
		Local_u8_Reading = M_Dio_U8_PinRead(PUSHBUTTON2_PIN) ;
    256a:	8b e2       	ldi	r24, 0x2B	; 43
    256c:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    2570:	89 af       	std	Y+57, r24	; 0x39
		if(Local_u8_Reading == PRESSED)
    2572:	89 ad       	ldd	r24, Y+57	; 0x39
    2574:	88 23       	and	r24, r24
    2576:	09 f0       	breq	.+2      	; 0x257a <H_PushButton_Void_PushButtonRead+0x17e>
    2578:	8b c1       	rjmp	.+790    	; 0x2890 <H_PushButton_Void_PushButtonRead+0x494>
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	a8 ec       	ldi	r26, 0xC8	; 200
    2580:	b2 e4       	ldi	r27, 0x42	; 66
    2582:	8f a3       	std	Y+39, r24	; 0x27
    2584:	98 a7       	std	Y+40, r25	; 0x28
    2586:	a9 a7       	std	Y+41, r26	; 0x29
    2588:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258a:	6f a1       	ldd	r22, Y+39	; 0x27
    258c:	78 a5       	ldd	r23, Y+40	; 0x28
    258e:	89 a5       	ldd	r24, Y+41	; 0x29
    2590:	9a a5       	ldd	r25, Y+42	; 0x2a
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	4a e7       	ldi	r20, 0x7A	; 122
    2598:	55 e4       	ldi	r21, 0x45	; 69
    259a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	8b a3       	std	Y+35, r24	; 0x23
    25a4:	9c a3       	std	Y+36, r25	; 0x24
    25a6:	ad a3       	std	Y+37, r26	; 0x25
    25a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25aa:	6b a1       	ldd	r22, Y+35	; 0x23
    25ac:	7c a1       	ldd	r23, Y+36	; 0x24
    25ae:	8d a1       	ldd	r24, Y+37	; 0x25
    25b0:	9e a1       	ldd	r25, Y+38	; 0x26
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e8       	ldi	r20, 0x80	; 128
    25b8:	5f e3       	ldi	r21, 0x3F	; 63
    25ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    25be:	88 23       	and	r24, r24
    25c0:	2c f4       	brge	.+10     	; 0x25cc <H_PushButton_Void_PushButtonRead+0x1d0>
		__ticks = 1;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9a a3       	std	Y+34, r25	; 0x22
    25c8:	89 a3       	std	Y+33, r24	; 0x21
    25ca:	3f c0       	rjmp	.+126    	; 0x264a <H_PushButton_Void_PushButtonRead+0x24e>
	else if (__tmp > 65535)
    25cc:	6b a1       	ldd	r22, Y+35	; 0x23
    25ce:	7c a1       	ldd	r23, Y+36	; 0x24
    25d0:	8d a1       	ldd	r24, Y+37	; 0x25
    25d2:	9e a1       	ldd	r25, Y+38	; 0x26
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	3f ef       	ldi	r19, 0xFF	; 255
    25d8:	4f e7       	ldi	r20, 0x7F	; 127
    25da:	57 e4       	ldi	r21, 0x47	; 71
    25dc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    25e0:	18 16       	cp	r1, r24
    25e2:	4c f5       	brge	.+82     	; 0x2636 <H_PushButton_Void_PushButtonRead+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e4:	6f a1       	ldd	r22, Y+39	; 0x27
    25e6:	78 a5       	ldd	r23, Y+40	; 0x28
    25e8:	89 a5       	ldd	r24, Y+41	; 0x29
    25ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e2       	ldi	r20, 0x20	; 32
    25f2:	51 e4       	ldi	r21, 0x41	; 65
    25f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9a a3       	std	Y+34, r25	; 0x22
    260a:	89 a3       	std	Y+33, r24	; 0x21
    260c:	0f c0       	rjmp	.+30     	; 0x262c <H_PushButton_Void_PushButtonRead+0x230>
    260e:	80 e9       	ldi	r24, 0x90	; 144
    2610:	91 e0       	ldi	r25, 0x01	; 1
    2612:	98 a3       	std	Y+32, r25	; 0x20
    2614:	8f 8f       	std	Y+31, r24	; 0x1f
    2616:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2618:	98 a1       	ldd	r25, Y+32	; 0x20
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	f1 f7       	brne	.-4      	; 0x261a <H_PushButton_Void_PushButtonRead+0x21e>
    261e:	98 a3       	std	Y+32, r25	; 0x20
    2620:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2622:	89 a1       	ldd	r24, Y+33	; 0x21
    2624:	9a a1       	ldd	r25, Y+34	; 0x22
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	9a a3       	std	Y+34, r25	; 0x22
    262a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262c:	89 a1       	ldd	r24, Y+33	; 0x21
    262e:	9a a1       	ldd	r25, Y+34	; 0x22
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	69 f7       	brne	.-38     	; 0x260e <H_PushButton_Void_PushButtonRead+0x212>
    2634:	14 c0       	rjmp	.+40     	; 0x265e <H_PushButton_Void_PushButtonRead+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2636:	6b a1       	ldd	r22, Y+35	; 0x23
    2638:	7c a1       	ldd	r23, Y+36	; 0x24
    263a:	8d a1       	ldd	r24, Y+37	; 0x25
    263c:	9e a1       	ldd	r25, Y+38	; 0x26
    263e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	9a a3       	std	Y+34, r25	; 0x22
    2648:	89 a3       	std	Y+33, r24	; 0x21
    264a:	89 a1       	ldd	r24, Y+33	; 0x21
    264c:	9a a1       	ldd	r25, Y+34	; 0x22
    264e:	9e 8f       	std	Y+30, r25	; 0x1e
    2650:	8d 8f       	std	Y+29, r24	; 0x1d
    2652:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2654:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <H_PushButton_Void_PushButtonRead+0x25a>
    265a:	9e 8f       	std	Y+30, r25	; 0x1e
    265c:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_U8_PinRead(PUSHBUTTON2_PIN) == PRESSED)
    265e:	8b e2       	ldi	r24, 0x2B	; 43
    2660:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    2664:	88 23       	and	r24, r24
    2666:	09 f0       	breq	.+2      	; 0x266a <H_PushButton_Void_PushButtonRead+0x26e>
    2668:	13 c1       	rjmp	.+550    	; 0x2890 <H_PushButton_Void_PushButtonRead+0x494>
			{
				while(M_Dio_U8_PinRead(PUSHBUTTON2_PIN) == PRESSED);
    266a:	8b e2       	ldi	r24, 0x2B	; 43
    266c:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    2670:	88 23       	and	r24, r24
    2672:	d9 f3       	breq	.-10     	; 0x266a <H_PushButton_Void_PushButtonRead+0x26e>
				Local_u8_Reading = PRESSED;
    2674:	19 ae       	std	Y+57, r1	; 0x39
    2676:	0c c1       	rjmp	.+536    	; 0x2890 <H_PushButton_Void_PushButtonRead+0x494>
			}
		}
		break;
	case PUSHBUTTON3:
		Local_u8_Reading = M_Dio_U8_PinRead(PUSHBUTTON3_PIN) ;
    2678:	8c e2       	ldi	r24, 0x2C	; 44
    267a:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    267e:	89 af       	std	Y+57, r24	; 0x39
		if(Local_u8_Reading == PRESSED)
    2680:	89 ad       	ldd	r24, Y+57	; 0x39
    2682:	88 23       	and	r24, r24
    2684:	09 f0       	breq	.+2      	; 0x2688 <H_PushButton_Void_PushButtonRead+0x28c>
    2686:	04 c1       	rjmp	.+520    	; 0x2890 <H_PushButton_Void_PushButtonRead+0x494>
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	a8 ec       	ldi	r26, 0xC8	; 200
    268e:	b2 e4       	ldi	r27, 0x42	; 66
    2690:	89 8f       	std	Y+25, r24	; 0x19
    2692:	9a 8f       	std	Y+26, r25	; 0x1a
    2694:	ab 8f       	std	Y+27, r26	; 0x1b
    2696:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2698:	69 8d       	ldd	r22, Y+25	; 0x19
    269a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    269c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	4a e7       	ldi	r20, 0x7A	; 122
    26a6:	55 e4       	ldi	r21, 0x45	; 69
    26a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	8d 8b       	std	Y+21, r24	; 0x15
    26b2:	9e 8b       	std	Y+22, r25	; 0x16
    26b4:	af 8b       	std	Y+23, r26	; 0x17
    26b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26b8:	6d 89       	ldd	r22, Y+21	; 0x15
    26ba:	7e 89       	ldd	r23, Y+22	; 0x16
    26bc:	8f 89       	ldd	r24, Y+23	; 0x17
    26be:	98 8d       	ldd	r25, Y+24	; 0x18
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e8       	ldi	r20, 0x80	; 128
    26c6:	5f e3       	ldi	r21, 0x3F	; 63
    26c8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    26cc:	88 23       	and	r24, r24
    26ce:	2c f4       	brge	.+10     	; 0x26da <H_PushButton_Void_PushButtonRead+0x2de>
		__ticks = 1;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	9c 8b       	std	Y+20, r25	; 0x14
    26d6:	8b 8b       	std	Y+19, r24	; 0x13
    26d8:	3f c0       	rjmp	.+126    	; 0x2758 <H_PushButton_Void_PushButtonRead+0x35c>
	else if (__tmp > 65535)
    26da:	6d 89       	ldd	r22, Y+21	; 0x15
    26dc:	7e 89       	ldd	r23, Y+22	; 0x16
    26de:	8f 89       	ldd	r24, Y+23	; 0x17
    26e0:	98 8d       	ldd	r25, Y+24	; 0x18
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	3f ef       	ldi	r19, 0xFF	; 255
    26e6:	4f e7       	ldi	r20, 0x7F	; 127
    26e8:	57 e4       	ldi	r21, 0x47	; 71
    26ea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    26ee:	18 16       	cp	r1, r24
    26f0:	4c f5       	brge	.+82     	; 0x2744 <H_PushButton_Void_PushButtonRead+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f2:	69 8d       	ldd	r22, Y+25	; 0x19
    26f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e2       	ldi	r20, 0x20	; 32
    2700:	51 e4       	ldi	r21, 0x41	; 65
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	bc 01       	movw	r22, r24
    270c:	cd 01       	movw	r24, r26
    270e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	9c 8b       	std	Y+20, r25	; 0x14
    2718:	8b 8b       	std	Y+19, r24	; 0x13
    271a:	0f c0       	rjmp	.+30     	; 0x273a <H_PushButton_Void_PushButtonRead+0x33e>
    271c:	80 e9       	ldi	r24, 0x90	; 144
    271e:	91 e0       	ldi	r25, 0x01	; 1
    2720:	9a 8b       	std	Y+18, r25	; 0x12
    2722:	89 8b       	std	Y+17, r24	; 0x11
    2724:	89 89       	ldd	r24, Y+17	; 0x11
    2726:	9a 89       	ldd	r25, Y+18	; 0x12
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <H_PushButton_Void_PushButtonRead+0x32c>
    272c:	9a 8b       	std	Y+18, r25	; 0x12
    272e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2730:	8b 89       	ldd	r24, Y+19	; 0x13
    2732:	9c 89       	ldd	r25, Y+20	; 0x14
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	9c 8b       	std	Y+20, r25	; 0x14
    2738:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273a:	8b 89       	ldd	r24, Y+19	; 0x13
    273c:	9c 89       	ldd	r25, Y+20	; 0x14
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	69 f7       	brne	.-38     	; 0x271c <H_PushButton_Void_PushButtonRead+0x320>
    2742:	14 c0       	rjmp	.+40     	; 0x276c <H_PushButton_Void_PushButtonRead+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2744:	6d 89       	ldd	r22, Y+21	; 0x15
    2746:	7e 89       	ldd	r23, Y+22	; 0x16
    2748:	8f 89       	ldd	r24, Y+23	; 0x17
    274a:	98 8d       	ldd	r25, Y+24	; 0x18
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9c 8b       	std	Y+20, r25	; 0x14
    2756:	8b 8b       	std	Y+19, r24	; 0x13
    2758:	8b 89       	ldd	r24, Y+19	; 0x13
    275a:	9c 89       	ldd	r25, Y+20	; 0x14
    275c:	98 8b       	std	Y+16, r25	; 0x10
    275e:	8f 87       	std	Y+15, r24	; 0x0f
    2760:	8f 85       	ldd	r24, Y+15	; 0x0f
    2762:	98 89       	ldd	r25, Y+16	; 0x10
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <H_PushButton_Void_PushButtonRead+0x368>
    2768:	98 8b       	std	Y+16, r25	; 0x10
    276a:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_U8_PinRead(PUSHBUTTON3_PIN) == PRESSED)
    276c:	8c e2       	ldi	r24, 0x2C	; 44
    276e:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    2772:	88 23       	and	r24, r24
    2774:	09 f0       	breq	.+2      	; 0x2778 <H_PushButton_Void_PushButtonRead+0x37c>
    2776:	8c c0       	rjmp	.+280    	; 0x2890 <H_PushButton_Void_PushButtonRead+0x494>
			{
				while(M_Dio_U8_PinRead(PUSHBUTTON3_PIN) == PRESSED);
    2778:	8c e2       	ldi	r24, 0x2C	; 44
    277a:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    277e:	88 23       	and	r24, r24
    2780:	d9 f3       	breq	.-10     	; 0x2778 <H_PushButton_Void_PushButtonRead+0x37c>
				Local_u8_Reading = PRESSED;
    2782:	19 ae       	std	Y+57, r1	; 0x39
    2784:	85 c0       	rjmp	.+266    	; 0x2890 <H_PushButton_Void_PushButtonRead+0x494>
			}
		}
		break;
	case PUSHBUTTON4:
		Local_u8_Reading = M_Dio_U8_PinRead(PUSHBUTTON4_PIN) ;
    2786:	8d e2       	ldi	r24, 0x2D	; 45
    2788:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    278c:	89 af       	std	Y+57, r24	; 0x39
		if(Local_u8_Reading == PRESSED)
    278e:	89 ad       	ldd	r24, Y+57	; 0x39
    2790:	88 23       	and	r24, r24
    2792:	09 f0       	breq	.+2      	; 0x2796 <H_PushButton_Void_PushButtonRead+0x39a>
    2794:	7d c0       	rjmp	.+250    	; 0x2890 <H_PushButton_Void_PushButtonRead+0x494>
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	a8 ec       	ldi	r26, 0xC8	; 200
    279c:	b2 e4       	ldi	r27, 0x42	; 66
    279e:	8b 87       	std	Y+11, r24	; 0x0b
    27a0:	9c 87       	std	Y+12, r25	; 0x0c
    27a2:	ad 87       	std	Y+13, r26	; 0x0d
    27a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	4a e7       	ldi	r20, 0x7A	; 122
    27b4:	55 e4       	ldi	r21, 0x45	; 69
    27b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	8f 83       	std	Y+7, r24	; 0x07
    27c0:	98 87       	std	Y+8, r25	; 0x08
    27c2:	a9 87       	std	Y+9, r26	; 0x09
    27c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27c6:	6f 81       	ldd	r22, Y+7	; 0x07
    27c8:	78 85       	ldd	r23, Y+8	; 0x08
    27ca:	89 85       	ldd	r24, Y+9	; 0x09
    27cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e8       	ldi	r20, 0x80	; 128
    27d4:	5f e3       	ldi	r21, 0x3F	; 63
    27d6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    27da:	88 23       	and	r24, r24
    27dc:	2c f4       	brge	.+10     	; 0x27e8 <H_PushButton_Void_PushButtonRead+0x3ec>
		__ticks = 1;
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
    27e6:	3f c0       	rjmp	.+126    	; 0x2866 <H_PushButton_Void_PushButtonRead+0x46a>
	else if (__tmp > 65535)
    27e8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ea:	78 85       	ldd	r23, Y+8	; 0x08
    27ec:	89 85       	ldd	r24, Y+9	; 0x09
    27ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	3f ef       	ldi	r19, 0xFF	; 255
    27f4:	4f e7       	ldi	r20, 0x7F	; 127
    27f6:	57 e4       	ldi	r21, 0x47	; 71
    27f8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    27fc:	18 16       	cp	r1, r24
    27fe:	4c f5       	brge	.+82     	; 0x2852 <H_PushButton_Void_PushButtonRead+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2800:	6b 85       	ldd	r22, Y+11	; 0x0b
    2802:	7c 85       	ldd	r23, Y+12	; 0x0c
    2804:	8d 85       	ldd	r24, Y+13	; 0x0d
    2806:	9e 85       	ldd	r25, Y+14	; 0x0e
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e2       	ldi	r20, 0x20	; 32
    280e:	51 e4       	ldi	r21, 0x41	; 65
    2810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	0f c0       	rjmp	.+30     	; 0x2848 <H_PushButton_Void_PushButtonRead+0x44c>
    282a:	80 e9       	ldi	r24, 0x90	; 144
    282c:	91 e0       	ldi	r25, 0x01	; 1
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	8b 83       	std	Y+3, r24	; 0x03
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	9c 81       	ldd	r25, Y+4	; 0x04
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	f1 f7       	brne	.-4      	; 0x2836 <H_PushButton_Void_PushButtonRead+0x43a>
    283a:	9c 83       	std	Y+4, r25	; 0x04
    283c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	9e 81       	ldd	r25, Y+6	; 0x06
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2848:	8d 81       	ldd	r24, Y+5	; 0x05
    284a:	9e 81       	ldd	r25, Y+6	; 0x06
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	69 f7       	brne	.-38     	; 0x282a <H_PushButton_Void_PushButtonRead+0x42e>
    2850:	14 c0       	rjmp	.+40     	; 0x287a <H_PushButton_Void_PushButtonRead+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2852:	6f 81       	ldd	r22, Y+7	; 0x07
    2854:	78 85       	ldd	r23, Y+8	; 0x08
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	9e 83       	std	Y+6, r25	; 0x06
    2864:	8d 83       	std	Y+5, r24	; 0x05
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	9e 81       	ldd	r25, Y+6	; 0x06
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <H_PushButton_Void_PushButtonRead+0x476>
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_U8_PinRead(PUSHBUTTON4_PIN) == PRESSED)
    287a:	8d e2       	ldi	r24, 0x2D	; 45
    287c:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    2880:	88 23       	and	r24, r24
    2882:	31 f4       	brne	.+12     	; 0x2890 <H_PushButton_Void_PushButtonRead+0x494>
			{
				while(M_Dio_U8_PinRead(PUSHBUTTON4_PIN) == PRESSED);
    2884:	8d e2       	ldi	r24, 0x2D	; 45
    2886:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    288a:	88 23       	and	r24, r24
    288c:	d9 f3       	breq	.-10     	; 0x2884 <H_PushButton_Void_PushButtonRead+0x488>
				Local_u8_Reading = PRESSED;
    288e:	19 ae       	std	Y+57, r1	; 0x39
			}
		}
		break;
	default:												break;
	}
	return Local_u8_Reading;
    2890:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2892:	ec 96       	adiw	r28, 0x3c	; 60
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	cf 91       	pop	r28
    28a0:	df 91       	pop	r29
    28a2:	08 95       	ret

000028a4 <H_Led_Void_LedInit>:

#include"Led.h"


void H_Led_Void_LedInit(u8 Local_Led_Pin)
{
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <H_Led_Void_LedInit+0x6>
    28aa:	0f 92       	push	r0
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_Led_Pin)
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	3b 83       	std	Y+3, r19	; 0x03
    28ba:	2a 83       	std	Y+2, r18	; 0x02
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	9b 81       	ldd	r25, Y+3	; 0x03
    28c0:	82 30       	cpi	r24, 0x02	; 2
    28c2:	91 05       	cpc	r25, r1
    28c4:	79 f0       	breq	.+30     	; 0x28e4 <H_Led_Void_LedInit+0x40>
    28c6:	2a 81       	ldd	r18, Y+2	; 0x02
    28c8:	3b 81       	ldd	r19, Y+3	; 0x03
    28ca:	23 30       	cpi	r18, 0x03	; 3
    28cc:	31 05       	cpc	r19, r1
    28ce:	79 f0       	breq	.+30     	; 0x28ee <H_Led_Void_LedInit+0x4a>
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	9b 81       	ldd	r25, Y+3	; 0x03
    28d4:	81 30       	cpi	r24, 0x01	; 1
    28d6:	91 05       	cpc	r25, r1
    28d8:	71 f4       	brne	.+28     	; 0x28f6 <H_Led_Void_LedInit+0x52>
	{
	case BLU_LED:M_Dio_Void_PinMode(Blu_Led_Pin,OUTPUT);	break;
    28da:	80 e2       	ldi	r24, 0x20	; 32
    28dc:	61 e0       	ldi	r22, 0x01	; 1
    28de:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
    28e2:	09 c0       	rjmp	.+18     	; 0x28f6 <H_Led_Void_LedInit+0x52>
	case GRN_LED:M_Dio_Void_PinMode(Grn_Led_Pin,OUTPUT); 	break;
    28e4:	8f e1       	ldi	r24, 0x1F	; 31
    28e6:	61 e0       	ldi	r22, 0x01	; 1
    28e8:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
    28ec:	04 c0       	rjmp	.+8      	; 0x28f6 <H_Led_Void_LedInit+0x52>
	case RED_LED:M_Dio_Void_PinMode(Red_Led_Pin,OUTPUT);	break;
    28ee:	8e e1       	ldi	r24, 0x1E	; 30
    28f0:	61 e0       	ldi	r22, 0x01	; 1
    28f2:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	default:												break;
	}
}
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <H_Led_Void_LedOn>:

void H_Led_Void_LedOn(u8 Local_Led_Pin)
{
    2902:	df 93       	push	r29
    2904:	cf 93       	push	r28
    2906:	00 d0       	rcall	.+0      	; 0x2908 <H_Led_Void_LedOn+0x6>
    2908:	0f 92       	push	r0
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_Led_Pin)
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	3b 83       	std	Y+3, r19	; 0x03
    2918:	2a 83       	std	Y+2, r18	; 0x02
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	9b 81       	ldd	r25, Y+3	; 0x03
    291e:	82 30       	cpi	r24, 0x02	; 2
    2920:	91 05       	cpc	r25, r1
    2922:	79 f0       	breq	.+30     	; 0x2942 <H_Led_Void_LedOn+0x40>
    2924:	2a 81       	ldd	r18, Y+2	; 0x02
    2926:	3b 81       	ldd	r19, Y+3	; 0x03
    2928:	23 30       	cpi	r18, 0x03	; 3
    292a:	31 05       	cpc	r19, r1
    292c:	79 f0       	breq	.+30     	; 0x294c <H_Led_Void_LedOn+0x4a>
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	9b 81       	ldd	r25, Y+3	; 0x03
    2932:	81 30       	cpi	r24, 0x01	; 1
    2934:	91 05       	cpc	r25, r1
    2936:	71 f4       	brne	.+28     	; 0x2954 <H_Led_Void_LedOn+0x52>
	{
	case BLU_LED:M_Dio_Void_PinWrite(Blu_Led_Pin,HIGH);	break;
    2938:	80 e2       	ldi	r24, 0x20	; 32
    293a:	61 e0       	ldi	r22, 0x01	; 1
    293c:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    2940:	09 c0       	rjmp	.+18     	; 0x2954 <H_Led_Void_LedOn+0x52>
	case GRN_LED:M_Dio_Void_PinWrite(Grn_Led_Pin,HIGH);	break;
    2942:	8f e1       	ldi	r24, 0x1F	; 31
    2944:	61 e0       	ldi	r22, 0x01	; 1
    2946:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    294a:	04 c0       	rjmp	.+8      	; 0x2954 <H_Led_Void_LedOn+0x52>
	case RED_LED:M_Dio_Void_PinWrite(Red_Led_Pin,HIGH);	break;
    294c:	8e e1       	ldi	r24, 0x1E	; 30
    294e:	61 e0       	ldi	r22, 0x01	; 1
    2950:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
	default:											break;
	}
}
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <H_Led_Void_LedOff>:
void H_Led_Void_LedOff(u8 Local_Led_Pin)
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	00 d0       	rcall	.+0      	; 0x2966 <H_Led_Void_LedOff+0x6>
    2966:	0f 92       	push	r0
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_Led_Pin)
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	3b 83       	std	Y+3, r19	; 0x03
    2976:	2a 83       	std	Y+2, r18	; 0x02
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	9b 81       	ldd	r25, Y+3	; 0x03
    297c:	82 30       	cpi	r24, 0x02	; 2
    297e:	91 05       	cpc	r25, r1
    2980:	79 f0       	breq	.+30     	; 0x29a0 <H_Led_Void_LedOff+0x40>
    2982:	2a 81       	ldd	r18, Y+2	; 0x02
    2984:	3b 81       	ldd	r19, Y+3	; 0x03
    2986:	23 30       	cpi	r18, 0x03	; 3
    2988:	31 05       	cpc	r19, r1
    298a:	79 f0       	breq	.+30     	; 0x29aa <H_Led_Void_LedOff+0x4a>
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	9b 81       	ldd	r25, Y+3	; 0x03
    2990:	81 30       	cpi	r24, 0x01	; 1
    2992:	91 05       	cpc	r25, r1
    2994:	71 f4       	brne	.+28     	; 0x29b2 <H_Led_Void_LedOff+0x52>
	{
	case BLU_LED:M_Dio_Void_PinWrite(Blu_Led_Pin,LOW);	break;
    2996:	80 e2       	ldi	r24, 0x20	; 32
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    299e:	09 c0       	rjmp	.+18     	; 0x29b2 <H_Led_Void_LedOff+0x52>
	case GRN_LED:M_Dio_Void_PinWrite(Grn_Led_Pin,LOW); 	break;
    29a0:	8f e1       	ldi	r24, 0x1F	; 31
    29a2:	60 e0       	ldi	r22, 0x00	; 0
    29a4:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    29a8:	04 c0       	rjmp	.+8      	; 0x29b2 <H_Led_Void_LedOff+0x52>
	case RED_LED:M_Dio_Void_PinWrite(Red_Led_Pin,LOW);	break;
    29aa:	8e e1       	ldi	r24, 0x1E	; 30
    29ac:	60 e0       	ldi	r22, 0x00	; 0
    29ae:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
	default:											break;
	}
}
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	08 95       	ret

000029be <H_Led_Void_LedBlink>:

void H_Led_Void_LedBlink(u8 Local_Led_Pin)
{
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	6d 97       	sbiw	r28, 0x1d	; 29
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	8d 8f       	std	Y+29, r24	; 0x1d
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	aa ef       	ldi	r26, 0xFA	; 250
    29da:	b3 e4       	ldi	r27, 0x43	; 67
    29dc:	89 8f       	std	Y+25, r24	; 0x19
    29de:	9a 8f       	std	Y+26, r25	; 0x1a
    29e0:	ab 8f       	std	Y+27, r26	; 0x1b
    29e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e4:	69 8d       	ldd	r22, Y+25	; 0x19
    29e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	4a e7       	ldi	r20, 0x7A	; 122
    29f2:	55 e4       	ldi	r21, 0x45	; 69
    29f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	8d 8b       	std	Y+21, r24	; 0x15
    29fe:	9e 8b       	std	Y+22, r25	; 0x16
    2a00:	af 8b       	std	Y+23, r26	; 0x17
    2a02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a04:	6d 89       	ldd	r22, Y+21	; 0x15
    2a06:	7e 89       	ldd	r23, Y+22	; 0x16
    2a08:	8f 89       	ldd	r24, Y+23	; 0x17
    2a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e8       	ldi	r20, 0x80	; 128
    2a12:	5f e3       	ldi	r21, 0x3F	; 63
    2a14:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2a18:	88 23       	and	r24, r24
    2a1a:	2c f4       	brge	.+10     	; 0x2a26 <H_Led_Void_LedBlink+0x68>
		__ticks = 1;
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	9c 8b       	std	Y+20, r25	; 0x14
    2a22:	8b 8b       	std	Y+19, r24	; 0x13
    2a24:	3f c0       	rjmp	.+126    	; 0x2aa4 <H_Led_Void_LedBlink+0xe6>
	else if (__tmp > 65535)
    2a26:	6d 89       	ldd	r22, Y+21	; 0x15
    2a28:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	3f ef       	ldi	r19, 0xFF	; 255
    2a32:	4f e7       	ldi	r20, 0x7F	; 127
    2a34:	57 e4       	ldi	r21, 0x47	; 71
    2a36:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2a3a:	18 16       	cp	r1, r24
    2a3c:	4c f5       	brge	.+82     	; 0x2a90 <H_Led_Void_LedBlink+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e2       	ldi	r20, 0x20	; 32
    2a4c:	51 e4       	ldi	r21, 0x41	; 65
    2a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	bc 01       	movw	r22, r24
    2a58:	cd 01       	movw	r24, r26
    2a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	9c 8b       	std	Y+20, r25	; 0x14
    2a64:	8b 8b       	std	Y+19, r24	; 0x13
    2a66:	0f c0       	rjmp	.+30     	; 0x2a86 <H_Led_Void_LedBlink+0xc8>
    2a68:	80 e9       	ldi	r24, 0x90	; 144
    2a6a:	91 e0       	ldi	r25, 0x01	; 1
    2a6c:	9a 8b       	std	Y+18, r25	; 0x12
    2a6e:	89 8b       	std	Y+17, r24	; 0x11
    2a70:	89 89       	ldd	r24, Y+17	; 0x11
    2a72:	9a 89       	ldd	r25, Y+18	; 0x12
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <H_Led_Void_LedBlink+0xb6>
    2a78:	9a 8b       	std	Y+18, r25	; 0x12
    2a7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	9c 8b       	std	Y+20, r25	; 0x14
    2a84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a86:	8b 89       	ldd	r24, Y+19	; 0x13
    2a88:	9c 89       	ldd	r25, Y+20	; 0x14
    2a8a:	00 97       	sbiw	r24, 0x00	; 0
    2a8c:	69 f7       	brne	.-38     	; 0x2a68 <H_Led_Void_LedBlink+0xaa>
    2a8e:	14 c0       	rjmp	.+40     	; 0x2ab8 <H_Led_Void_LedBlink+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a90:	6d 89       	ldd	r22, Y+21	; 0x15
    2a92:	7e 89       	ldd	r23, Y+22	; 0x16
    2a94:	8f 89       	ldd	r24, Y+23	; 0x17
    2a96:	98 8d       	ldd	r25, Y+24	; 0x18
    2a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	9c 8b       	std	Y+20, r25	; 0x14
    2aa2:	8b 8b       	std	Y+19, r24	; 0x13
    2aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa6:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa8:	98 8b       	std	Y+16, r25	; 0x10
    2aaa:	8f 87       	std	Y+15, r24	; 0x0f
    2aac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aae:	98 89       	ldd	r25, Y+16	; 0x10
    2ab0:	01 97       	sbiw	r24, 0x01	; 1
    2ab2:	f1 f7       	brne	.-4      	; 0x2ab0 <H_Led_Void_LedBlink+0xf2>
    2ab4:	98 8b       	std	Y+16, r25	; 0x10
    2ab6:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(LED_DELAY_TIME);
		H_Led_Void_LedOn(Local_Led_Pin);
    2ab8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aba:	0e 94 81 14 	call	0x2902	; 0x2902 <H_Led_Void_LedOn>
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	aa ef       	ldi	r26, 0xFA	; 250
    2ac4:	b3 e4       	ldi	r27, 0x43	; 67
    2ac6:	8b 87       	std	Y+11, r24	; 0x0b
    2ac8:	9c 87       	std	Y+12, r25	; 0x0c
    2aca:	ad 87       	std	Y+13, r26	; 0x0d
    2acc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ace:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	4a e7       	ldi	r20, 0x7A	; 122
    2adc:	55 e4       	ldi	r21, 0x45	; 69
    2ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	8f 83       	std	Y+7, r24	; 0x07
    2ae8:	98 87       	std	Y+8, r25	; 0x08
    2aea:	a9 87       	std	Y+9, r26	; 0x09
    2aec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aee:	6f 81       	ldd	r22, Y+7	; 0x07
    2af0:	78 85       	ldd	r23, Y+8	; 0x08
    2af2:	89 85       	ldd	r24, Y+9	; 0x09
    2af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e8       	ldi	r20, 0x80	; 128
    2afc:	5f e3       	ldi	r21, 0x3F	; 63
    2afe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	2c f4       	brge	.+10     	; 0x2b10 <H_Led_Void_LedBlink+0x152>
		__ticks = 1;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9e 83       	std	Y+6, r25	; 0x06
    2b0c:	8d 83       	std	Y+5, r24	; 0x05
    2b0e:	3f c0       	rjmp	.+126    	; 0x2b8e <H_Led_Void_LedBlink+0x1d0>
	else if (__tmp > 65535)
    2b10:	6f 81       	ldd	r22, Y+7	; 0x07
    2b12:	78 85       	ldd	r23, Y+8	; 0x08
    2b14:	89 85       	ldd	r24, Y+9	; 0x09
    2b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	3f ef       	ldi	r19, 0xFF	; 255
    2b1c:	4f e7       	ldi	r20, 0x7F	; 127
    2b1e:	57 e4       	ldi	r21, 0x47	; 71
    2b20:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b24:	18 16       	cp	r1, r24
    2b26:	4c f5       	brge	.+82     	; 0x2b7a <H_Led_Void_LedBlink+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e2       	ldi	r20, 0x20	; 32
    2b36:	51 e4       	ldi	r21, 0x41	; 65
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	bc 01       	movw	r22, r24
    2b42:	cd 01       	movw	r24, r26
    2b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	9e 83       	std	Y+6, r25	; 0x06
    2b4e:	8d 83       	std	Y+5, r24	; 0x05
    2b50:	0f c0       	rjmp	.+30     	; 0x2b70 <H_Led_Void_LedBlink+0x1b2>
    2b52:	80 e9       	ldi	r24, 0x90	; 144
    2b54:	91 e0       	ldi	r25, 0x01	; 1
    2b56:	9c 83       	std	Y+4, r25	; 0x04
    2b58:	8b 83       	std	Y+3, r24	; 0x03
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <H_Led_Void_LedBlink+0x1a0>
    2b62:	9c 83       	std	Y+4, r25	; 0x04
    2b64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b66:	8d 81       	ldd	r24, Y+5	; 0x05
    2b68:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	9e 83       	std	Y+6, r25	; 0x06
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b70:	8d 81       	ldd	r24, Y+5	; 0x05
    2b72:	9e 81       	ldd	r25, Y+6	; 0x06
    2b74:	00 97       	sbiw	r24, 0x00	; 0
    2b76:	69 f7       	brne	.-38     	; 0x2b52 <H_Led_Void_LedBlink+0x194>
    2b78:	14 c0       	rjmp	.+40     	; 0x2ba2 <H_Led_Void_LedBlink+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b7c:	78 85       	ldd	r23, Y+8	; 0x08
    2b7e:	89 85       	ldd	r24, Y+9	; 0x09
    2b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9e 83       	std	Y+6, r25	; 0x06
    2b8c:	8d 83       	std	Y+5, r24	; 0x05
    2b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b90:	9e 81       	ldd	r25, Y+6	; 0x06
    2b92:	9a 83       	std	Y+2, r25	; 0x02
    2b94:	89 83       	std	Y+1, r24	; 0x01
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	f1 f7       	brne	.-4      	; 0x2b9a <H_Led_Void_LedBlink+0x1dc>
    2b9e:	9a 83       	std	Y+2, r25	; 0x02
    2ba0:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(LED_DELAY_TIME);
		H_Led_Void_LedOff(Local_Led_Pin);
    2ba2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ba4:	0e 94 b0 14 	call	0x2960	; 0x2960 <H_Led_Void_LedOff>
}
    2ba8:	6d 96       	adiw	r28, 0x1d	; 29
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	cd bf       	out	0x3d, r28	; 61
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	08 95       	ret

00002bba <H_Led_Void_LedTog>:


void H_Led_Void_LedTog(u8 Local_Led_Pin)
{
    2bba:	df 93       	push	r29
    2bbc:	cf 93       	push	r28
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <H_Led_Void_LedTog+0x6>
    2bc0:	0f 92       	push	r0
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_Led_Pin)
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	28 2f       	mov	r18, r24
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	3b 83       	std	Y+3, r19	; 0x03
    2bd0:	2a 83       	std	Y+2, r18	; 0x02
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd6:	82 30       	cpi	r24, 0x02	; 2
    2bd8:	91 05       	cpc	r25, r1
    2bda:	91 f0       	breq	.+36     	; 0x2c00 <H_Led_Void_LedTog+0x46>
    2bdc:	2a 81       	ldd	r18, Y+2	; 0x02
    2bde:	3b 81       	ldd	r19, Y+3	; 0x03
    2be0:	23 30       	cpi	r18, 0x03	; 3
    2be2:	31 05       	cpc	r19, r1
    2be4:	49 f0       	breq	.+18     	; 0x2bf8 <H_Led_Void_LedTog+0x3e>
    2be6:	8a 81       	ldd	r24, Y+2	; 0x02
    2be8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bea:	81 30       	cpi	r24, 0x01	; 1
    2bec:	91 05       	cpc	r25, r1
    2bee:	59 f4       	brne	.+22     	; 0x2c06 <H_Led_Void_LedTog+0x4c>
	{
	case BLU_LED:M_Dio_Void_PinTog(Blu_Led_Pin);	break;
    2bf0:	80 e2       	ldi	r24, 0x20	; 32
    2bf2:	0e 94 33 0a 	call	0x1466	; 0x1466 <M_Dio_Void_PinTog>
    2bf6:	07 c0       	rjmp	.+14     	; 0x2c06 <H_Led_Void_LedTog+0x4c>
	case RED_LED:M_Dio_Void_PinTog(Red_Led_Pin);	break;
    2bf8:	8e e1       	ldi	r24, 0x1E	; 30
    2bfa:	0e 94 33 0a 	call	0x1466	; 0x1466 <M_Dio_Void_PinTog>
    2bfe:	03 c0       	rjmp	.+6      	; 0x2c06 <H_Led_Void_LedTog+0x4c>
	case GRN_LED:M_Dio_Void_PinTog(Grn_Led_Pin);	break;
    2c00:	8f e1       	ldi	r24, 0x1F	; 31
    2c02:	0e 94 33 0a 	call	0x1466	; 0x1466 <M_Dio_Void_PinTog>
	default:										break;
	}
}
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <H_LCD_Void_LCDInit>:

#include"LCD.h"


void H_LCD_Void_LCDInit(void)
{
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	6c 97       	sbiw	r28, 0x1c	; 28
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(1000);
	H_LCD_Void_LCDWriteCommand(_8_BIT_MODE_COMMAND);

#elif LCD_MODE == _4_BIT_MODE

	M_Dio_Void_PinMode(LCD_DATA4_PIN,OUTPUT);
    2c26:	8d e0       	ldi	r24, 0x0D	; 13
    2c28:	61 e0       	ldi	r22, 0x01	; 1
    2c2a:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_DATA5_PIN,OUTPUT);
    2c2e:	8e e0       	ldi	r24, 0x0E	; 14
    2c30:	61 e0       	ldi	r22, 0x01	; 1
    2c32:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_DATA6_PIN,OUTPUT);
    2c36:	8f e0       	ldi	r24, 0x0F	; 15
    2c38:	61 e0       	ldi	r22, 0x01	; 1
    2c3a:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_DATA7_PIN,OUTPUT);
    2c3e:	80 e1       	ldi	r24, 0x10	; 16
    2c40:	61 e0       	ldi	r22, 0x01	; 1
    2c42:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_EN_PIN,OUTPUT);
    2c46:	8c e0       	ldi	r24, 0x0C	; 12
    2c48:	61 e0       	ldi	r22, 0x01	; 1
    2c4a:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_RS_PIN,OUTPUT);
    2c4e:	8b e0       	ldi	r24, 0x0B	; 11
    2c50:	61 e0       	ldi	r22, 0x01	; 1
    2c52:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	aa e7       	ldi	r26, 0x7A	; 122
    2c5c:	b4 e4       	ldi	r27, 0x44	; 68
    2c5e:	89 8f       	std	Y+25, r24	; 0x19
    2c60:	9a 8f       	std	Y+26, r25	; 0x1a
    2c62:	ab 8f       	std	Y+27, r26	; 0x1b
    2c64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c66:	69 8d       	ldd	r22, Y+25	; 0x19
    2c68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	4a e7       	ldi	r20, 0x7A	; 122
    2c74:	55 e4       	ldi	r21, 0x45	; 69
    2c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	8d 8b       	std	Y+21, r24	; 0x15
    2c80:	9e 8b       	std	Y+22, r25	; 0x16
    2c82:	af 8b       	std	Y+23, r26	; 0x17
    2c84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c86:	6d 89       	ldd	r22, Y+21	; 0x15
    2c88:	7e 89       	ldd	r23, Y+22	; 0x16
    2c8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	40 e8       	ldi	r20, 0x80	; 128
    2c94:	5f e3       	ldi	r21, 0x3F	; 63
    2c96:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c9a:	88 23       	and	r24, r24
    2c9c:	2c f4       	brge	.+10     	; 0x2ca8 <H_LCD_Void_LCDInit+0x96>
		__ticks = 1;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	9c 8b       	std	Y+20, r25	; 0x14
    2ca4:	8b 8b       	std	Y+19, r24	; 0x13
    2ca6:	3f c0       	rjmp	.+126    	; 0x2d26 <H_LCD_Void_LCDInit+0x114>
	else if (__tmp > 65535)
    2ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    2caa:	7e 89       	ldd	r23, Y+22	; 0x16
    2cac:	8f 89       	ldd	r24, Y+23	; 0x17
    2cae:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	3f ef       	ldi	r19, 0xFF	; 255
    2cb4:	4f e7       	ldi	r20, 0x7F	; 127
    2cb6:	57 e4       	ldi	r21, 0x47	; 71
    2cb8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2cbc:	18 16       	cp	r1, r24
    2cbe:	4c f5       	brge	.+82     	; 0x2d12 <H_LCD_Void_LCDInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc0:	69 8d       	ldd	r22, Y+25	; 0x19
    2cc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	40 e2       	ldi	r20, 0x20	; 32
    2cce:	51 e4       	ldi	r21, 0x41	; 65
    2cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	9c 8b       	std	Y+20, r25	; 0x14
    2ce6:	8b 8b       	std	Y+19, r24	; 0x13
    2ce8:	0f c0       	rjmp	.+30     	; 0x2d08 <H_LCD_Void_LCDInit+0xf6>
    2cea:	80 e9       	ldi	r24, 0x90	; 144
    2cec:	91 e0       	ldi	r25, 0x01	; 1
    2cee:	9a 8b       	std	Y+18, r25	; 0x12
    2cf0:	89 8b       	std	Y+17, r24	; 0x11
    2cf2:	89 89       	ldd	r24, Y+17	; 0x11
    2cf4:	9a 89       	ldd	r25, Y+18	; 0x12
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <H_LCD_Void_LCDInit+0xe4>
    2cfa:	9a 8b       	std	Y+18, r25	; 0x12
    2cfc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2d00:	9c 89       	ldd	r25, Y+20	; 0x14
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	9c 8b       	std	Y+20, r25	; 0x14
    2d06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d08:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	69 f7       	brne	.-38     	; 0x2cea <H_LCD_Void_LCDInit+0xd8>
    2d10:	14 c0       	rjmp	.+40     	; 0x2d3a <H_LCD_Void_LCDInit+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d12:	6d 89       	ldd	r22, Y+21	; 0x15
    2d14:	7e 89       	ldd	r23, Y+22	; 0x16
    2d16:	8f 89       	ldd	r24, Y+23	; 0x17
    2d18:	98 8d       	ldd	r25, Y+24	; 0x18
    2d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	9c 8b       	std	Y+20, r25	; 0x14
    2d24:	8b 8b       	std	Y+19, r24	; 0x13
    2d26:	8b 89       	ldd	r24, Y+19	; 0x13
    2d28:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2a:	98 8b       	std	Y+16, r25	; 0x10
    2d2c:	8f 87       	std	Y+15, r24	; 0x0f
    2d2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d30:	98 89       	ldd	r25, Y+16	; 0x10
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <H_LCD_Void_LCDInit+0x120>
    2d36:	98 8b       	std	Y+16, r25	; 0x10
    2d38:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	H_LCD_Void_LCDWriteCommand(_4_BIT_MODE_COMMAND_1);
    2d3a:	83 e3       	ldi	r24, 0x33	; 51
    2d3c:	0e 94 39 19 	call	0x3272	; 0x3272 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_BIT_MODE_COMMAND_2);
    2d40:	82 e3       	ldi	r24, 0x32	; 50
    2d42:	0e 94 39 19 	call	0x3272	; 0x3272 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_BIT_MODE_COMMAND_3);
    2d46:	88 e2       	ldi	r24, 0x28	; 40
    2d48:	0e 94 39 19 	call	0x3272	; 0x3272 <H_LCD_Void_LCDWriteCommand>
#endif
	H_LCD_Void_LCDWriteCommand(DISPLAY_ON_CURSOR_OFF);
    2d4c:	8c e0       	ldi	r24, 0x0C	; 12
    2d4e:	0e 94 39 19 	call	0x3272	; 0x3272 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
    2d52:	82 e0       	ldi	r24, 0x02	; 2
    2d54:	0e 94 39 19 	call	0x3272	; 0x3272 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR_SCREEN);
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	0e 94 39 19 	call	0x3272	; 0x3272 <H_LCD_Void_LCDWriteCommand>
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	a0 ea       	ldi	r26, 0xA0	; 160
    2d64:	b0 e4       	ldi	r27, 0x40	; 64
    2d66:	8b 87       	std	Y+11, r24	; 0x0b
    2d68:	9c 87       	std	Y+12, r25	; 0x0c
    2d6a:	ad 87       	std	Y+13, r26	; 0x0d
    2d6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	4a e7       	ldi	r20, 0x7A	; 122
    2d7c:	55 e4       	ldi	r21, 0x45	; 69
    2d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	8f 83       	std	Y+7, r24	; 0x07
    2d88:	98 87       	std	Y+8, r25	; 0x08
    2d8a:	a9 87       	std	Y+9, r26	; 0x09
    2d8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d90:	78 85       	ldd	r23, Y+8	; 0x08
    2d92:	89 85       	ldd	r24, Y+9	; 0x09
    2d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e8       	ldi	r20, 0x80	; 128
    2d9c:	5f e3       	ldi	r21, 0x3F	; 63
    2d9e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2da2:	88 23       	and	r24, r24
    2da4:	2c f4       	brge	.+10     	; 0x2db0 <H_LCD_Void_LCDInit+0x19e>
		__ticks = 1;
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	9e 83       	std	Y+6, r25	; 0x06
    2dac:	8d 83       	std	Y+5, r24	; 0x05
    2dae:	3f c0       	rjmp	.+126    	; 0x2e2e <H_LCD_Void_LCDInit+0x21c>
	else if (__tmp > 65535)
    2db0:	6f 81       	ldd	r22, Y+7	; 0x07
    2db2:	78 85       	ldd	r23, Y+8	; 0x08
    2db4:	89 85       	ldd	r24, Y+9	; 0x09
    2db6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	3f ef       	ldi	r19, 0xFF	; 255
    2dbc:	4f e7       	ldi	r20, 0x7F	; 127
    2dbe:	57 e4       	ldi	r21, 0x47	; 71
    2dc0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2dc4:	18 16       	cp	r1, r24
    2dc6:	4c f5       	brge	.+82     	; 0x2e1a <H_LCD_Void_LCDInit+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e2       	ldi	r20, 0x20	; 32
    2dd6:	51 e4       	ldi	r21, 0x41	; 65
    2dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	bc 01       	movw	r22, r24
    2de2:	cd 01       	movw	r24, r26
    2de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	9e 83       	std	Y+6, r25	; 0x06
    2dee:	8d 83       	std	Y+5, r24	; 0x05
    2df0:	0f c0       	rjmp	.+30     	; 0x2e10 <H_LCD_Void_LCDInit+0x1fe>
    2df2:	80 e9       	ldi	r24, 0x90	; 144
    2df4:	91 e0       	ldi	r25, 0x01	; 1
    2df6:	9c 83       	std	Y+4, r25	; 0x04
    2df8:	8b 83       	std	Y+3, r24	; 0x03
    2dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <H_LCD_Void_LCDInit+0x1ec>
    2e02:	9c 83       	std	Y+4, r25	; 0x04
    2e04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e06:	8d 81       	ldd	r24, Y+5	; 0x05
    2e08:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	9e 83       	std	Y+6, r25	; 0x06
    2e0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	9e 81       	ldd	r25, Y+6	; 0x06
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	69 f7       	brne	.-38     	; 0x2df2 <H_LCD_Void_LCDInit+0x1e0>
    2e18:	14 c0       	rjmp	.+40     	; 0x2e42 <H_LCD_Void_LCDInit+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1c:	78 85       	ldd	r23, Y+8	; 0x08
    2e1e:	89 85       	ldd	r24, Y+9	; 0x09
    2e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	9e 83       	std	Y+6, r25	; 0x06
    2e2c:	8d 83       	std	Y+5, r24	; 0x05
    2e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e30:	9e 81       	ldd	r25, Y+6	; 0x06
    2e32:	9a 83       	std	Y+2, r25	; 0x02
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <H_LCD_Void_LCDInit+0x228>
    2e3e:	9a 83       	std	Y+2, r25	; 0x02
    2e40:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2e42:	6c 96       	adiw	r28, 0x1c	; 28
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	f8 94       	cli
    2e48:	de bf       	out	0x3e, r29	; 62
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	cd bf       	out	0x3d, r28	; 61
    2e4e:	cf 91       	pop	r28
    2e50:	df 91       	pop	r29
    2e52:	08 95       	ret

00002e54 <H_LCD_Void_LCDWriteCharacter>:
void H_LCD_Void_LCDWriteCharacter(u8 Local_u8_Character)
{
    2e54:	df 93       	push	r29
    2e56:	cf 93       	push	r28
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	e9 97       	sbiw	r28, 0x39	; 57
    2e5e:	0f b6       	in	r0, 0x3f	; 63
    2e60:	f8 94       	cli
    2e62:	de bf       	out	0x3e, r29	; 62
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	cd bf       	out	0x3d, r28	; 61
    2e68:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);

#elif LCD_MODE == _4_BIT_MODE

	M_Dio_Void_PinWrite(LCD_RS_PIN,HIGH);
    2e6a:	8b e0       	ldi	r24, 0x0B	; 11
    2e6c:	61 e0       	ldi	r22, 0x01	; 1
    2e6e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
	LCD_DATA_PORT = ((Local_u8_Character >> 1) & 0b01111000 ) | (LCD_DATA_PORT & 0b10000111);
    2e72:	ab e3       	ldi	r26, 0x3B	; 59
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	89 ad       	ldd	r24, Y+57	; 0x39
    2e78:	86 95       	lsr	r24
    2e7a:	98 2f       	mov	r25, r24
    2e7c:	98 77       	andi	r25, 0x78	; 120
    2e7e:	eb e3       	ldi	r30, 0x3B	; 59
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	87 78       	andi	r24, 0x87	; 135
    2e86:	89 2b       	or	r24, r25
    2e88:	8c 93       	st	X, r24
	M_Dio_Void_PinWrite(LCD_EN_PIN,HIGH);
    2e8a:	8c e0       	ldi	r24, 0x0C	; 12
    2e8c:	61 e0       	ldi	r22, 0x01	; 1
    2e8e:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	a0 e8       	ldi	r26, 0x80	; 128
    2e98:	bf e3       	ldi	r27, 0x3F	; 63
    2e9a:	8d ab       	std	Y+53, r24	; 0x35
    2e9c:	9e ab       	std	Y+54, r25	; 0x36
    2e9e:	af ab       	std	Y+55, r26	; 0x37
    2ea0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ea4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ea6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ea8:	98 ad       	ldd	r25, Y+56	; 0x38
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	4a e7       	ldi	r20, 0x7A	; 122
    2eb0:	55 e4       	ldi	r21, 0x45	; 69
    2eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	89 ab       	std	Y+49, r24	; 0x31
    2ebc:	9a ab       	std	Y+50, r25	; 0x32
    2ebe:	ab ab       	std	Y+51, r26	; 0x33
    2ec0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ec2:	69 a9       	ldd	r22, Y+49	; 0x31
    2ec4:	7a a9       	ldd	r23, Y+50	; 0x32
    2ec6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ec8:	9c a9       	ldd	r25, Y+52	; 0x34
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e8       	ldi	r20, 0x80	; 128
    2ed0:	5f e3       	ldi	r21, 0x3F	; 63
    2ed2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ed6:	88 23       	and	r24, r24
    2ed8:	2c f4       	brge	.+10     	; 0x2ee4 <H_LCD_Void_LCDWriteCharacter+0x90>
		__ticks = 1;
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	98 ab       	std	Y+48, r25	; 0x30
    2ee0:	8f a7       	std	Y+47, r24	; 0x2f
    2ee2:	3f c0       	rjmp	.+126    	; 0x2f62 <H_LCD_Void_LCDWriteCharacter+0x10e>
	else if (__tmp > 65535)
    2ee4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ee6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ee8:	8b a9       	ldd	r24, Y+51	; 0x33
    2eea:	9c a9       	ldd	r25, Y+52	; 0x34
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	3f ef       	ldi	r19, 0xFF	; 255
    2ef0:	4f e7       	ldi	r20, 0x7F	; 127
    2ef2:	57 e4       	ldi	r21, 0x47	; 71
    2ef4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ef8:	18 16       	cp	r1, r24
    2efa:	4c f5       	brge	.+82     	; 0x2f4e <H_LCD_Void_LCDWriteCharacter+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efc:	6d a9       	ldd	r22, Y+53	; 0x35
    2efe:	7e a9       	ldd	r23, Y+54	; 0x36
    2f00:	8f a9       	ldd	r24, Y+55	; 0x37
    2f02:	98 ad       	ldd	r25, Y+56	; 0x38
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e2       	ldi	r20, 0x20	; 32
    2f0a:	51 e4       	ldi	r21, 0x41	; 65
    2f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	bc 01       	movw	r22, r24
    2f16:	cd 01       	movw	r24, r26
    2f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	98 ab       	std	Y+48, r25	; 0x30
    2f22:	8f a7       	std	Y+47, r24	; 0x2f
    2f24:	0f c0       	rjmp	.+30     	; 0x2f44 <H_LCD_Void_LCDWriteCharacter+0xf0>
    2f26:	80 e9       	ldi	r24, 0x90	; 144
    2f28:	91 e0       	ldi	r25, 0x01	; 1
    2f2a:	9e a7       	std	Y+46, r25	; 0x2e
    2f2c:	8d a7       	std	Y+45, r24	; 0x2d
    2f2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f30:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	f1 f7       	brne	.-4      	; 0x2f32 <H_LCD_Void_LCDWriteCharacter+0xde>
    2f36:	9e a7       	std	Y+46, r25	; 0x2e
    2f38:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	98 ab       	std	Y+48, r25	; 0x30
    2f42:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f44:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f46:	98 a9       	ldd	r25, Y+48	; 0x30
    2f48:	00 97       	sbiw	r24, 0x00	; 0
    2f4a:	69 f7       	brne	.-38     	; 0x2f26 <H_LCD_Void_LCDWriteCharacter+0xd2>
    2f4c:	14 c0       	rjmp	.+40     	; 0x2f76 <H_LCD_Void_LCDWriteCharacter+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4e:	69 a9       	ldd	r22, Y+49	; 0x31
    2f50:	7a a9       	ldd	r23, Y+50	; 0x32
    2f52:	8b a9       	ldd	r24, Y+51	; 0x33
    2f54:	9c a9       	ldd	r25, Y+52	; 0x34
    2f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	98 ab       	std	Y+48, r25	; 0x30
    2f60:	8f a7       	std	Y+47, r24	; 0x2f
    2f62:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f64:	98 a9       	ldd	r25, Y+48	; 0x30
    2f66:	9c a7       	std	Y+44, r25	; 0x2c
    2f68:	8b a7       	std	Y+43, r24	; 0x2b
    2f6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	f1 f7       	brne	.-4      	; 0x2f6e <H_LCD_Void_LCDWriteCharacter+0x11a>
    2f72:	9c a7       	std	Y+44, r25	; 0x2c
    2f74:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);
    2f76:	8c e0       	ldi	r24, 0x0C	; 12
    2f78:	60 e0       	ldi	r22, 0x00	; 0
    2f7a:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	a0 e8       	ldi	r26, 0x80	; 128
    2f84:	bf e3       	ldi	r27, 0x3F	; 63
    2f86:	8f a3       	std	Y+39, r24	; 0x27
    2f88:	98 a7       	std	Y+40, r25	; 0x28
    2f8a:	a9 a7       	std	Y+41, r26	; 0x29
    2f8c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f8e:	6f a1       	ldd	r22, Y+39	; 0x27
    2f90:	78 a5       	ldd	r23, Y+40	; 0x28
    2f92:	89 a5       	ldd	r24, Y+41	; 0x29
    2f94:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	4a e7       	ldi	r20, 0x7A	; 122
    2f9c:	55 e4       	ldi	r21, 0x45	; 69
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	8b a3       	std	Y+35, r24	; 0x23
    2fa8:	9c a3       	std	Y+36, r25	; 0x24
    2faa:	ad a3       	std	Y+37, r26	; 0x25
    2fac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fae:	6b a1       	ldd	r22, Y+35	; 0x23
    2fb0:	7c a1       	ldd	r23, Y+36	; 0x24
    2fb2:	8d a1       	ldd	r24, Y+37	; 0x25
    2fb4:	9e a1       	ldd	r25, Y+38	; 0x26
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e8       	ldi	r20, 0x80	; 128
    2fbc:	5f e3       	ldi	r21, 0x3F	; 63
    2fbe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2fc2:	88 23       	and	r24, r24
    2fc4:	2c f4       	brge	.+10     	; 0x2fd0 <H_LCD_Void_LCDWriteCharacter+0x17c>
		__ticks = 1;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	9a a3       	std	Y+34, r25	; 0x22
    2fcc:	89 a3       	std	Y+33, r24	; 0x21
    2fce:	3f c0       	rjmp	.+126    	; 0x304e <H_LCD_Void_LCDWriteCharacter+0x1fa>
	else if (__tmp > 65535)
    2fd0:	6b a1       	ldd	r22, Y+35	; 0x23
    2fd2:	7c a1       	ldd	r23, Y+36	; 0x24
    2fd4:	8d a1       	ldd	r24, Y+37	; 0x25
    2fd6:	9e a1       	ldd	r25, Y+38	; 0x26
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	3f ef       	ldi	r19, 0xFF	; 255
    2fdc:	4f e7       	ldi	r20, 0x7F	; 127
    2fde:	57 e4       	ldi	r21, 0x47	; 71
    2fe0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2fe4:	18 16       	cp	r1, r24
    2fe6:	4c f5       	brge	.+82     	; 0x303a <H_LCD_Void_LCDWriteCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe8:	6f a1       	ldd	r22, Y+39	; 0x27
    2fea:	78 a5       	ldd	r23, Y+40	; 0x28
    2fec:	89 a5       	ldd	r24, Y+41	; 0x29
    2fee:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e2       	ldi	r20, 0x20	; 32
    2ff6:	51 e4       	ldi	r21, 0x41	; 65
    2ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	bc 01       	movw	r22, r24
    3002:	cd 01       	movw	r24, r26
    3004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	9a a3       	std	Y+34, r25	; 0x22
    300e:	89 a3       	std	Y+33, r24	; 0x21
    3010:	0f c0       	rjmp	.+30     	; 0x3030 <H_LCD_Void_LCDWriteCharacter+0x1dc>
    3012:	80 e9       	ldi	r24, 0x90	; 144
    3014:	91 e0       	ldi	r25, 0x01	; 1
    3016:	98 a3       	std	Y+32, r25	; 0x20
    3018:	8f 8f       	std	Y+31, r24	; 0x1f
    301a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    301c:	98 a1       	ldd	r25, Y+32	; 0x20
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	f1 f7       	brne	.-4      	; 0x301e <H_LCD_Void_LCDWriteCharacter+0x1ca>
    3022:	98 a3       	std	Y+32, r25	; 0x20
    3024:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3026:	89 a1       	ldd	r24, Y+33	; 0x21
    3028:	9a a1       	ldd	r25, Y+34	; 0x22
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	9a a3       	std	Y+34, r25	; 0x22
    302e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3030:	89 a1       	ldd	r24, Y+33	; 0x21
    3032:	9a a1       	ldd	r25, Y+34	; 0x22
    3034:	00 97       	sbiw	r24, 0x00	; 0
    3036:	69 f7       	brne	.-38     	; 0x3012 <H_LCD_Void_LCDWriteCharacter+0x1be>
    3038:	14 c0       	rjmp	.+40     	; 0x3062 <H_LCD_Void_LCDWriteCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303a:	6b a1       	ldd	r22, Y+35	; 0x23
    303c:	7c a1       	ldd	r23, Y+36	; 0x24
    303e:	8d a1       	ldd	r24, Y+37	; 0x25
    3040:	9e a1       	ldd	r25, Y+38	; 0x26
    3042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	9a a3       	std	Y+34, r25	; 0x22
    304c:	89 a3       	std	Y+33, r24	; 0x21
    304e:	89 a1       	ldd	r24, Y+33	; 0x21
    3050:	9a a1       	ldd	r25, Y+34	; 0x22
    3052:	9e 8f       	std	Y+30, r25	; 0x1e
    3054:	8d 8f       	std	Y+29, r24	; 0x1d
    3056:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3058:	9e 8d       	ldd	r25, Y+30	; 0x1e
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	f1 f7       	brne	.-4      	; 0x305a <H_LCD_Void_LCDWriteCharacter+0x206>
    305e:	9e 8f       	std	Y+30, r25	; 0x1e
    3060:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = ((Local_u8_Character << 3) & 0b01111000 ) | (LCD_DATA_PORT & 0b10000111);
    3062:	ab e3       	ldi	r26, 0x3B	; 59
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	89 ad       	ldd	r24, Y+57	; 0x39
    3068:	88 2f       	mov	r24, r24
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	88 0f       	add	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	88 0f       	add	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	98 2f       	mov	r25, r24
    307a:	98 77       	andi	r25, 0x78	; 120
    307c:	eb e3       	ldi	r30, 0x3B	; 59
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	80 81       	ld	r24, Z
    3082:	87 78       	andi	r24, 0x87	; 135
    3084:	89 2b       	or	r24, r25
    3086:	8c 93       	st	X, r24
	M_Dio_Void_PinWrite(LCD_EN_PIN,HIGH);
    3088:	8c e0       	ldi	r24, 0x0C	; 12
    308a:	61 e0       	ldi	r22, 0x01	; 1
    308c:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	a0 e8       	ldi	r26, 0x80	; 128
    3096:	bf e3       	ldi	r27, 0x3F	; 63
    3098:	89 8f       	std	Y+25, r24	; 0x19
    309a:	9a 8f       	std	Y+26, r25	; 0x1a
    309c:	ab 8f       	std	Y+27, r26	; 0x1b
    309e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a0:	69 8d       	ldd	r22, Y+25	; 0x19
    30a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	4a e7       	ldi	r20, 0x7A	; 122
    30ae:	55 e4       	ldi	r21, 0x45	; 69
    30b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	8d 8b       	std	Y+21, r24	; 0x15
    30ba:	9e 8b       	std	Y+22, r25	; 0x16
    30bc:	af 8b       	std	Y+23, r26	; 0x17
    30be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30c0:	6d 89       	ldd	r22, Y+21	; 0x15
    30c2:	7e 89       	ldd	r23, Y+22	; 0x16
    30c4:	8f 89       	ldd	r24, Y+23	; 0x17
    30c6:	98 8d       	ldd	r25, Y+24	; 0x18
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	40 e8       	ldi	r20, 0x80	; 128
    30ce:	5f e3       	ldi	r21, 0x3F	; 63
    30d0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    30d4:	88 23       	and	r24, r24
    30d6:	2c f4       	brge	.+10     	; 0x30e2 <H_LCD_Void_LCDWriteCharacter+0x28e>
		__ticks = 1;
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	9c 8b       	std	Y+20, r25	; 0x14
    30de:	8b 8b       	std	Y+19, r24	; 0x13
    30e0:	3f c0       	rjmp	.+126    	; 0x3160 <H_LCD_Void_LCDWriteCharacter+0x30c>
	else if (__tmp > 65535)
    30e2:	6d 89       	ldd	r22, Y+21	; 0x15
    30e4:	7e 89       	ldd	r23, Y+22	; 0x16
    30e6:	8f 89       	ldd	r24, Y+23	; 0x17
    30e8:	98 8d       	ldd	r25, Y+24	; 0x18
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	3f ef       	ldi	r19, 0xFF	; 255
    30ee:	4f e7       	ldi	r20, 0x7F	; 127
    30f0:	57 e4       	ldi	r21, 0x47	; 71
    30f2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    30f6:	18 16       	cp	r1, r24
    30f8:	4c f5       	brge	.+82     	; 0x314c <H_LCD_Void_LCDWriteCharacter+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30fa:	69 8d       	ldd	r22, Y+25	; 0x19
    30fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3100:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	40 e2       	ldi	r20, 0x20	; 32
    3108:	51 e4       	ldi	r21, 0x41	; 65
    310a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	bc 01       	movw	r22, r24
    3114:	cd 01       	movw	r24, r26
    3116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	9c 8b       	std	Y+20, r25	; 0x14
    3120:	8b 8b       	std	Y+19, r24	; 0x13
    3122:	0f c0       	rjmp	.+30     	; 0x3142 <H_LCD_Void_LCDWriteCharacter+0x2ee>
    3124:	80 e9       	ldi	r24, 0x90	; 144
    3126:	91 e0       	ldi	r25, 0x01	; 1
    3128:	9a 8b       	std	Y+18, r25	; 0x12
    312a:	89 8b       	std	Y+17, r24	; 0x11
    312c:	89 89       	ldd	r24, Y+17	; 0x11
    312e:	9a 89       	ldd	r25, Y+18	; 0x12
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	f1 f7       	brne	.-4      	; 0x3130 <H_LCD_Void_LCDWriteCharacter+0x2dc>
    3134:	9a 8b       	std	Y+18, r25	; 0x12
    3136:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3138:	8b 89       	ldd	r24, Y+19	; 0x13
    313a:	9c 89       	ldd	r25, Y+20	; 0x14
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	9c 8b       	std	Y+20, r25	; 0x14
    3140:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3142:	8b 89       	ldd	r24, Y+19	; 0x13
    3144:	9c 89       	ldd	r25, Y+20	; 0x14
    3146:	00 97       	sbiw	r24, 0x00	; 0
    3148:	69 f7       	brne	.-38     	; 0x3124 <H_LCD_Void_LCDWriteCharacter+0x2d0>
    314a:	14 c0       	rjmp	.+40     	; 0x3174 <H_LCD_Void_LCDWriteCharacter+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    314c:	6d 89       	ldd	r22, Y+21	; 0x15
    314e:	7e 89       	ldd	r23, Y+22	; 0x16
    3150:	8f 89       	ldd	r24, Y+23	; 0x17
    3152:	98 8d       	ldd	r25, Y+24	; 0x18
    3154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	9c 8b       	std	Y+20, r25	; 0x14
    315e:	8b 8b       	std	Y+19, r24	; 0x13
    3160:	8b 89       	ldd	r24, Y+19	; 0x13
    3162:	9c 89       	ldd	r25, Y+20	; 0x14
    3164:	98 8b       	std	Y+16, r25	; 0x10
    3166:	8f 87       	std	Y+15, r24	; 0x0f
    3168:	8f 85       	ldd	r24, Y+15	; 0x0f
    316a:	98 89       	ldd	r25, Y+16	; 0x10
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	f1 f7       	brne	.-4      	; 0x316c <H_LCD_Void_LCDWriteCharacter+0x318>
    3170:	98 8b       	std	Y+16, r25	; 0x10
    3172:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);
    3174:	8c e0       	ldi	r24, 0x0C	; 12
    3176:	60 e0       	ldi	r22, 0x00	; 0
    3178:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	a0 ea       	ldi	r26, 0xA0	; 160
    3182:	b0 e4       	ldi	r27, 0x40	; 64
    3184:	8b 87       	std	Y+11, r24	; 0x0b
    3186:	9c 87       	std	Y+12, r25	; 0x0c
    3188:	ad 87       	std	Y+13, r26	; 0x0d
    318a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    318c:	6b 85       	ldd	r22, Y+11	; 0x0b
    318e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3190:	8d 85       	ldd	r24, Y+13	; 0x0d
    3192:	9e 85       	ldd	r25, Y+14	; 0x0e
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	4a e7       	ldi	r20, 0x7A	; 122
    319a:	55 e4       	ldi	r21, 0x45	; 69
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	8f 83       	std	Y+7, r24	; 0x07
    31a6:	98 87       	std	Y+8, r25	; 0x08
    31a8:	a9 87       	std	Y+9, r26	; 0x09
    31aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ac:	6f 81       	ldd	r22, Y+7	; 0x07
    31ae:	78 85       	ldd	r23, Y+8	; 0x08
    31b0:	89 85       	ldd	r24, Y+9	; 0x09
    31b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e8       	ldi	r20, 0x80	; 128
    31ba:	5f e3       	ldi	r21, 0x3F	; 63
    31bc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    31c0:	88 23       	and	r24, r24
    31c2:	2c f4       	brge	.+10     	; 0x31ce <H_LCD_Void_LCDWriteCharacter+0x37a>
		__ticks = 1;
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	9e 83       	std	Y+6, r25	; 0x06
    31ca:	8d 83       	std	Y+5, r24	; 0x05
    31cc:	3f c0       	rjmp	.+126    	; 0x324c <H_LCD_Void_LCDWriteCharacter+0x3f8>
	else if (__tmp > 65535)
    31ce:	6f 81       	ldd	r22, Y+7	; 0x07
    31d0:	78 85       	ldd	r23, Y+8	; 0x08
    31d2:	89 85       	ldd	r24, Y+9	; 0x09
    31d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	3f ef       	ldi	r19, 0xFF	; 255
    31da:	4f e7       	ldi	r20, 0x7F	; 127
    31dc:	57 e4       	ldi	r21, 0x47	; 71
    31de:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    31e2:	18 16       	cp	r1, r24
    31e4:	4c f5       	brge	.+82     	; 0x3238 <H_LCD_Void_LCDWriteCharacter+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 e2       	ldi	r20, 0x20	; 32
    31f4:	51 e4       	ldi	r21, 0x41	; 65
    31f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	9e 83       	std	Y+6, r25	; 0x06
    320c:	8d 83       	std	Y+5, r24	; 0x05
    320e:	0f c0       	rjmp	.+30     	; 0x322e <H_LCD_Void_LCDWriteCharacter+0x3da>
    3210:	80 e9       	ldi	r24, 0x90	; 144
    3212:	91 e0       	ldi	r25, 0x01	; 1
    3214:	9c 83       	std	Y+4, r25	; 0x04
    3216:	8b 83       	std	Y+3, r24	; 0x03
    3218:	8b 81       	ldd	r24, Y+3	; 0x03
    321a:	9c 81       	ldd	r25, Y+4	; 0x04
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	f1 f7       	brne	.-4      	; 0x321c <H_LCD_Void_LCDWriteCharacter+0x3c8>
    3220:	9c 83       	std	Y+4, r25	; 0x04
    3222:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3224:	8d 81       	ldd	r24, Y+5	; 0x05
    3226:	9e 81       	ldd	r25, Y+6	; 0x06
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	9e 83       	std	Y+6, r25	; 0x06
    322c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322e:	8d 81       	ldd	r24, Y+5	; 0x05
    3230:	9e 81       	ldd	r25, Y+6	; 0x06
    3232:	00 97       	sbiw	r24, 0x00	; 0
    3234:	69 f7       	brne	.-38     	; 0x3210 <H_LCD_Void_LCDWriteCharacter+0x3bc>
    3236:	14 c0       	rjmp	.+40     	; 0x3260 <H_LCD_Void_LCDWriteCharacter+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3238:	6f 81       	ldd	r22, Y+7	; 0x07
    323a:	78 85       	ldd	r23, Y+8	; 0x08
    323c:	89 85       	ldd	r24, Y+9	; 0x09
    323e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	9e 83       	std	Y+6, r25	; 0x06
    324a:	8d 83       	std	Y+5, r24	; 0x05
    324c:	8d 81       	ldd	r24, Y+5	; 0x05
    324e:	9e 81       	ldd	r25, Y+6	; 0x06
    3250:	9a 83       	std	Y+2, r25	; 0x02
    3252:	89 83       	std	Y+1, r24	; 0x01
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	9a 81       	ldd	r25, Y+2	; 0x02
    3258:	01 97       	sbiw	r24, 0x01	; 1
    325a:	f1 f7       	brne	.-4      	; 0x3258 <H_LCD_Void_LCDWriteCharacter+0x404>
    325c:	9a 83       	std	Y+2, r25	; 0x02
    325e:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(5);
}
    3260:	e9 96       	adiw	r28, 0x39	; 57
    3262:	0f b6       	in	r0, 0x3f	; 63
    3264:	f8 94       	cli
    3266:	de bf       	out	0x3e, r29	; 62
    3268:	0f be       	out	0x3f, r0	; 63
    326a:	cd bf       	out	0x3d, r28	; 61
    326c:	cf 91       	pop	r28
    326e:	df 91       	pop	r29
    3270:	08 95       	ret

00003272 <H_LCD_Void_LCDWriteCommand>:
void H_LCD_Void_LCDWriteCommand(u8 Local_u8_Command)
{
    3272:	df 93       	push	r29
    3274:	cf 93       	push	r28
    3276:	cd b7       	in	r28, 0x3d	; 61
    3278:	de b7       	in	r29, 0x3e	; 62
    327a:	e9 97       	sbiw	r28, 0x39	; 57
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	de bf       	out	0x3e, r29	; 62
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	cd bf       	out	0x3d, r28	; 61
    3286:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);

#elif LCD_MODE == _4_BIT_MODE

	M_Dio_Void_PinWrite(LCD_RS_PIN,LOW);
    3288:	8b e0       	ldi	r24, 0x0B	; 11
    328a:	60 e0       	ldi	r22, 0x00	; 0
    328c:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
	LCD_DATA_PORT = ((Local_u8_Command >> 1) & 0b01111000 ) | (LCD_DATA_PORT & 0b10000111);
    3290:	ab e3       	ldi	r26, 0x3B	; 59
    3292:	b0 e0       	ldi	r27, 0x00	; 0
    3294:	89 ad       	ldd	r24, Y+57	; 0x39
    3296:	86 95       	lsr	r24
    3298:	98 2f       	mov	r25, r24
    329a:	98 77       	andi	r25, 0x78	; 120
    329c:	eb e3       	ldi	r30, 0x3B	; 59
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	80 81       	ld	r24, Z
    32a2:	87 78       	andi	r24, 0x87	; 135
    32a4:	89 2b       	or	r24, r25
    32a6:	8c 93       	st	X, r24
	M_Dio_Void_PinWrite(LCD_EN_PIN,HIGH);
    32a8:	8c e0       	ldi	r24, 0x0C	; 12
    32aa:	61 e0       	ldi	r22, 0x01	; 1
    32ac:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	a0 e8       	ldi	r26, 0x80	; 128
    32b6:	bf e3       	ldi	r27, 0x3F	; 63
    32b8:	8d ab       	std	Y+53, r24	; 0x35
    32ba:	9e ab       	std	Y+54, r25	; 0x36
    32bc:	af ab       	std	Y+55, r26	; 0x37
    32be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c0:	6d a9       	ldd	r22, Y+53	; 0x35
    32c2:	7e a9       	ldd	r23, Y+54	; 0x36
    32c4:	8f a9       	ldd	r24, Y+55	; 0x37
    32c6:	98 ad       	ldd	r25, Y+56	; 0x38
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	4a e7       	ldi	r20, 0x7A	; 122
    32ce:	55 e4       	ldi	r21, 0x45	; 69
    32d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	89 ab       	std	Y+49, r24	; 0x31
    32da:	9a ab       	std	Y+50, r25	; 0x32
    32dc:	ab ab       	std	Y+51, r26	; 0x33
    32de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32e0:	69 a9       	ldd	r22, Y+49	; 0x31
    32e2:	7a a9       	ldd	r23, Y+50	; 0x32
    32e4:	8b a9       	ldd	r24, Y+51	; 0x33
    32e6:	9c a9       	ldd	r25, Y+52	; 0x34
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	40 e8       	ldi	r20, 0x80	; 128
    32ee:	5f e3       	ldi	r21, 0x3F	; 63
    32f0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    32f4:	88 23       	and	r24, r24
    32f6:	2c f4       	brge	.+10     	; 0x3302 <H_LCD_Void_LCDWriteCommand+0x90>
		__ticks = 1;
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	98 ab       	std	Y+48, r25	; 0x30
    32fe:	8f a7       	std	Y+47, r24	; 0x2f
    3300:	3f c0       	rjmp	.+126    	; 0x3380 <H_LCD_Void_LCDWriteCommand+0x10e>
	else if (__tmp > 65535)
    3302:	69 a9       	ldd	r22, Y+49	; 0x31
    3304:	7a a9       	ldd	r23, Y+50	; 0x32
    3306:	8b a9       	ldd	r24, Y+51	; 0x33
    3308:	9c a9       	ldd	r25, Y+52	; 0x34
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	3f ef       	ldi	r19, 0xFF	; 255
    330e:	4f e7       	ldi	r20, 0x7F	; 127
    3310:	57 e4       	ldi	r21, 0x47	; 71
    3312:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3316:	18 16       	cp	r1, r24
    3318:	4c f5       	brge	.+82     	; 0x336c <H_LCD_Void_LCDWriteCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331a:	6d a9       	ldd	r22, Y+53	; 0x35
    331c:	7e a9       	ldd	r23, Y+54	; 0x36
    331e:	8f a9       	ldd	r24, Y+55	; 0x37
    3320:	98 ad       	ldd	r25, Y+56	; 0x38
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e2       	ldi	r20, 0x20	; 32
    3328:	51 e4       	ldi	r21, 0x41	; 65
    332a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	bc 01       	movw	r22, r24
    3334:	cd 01       	movw	r24, r26
    3336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	98 ab       	std	Y+48, r25	; 0x30
    3340:	8f a7       	std	Y+47, r24	; 0x2f
    3342:	0f c0       	rjmp	.+30     	; 0x3362 <H_LCD_Void_LCDWriteCommand+0xf0>
    3344:	80 e9       	ldi	r24, 0x90	; 144
    3346:	91 e0       	ldi	r25, 0x01	; 1
    3348:	9e a7       	std	Y+46, r25	; 0x2e
    334a:	8d a7       	std	Y+45, r24	; 0x2d
    334c:	8d a5       	ldd	r24, Y+45	; 0x2d
    334e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	f1 f7       	brne	.-4      	; 0x3350 <H_LCD_Void_LCDWriteCommand+0xde>
    3354:	9e a7       	std	Y+46, r25	; 0x2e
    3356:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3358:	8f a5       	ldd	r24, Y+47	; 0x2f
    335a:	98 a9       	ldd	r25, Y+48	; 0x30
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	98 ab       	std	Y+48, r25	; 0x30
    3360:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3362:	8f a5       	ldd	r24, Y+47	; 0x2f
    3364:	98 a9       	ldd	r25, Y+48	; 0x30
    3366:	00 97       	sbiw	r24, 0x00	; 0
    3368:	69 f7       	brne	.-38     	; 0x3344 <H_LCD_Void_LCDWriteCommand+0xd2>
    336a:	14 c0       	rjmp	.+40     	; 0x3394 <H_LCD_Void_LCDWriteCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    336c:	69 a9       	ldd	r22, Y+49	; 0x31
    336e:	7a a9       	ldd	r23, Y+50	; 0x32
    3370:	8b a9       	ldd	r24, Y+51	; 0x33
    3372:	9c a9       	ldd	r25, Y+52	; 0x34
    3374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	98 ab       	std	Y+48, r25	; 0x30
    337e:	8f a7       	std	Y+47, r24	; 0x2f
    3380:	8f a5       	ldd	r24, Y+47	; 0x2f
    3382:	98 a9       	ldd	r25, Y+48	; 0x30
    3384:	9c a7       	std	Y+44, r25	; 0x2c
    3386:	8b a7       	std	Y+43, r24	; 0x2b
    3388:	8b a5       	ldd	r24, Y+43	; 0x2b
    338a:	9c a5       	ldd	r25, Y+44	; 0x2c
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	f1 f7       	brne	.-4      	; 0x338c <H_LCD_Void_LCDWriteCommand+0x11a>
    3390:	9c a7       	std	Y+44, r25	; 0x2c
    3392:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);
    3394:	8c e0       	ldi	r24, 0x0C	; 12
    3396:	60 e0       	ldi	r22, 0x00	; 0
    3398:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	a0 e8       	ldi	r26, 0x80	; 128
    33a2:	bf e3       	ldi	r27, 0x3F	; 63
    33a4:	8f a3       	std	Y+39, r24	; 0x27
    33a6:	98 a7       	std	Y+40, r25	; 0x28
    33a8:	a9 a7       	std	Y+41, r26	; 0x29
    33aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ac:	6f a1       	ldd	r22, Y+39	; 0x27
    33ae:	78 a5       	ldd	r23, Y+40	; 0x28
    33b0:	89 a5       	ldd	r24, Y+41	; 0x29
    33b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	4a e7       	ldi	r20, 0x7A	; 122
    33ba:	55 e4       	ldi	r21, 0x45	; 69
    33bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	8b a3       	std	Y+35, r24	; 0x23
    33c6:	9c a3       	std	Y+36, r25	; 0x24
    33c8:	ad a3       	std	Y+37, r26	; 0x25
    33ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33cc:	6b a1       	ldd	r22, Y+35	; 0x23
    33ce:	7c a1       	ldd	r23, Y+36	; 0x24
    33d0:	8d a1       	ldd	r24, Y+37	; 0x25
    33d2:	9e a1       	ldd	r25, Y+38	; 0x26
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e8       	ldi	r20, 0x80	; 128
    33da:	5f e3       	ldi	r21, 0x3F	; 63
    33dc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    33e0:	88 23       	and	r24, r24
    33e2:	2c f4       	brge	.+10     	; 0x33ee <H_LCD_Void_LCDWriteCommand+0x17c>
		__ticks = 1;
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	9a a3       	std	Y+34, r25	; 0x22
    33ea:	89 a3       	std	Y+33, r24	; 0x21
    33ec:	3f c0       	rjmp	.+126    	; 0x346c <H_LCD_Void_LCDWriteCommand+0x1fa>
	else if (__tmp > 65535)
    33ee:	6b a1       	ldd	r22, Y+35	; 0x23
    33f0:	7c a1       	ldd	r23, Y+36	; 0x24
    33f2:	8d a1       	ldd	r24, Y+37	; 0x25
    33f4:	9e a1       	ldd	r25, Y+38	; 0x26
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	3f ef       	ldi	r19, 0xFF	; 255
    33fa:	4f e7       	ldi	r20, 0x7F	; 127
    33fc:	57 e4       	ldi	r21, 0x47	; 71
    33fe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3402:	18 16       	cp	r1, r24
    3404:	4c f5       	brge	.+82     	; 0x3458 <H_LCD_Void_LCDWriteCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3406:	6f a1       	ldd	r22, Y+39	; 0x27
    3408:	78 a5       	ldd	r23, Y+40	; 0x28
    340a:	89 a5       	ldd	r24, Y+41	; 0x29
    340c:	9a a5       	ldd	r25, Y+42	; 0x2a
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	40 e2       	ldi	r20, 0x20	; 32
    3414:	51 e4       	ldi	r21, 0x41	; 65
    3416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	bc 01       	movw	r22, r24
    3420:	cd 01       	movw	r24, r26
    3422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	9a a3       	std	Y+34, r25	; 0x22
    342c:	89 a3       	std	Y+33, r24	; 0x21
    342e:	0f c0       	rjmp	.+30     	; 0x344e <H_LCD_Void_LCDWriteCommand+0x1dc>
    3430:	80 e9       	ldi	r24, 0x90	; 144
    3432:	91 e0       	ldi	r25, 0x01	; 1
    3434:	98 a3       	std	Y+32, r25	; 0x20
    3436:	8f 8f       	std	Y+31, r24	; 0x1f
    3438:	8f 8d       	ldd	r24, Y+31	; 0x1f
    343a:	98 a1       	ldd	r25, Y+32	; 0x20
    343c:	01 97       	sbiw	r24, 0x01	; 1
    343e:	f1 f7       	brne	.-4      	; 0x343c <H_LCD_Void_LCDWriteCommand+0x1ca>
    3440:	98 a3       	std	Y+32, r25	; 0x20
    3442:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3444:	89 a1       	ldd	r24, Y+33	; 0x21
    3446:	9a a1       	ldd	r25, Y+34	; 0x22
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	9a a3       	std	Y+34, r25	; 0x22
    344c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344e:	89 a1       	ldd	r24, Y+33	; 0x21
    3450:	9a a1       	ldd	r25, Y+34	; 0x22
    3452:	00 97       	sbiw	r24, 0x00	; 0
    3454:	69 f7       	brne	.-38     	; 0x3430 <H_LCD_Void_LCDWriteCommand+0x1be>
    3456:	14 c0       	rjmp	.+40     	; 0x3480 <H_LCD_Void_LCDWriteCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3458:	6b a1       	ldd	r22, Y+35	; 0x23
    345a:	7c a1       	ldd	r23, Y+36	; 0x24
    345c:	8d a1       	ldd	r24, Y+37	; 0x25
    345e:	9e a1       	ldd	r25, Y+38	; 0x26
    3460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	9a a3       	std	Y+34, r25	; 0x22
    346a:	89 a3       	std	Y+33, r24	; 0x21
    346c:	89 a1       	ldd	r24, Y+33	; 0x21
    346e:	9a a1       	ldd	r25, Y+34	; 0x22
    3470:	9e 8f       	std	Y+30, r25	; 0x1e
    3472:	8d 8f       	std	Y+29, r24	; 0x1d
    3474:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3476:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	f1 f7       	brne	.-4      	; 0x3478 <H_LCD_Void_LCDWriteCommand+0x206>
    347c:	9e 8f       	std	Y+30, r25	; 0x1e
    347e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = ((Local_u8_Command << 3) & 0b01111000 ) | (LCD_DATA_PORT & 0b10000111);
    3480:	ab e3       	ldi	r26, 0x3B	; 59
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	89 ad       	ldd	r24, Y+57	; 0x39
    3486:	88 2f       	mov	r24, r24
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	88 0f       	add	r24, r24
    348c:	99 1f       	adc	r25, r25
    348e:	88 0f       	add	r24, r24
    3490:	99 1f       	adc	r25, r25
    3492:	88 0f       	add	r24, r24
    3494:	99 1f       	adc	r25, r25
    3496:	98 2f       	mov	r25, r24
    3498:	98 77       	andi	r25, 0x78	; 120
    349a:	eb e3       	ldi	r30, 0x3B	; 59
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	80 81       	ld	r24, Z
    34a0:	87 78       	andi	r24, 0x87	; 135
    34a2:	89 2b       	or	r24, r25
    34a4:	8c 93       	st	X, r24
	M_Dio_Void_PinWrite(LCD_EN_PIN,HIGH);
    34a6:	8c e0       	ldi	r24, 0x0C	; 12
    34a8:	61 e0       	ldi	r22, 0x01	; 1
    34aa:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	a0 e8       	ldi	r26, 0x80	; 128
    34b4:	bf e3       	ldi	r27, 0x3F	; 63
    34b6:	89 8f       	std	Y+25, r24	; 0x19
    34b8:	9a 8f       	std	Y+26, r25	; 0x1a
    34ba:	ab 8f       	std	Y+27, r26	; 0x1b
    34bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34be:	69 8d       	ldd	r22, Y+25	; 0x19
    34c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	4a e7       	ldi	r20, 0x7A	; 122
    34cc:	55 e4       	ldi	r21, 0x45	; 69
    34ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	8d 8b       	std	Y+21, r24	; 0x15
    34d8:	9e 8b       	std	Y+22, r25	; 0x16
    34da:	af 8b       	std	Y+23, r26	; 0x17
    34dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34de:	6d 89       	ldd	r22, Y+21	; 0x15
    34e0:	7e 89       	ldd	r23, Y+22	; 0x16
    34e2:	8f 89       	ldd	r24, Y+23	; 0x17
    34e4:	98 8d       	ldd	r25, Y+24	; 0x18
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	40 e8       	ldi	r20, 0x80	; 128
    34ec:	5f e3       	ldi	r21, 0x3F	; 63
    34ee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    34f2:	88 23       	and	r24, r24
    34f4:	2c f4       	brge	.+10     	; 0x3500 <H_LCD_Void_LCDWriteCommand+0x28e>
		__ticks = 1;
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	9c 8b       	std	Y+20, r25	; 0x14
    34fc:	8b 8b       	std	Y+19, r24	; 0x13
    34fe:	3f c0       	rjmp	.+126    	; 0x357e <H_LCD_Void_LCDWriteCommand+0x30c>
	else if (__tmp > 65535)
    3500:	6d 89       	ldd	r22, Y+21	; 0x15
    3502:	7e 89       	ldd	r23, Y+22	; 0x16
    3504:	8f 89       	ldd	r24, Y+23	; 0x17
    3506:	98 8d       	ldd	r25, Y+24	; 0x18
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	3f ef       	ldi	r19, 0xFF	; 255
    350c:	4f e7       	ldi	r20, 0x7F	; 127
    350e:	57 e4       	ldi	r21, 0x47	; 71
    3510:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3514:	18 16       	cp	r1, r24
    3516:	4c f5       	brge	.+82     	; 0x356a <H_LCD_Void_LCDWriteCommand+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3518:	69 8d       	ldd	r22, Y+25	; 0x19
    351a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    351c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    351e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	40 e2       	ldi	r20, 0x20	; 32
    3526:	51 e4       	ldi	r21, 0x41	; 65
    3528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	bc 01       	movw	r22, r24
    3532:	cd 01       	movw	r24, r26
    3534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	9c 8b       	std	Y+20, r25	; 0x14
    353e:	8b 8b       	std	Y+19, r24	; 0x13
    3540:	0f c0       	rjmp	.+30     	; 0x3560 <H_LCD_Void_LCDWriteCommand+0x2ee>
    3542:	80 e9       	ldi	r24, 0x90	; 144
    3544:	91 e0       	ldi	r25, 0x01	; 1
    3546:	9a 8b       	std	Y+18, r25	; 0x12
    3548:	89 8b       	std	Y+17, r24	; 0x11
    354a:	89 89       	ldd	r24, Y+17	; 0x11
    354c:	9a 89       	ldd	r25, Y+18	; 0x12
    354e:	01 97       	sbiw	r24, 0x01	; 1
    3550:	f1 f7       	brne	.-4      	; 0x354e <H_LCD_Void_LCDWriteCommand+0x2dc>
    3552:	9a 8b       	std	Y+18, r25	; 0x12
    3554:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3556:	8b 89       	ldd	r24, Y+19	; 0x13
    3558:	9c 89       	ldd	r25, Y+20	; 0x14
    355a:	01 97       	sbiw	r24, 0x01	; 1
    355c:	9c 8b       	std	Y+20, r25	; 0x14
    355e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3560:	8b 89       	ldd	r24, Y+19	; 0x13
    3562:	9c 89       	ldd	r25, Y+20	; 0x14
    3564:	00 97       	sbiw	r24, 0x00	; 0
    3566:	69 f7       	brne	.-38     	; 0x3542 <H_LCD_Void_LCDWriteCommand+0x2d0>
    3568:	14 c0       	rjmp	.+40     	; 0x3592 <H_LCD_Void_LCDWriteCommand+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356a:	6d 89       	ldd	r22, Y+21	; 0x15
    356c:	7e 89       	ldd	r23, Y+22	; 0x16
    356e:	8f 89       	ldd	r24, Y+23	; 0x17
    3570:	98 8d       	ldd	r25, Y+24	; 0x18
    3572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	9c 8b       	std	Y+20, r25	; 0x14
    357c:	8b 8b       	std	Y+19, r24	; 0x13
    357e:	8b 89       	ldd	r24, Y+19	; 0x13
    3580:	9c 89       	ldd	r25, Y+20	; 0x14
    3582:	98 8b       	std	Y+16, r25	; 0x10
    3584:	8f 87       	std	Y+15, r24	; 0x0f
    3586:	8f 85       	ldd	r24, Y+15	; 0x0f
    3588:	98 89       	ldd	r25, Y+16	; 0x10
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	f1 f7       	brne	.-4      	; 0x358a <H_LCD_Void_LCDWriteCommand+0x318>
    358e:	98 8b       	std	Y+16, r25	; 0x10
    3590:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);
    3592:	8c e0       	ldi	r24, 0x0C	; 12
    3594:	60 e0       	ldi	r22, 0x00	; 0
    3596:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	a0 ea       	ldi	r26, 0xA0	; 160
    35a0:	b0 e4       	ldi	r27, 0x40	; 64
    35a2:	8b 87       	std	Y+11, r24	; 0x0b
    35a4:	9c 87       	std	Y+12, r25	; 0x0c
    35a6:	ad 87       	std	Y+13, r26	; 0x0d
    35a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    35ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    35b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	4a e7       	ldi	r20, 0x7A	; 122
    35b8:	55 e4       	ldi	r21, 0x45	; 69
    35ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	8f 83       	std	Y+7, r24	; 0x07
    35c4:	98 87       	std	Y+8, r25	; 0x08
    35c6:	a9 87       	std	Y+9, r26	; 0x09
    35c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35ca:	6f 81       	ldd	r22, Y+7	; 0x07
    35cc:	78 85       	ldd	r23, Y+8	; 0x08
    35ce:	89 85       	ldd	r24, Y+9	; 0x09
    35d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	40 e8       	ldi	r20, 0x80	; 128
    35d8:	5f e3       	ldi	r21, 0x3F	; 63
    35da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    35de:	88 23       	and	r24, r24
    35e0:	2c f4       	brge	.+10     	; 0x35ec <H_LCD_Void_LCDWriteCommand+0x37a>
		__ticks = 1;
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	9e 83       	std	Y+6, r25	; 0x06
    35e8:	8d 83       	std	Y+5, r24	; 0x05
    35ea:	3f c0       	rjmp	.+126    	; 0x366a <H_LCD_Void_LCDWriteCommand+0x3f8>
	else if (__tmp > 65535)
    35ec:	6f 81       	ldd	r22, Y+7	; 0x07
    35ee:	78 85       	ldd	r23, Y+8	; 0x08
    35f0:	89 85       	ldd	r24, Y+9	; 0x09
    35f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	3f ef       	ldi	r19, 0xFF	; 255
    35f8:	4f e7       	ldi	r20, 0x7F	; 127
    35fa:	57 e4       	ldi	r21, 0x47	; 71
    35fc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3600:	18 16       	cp	r1, r24
    3602:	4c f5       	brge	.+82     	; 0x3656 <H_LCD_Void_LCDWriteCommand+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3604:	6b 85       	ldd	r22, Y+11	; 0x0b
    3606:	7c 85       	ldd	r23, Y+12	; 0x0c
    3608:	8d 85       	ldd	r24, Y+13	; 0x0d
    360a:	9e 85       	ldd	r25, Y+14	; 0x0e
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e2       	ldi	r20, 0x20	; 32
    3612:	51 e4       	ldi	r21, 0x41	; 65
    3614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	bc 01       	movw	r22, r24
    361e:	cd 01       	movw	r24, r26
    3620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	9e 83       	std	Y+6, r25	; 0x06
    362a:	8d 83       	std	Y+5, r24	; 0x05
    362c:	0f c0       	rjmp	.+30     	; 0x364c <H_LCD_Void_LCDWriteCommand+0x3da>
    362e:	80 e9       	ldi	r24, 0x90	; 144
    3630:	91 e0       	ldi	r25, 0x01	; 1
    3632:	9c 83       	std	Y+4, r25	; 0x04
    3634:	8b 83       	std	Y+3, r24	; 0x03
    3636:	8b 81       	ldd	r24, Y+3	; 0x03
    3638:	9c 81       	ldd	r25, Y+4	; 0x04
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	f1 f7       	brne	.-4      	; 0x363a <H_LCD_Void_LCDWriteCommand+0x3c8>
    363e:	9c 83       	std	Y+4, r25	; 0x04
    3640:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3642:	8d 81       	ldd	r24, Y+5	; 0x05
    3644:	9e 81       	ldd	r25, Y+6	; 0x06
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	9e 83       	std	Y+6, r25	; 0x06
    364a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    364c:	8d 81       	ldd	r24, Y+5	; 0x05
    364e:	9e 81       	ldd	r25, Y+6	; 0x06
    3650:	00 97       	sbiw	r24, 0x00	; 0
    3652:	69 f7       	brne	.-38     	; 0x362e <H_LCD_Void_LCDWriteCommand+0x3bc>
    3654:	14 c0       	rjmp	.+40     	; 0x367e <H_LCD_Void_LCDWriteCommand+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3656:	6f 81       	ldd	r22, Y+7	; 0x07
    3658:	78 85       	ldd	r23, Y+8	; 0x08
    365a:	89 85       	ldd	r24, Y+9	; 0x09
    365c:	9a 85       	ldd	r25, Y+10	; 0x0a
    365e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	9e 83       	std	Y+6, r25	; 0x06
    3668:	8d 83       	std	Y+5, r24	; 0x05
    366a:	8d 81       	ldd	r24, Y+5	; 0x05
    366c:	9e 81       	ldd	r25, Y+6	; 0x06
    366e:	9a 83       	std	Y+2, r25	; 0x02
    3670:	89 83       	std	Y+1, r24	; 0x01
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	01 97       	sbiw	r24, 0x01	; 1
    3678:	f1 f7       	brne	.-4      	; 0x3676 <H_LCD_Void_LCDWriteCommand+0x404>
    367a:	9a 83       	std	Y+2, r25	; 0x02
    367c:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(5);
}
    367e:	e9 96       	adiw	r28, 0x39	; 57
    3680:	0f b6       	in	r0, 0x3f	; 63
    3682:	f8 94       	cli
    3684:	de bf       	out	0x3e, r29	; 62
    3686:	0f be       	out	0x3f, r0	; 63
    3688:	cd bf       	out	0x3d, r28	; 61
    368a:	cf 91       	pop	r28
    368c:	df 91       	pop	r29
    368e:	08 95       	ret

00003690 <H_LCD_Void_LCDWriteString>:


void H_LCD_Void_LCDWriteString(u8* Local_u8_Ptr)
{
    3690:	df 93       	push	r29
    3692:	cf 93       	push	r28
    3694:	cd b7       	in	r28, 0x3d	; 61
    3696:	de b7       	in	r29, 0x3e	; 62
    3698:	61 97       	sbiw	r28, 0x11	; 17
    369a:	0f b6       	in	r0, 0x3f	; 63
    369c:	f8 94       	cli
    369e:	de bf       	out	0x3e, r29	; 62
    36a0:	0f be       	out	0x3f, r0	; 63
    36a2:	cd bf       	out	0x3d, r28	; 61
    36a4:	99 8b       	std	Y+17, r25	; 0x11
    36a6:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8_Counter = 0;
    36a8:	1f 86       	std	Y+15, r1	; 0x0f
    36aa:	0e c0       	rjmp	.+28     	; 0x36c8 <H_LCD_Void_LCDWriteString+0x38>
	while(Local_u8_Ptr[Local_u8_Counter] != '\0')
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_Ptr[Local_u8_Counter]);
    36ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ae:	28 2f       	mov	r18, r24
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	88 89       	ldd	r24, Y+16	; 0x10
    36b4:	99 89       	ldd	r25, Y+17	; 0x11
    36b6:	fc 01       	movw	r30, r24
    36b8:	e2 0f       	add	r30, r18
    36ba:	f3 1f       	adc	r31, r19
    36bc:	80 81       	ld	r24, Z
    36be:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <H_LCD_Void_LCDWriteCharacter>
	Local_u8_Counter++;
    36c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c4:	8f 5f       	subi	r24, 0xFF	; 255
    36c6:	8f 87       	std	Y+15, r24	; 0x0f


void H_LCD_Void_LCDWriteString(u8* Local_u8_Ptr)
{
	u8 Local_u8_Counter = 0;
	while(Local_u8_Ptr[Local_u8_Counter] != '\0')
    36c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ca:	28 2f       	mov	r18, r24
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	88 89       	ldd	r24, Y+16	; 0x10
    36d0:	99 89       	ldd	r25, Y+17	; 0x11
    36d2:	fc 01       	movw	r30, r24
    36d4:	e2 0f       	add	r30, r18
    36d6:	f3 1f       	adc	r31, r19
    36d8:	80 81       	ld	r24, Z
    36da:	88 23       	and	r24, r24
    36dc:	39 f7       	brne	.-50     	; 0x36ac <H_LCD_Void_LCDWriteString+0x1c>
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	a0 ea       	ldi	r26, 0xA0	; 160
    36e4:	b0 e4       	ldi	r27, 0x40	; 64
    36e6:	8b 87       	std	Y+11, r24	; 0x0b
    36e8:	9c 87       	std	Y+12, r25	; 0x0c
    36ea:	ad 87       	std	Y+13, r26	; 0x0d
    36ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    36f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    36f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    36f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	4a e7       	ldi	r20, 0x7A	; 122
    36fc:	55 e4       	ldi	r21, 0x45	; 69
    36fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	8f 83       	std	Y+7, r24	; 0x07
    3708:	98 87       	std	Y+8, r25	; 0x08
    370a:	a9 87       	std	Y+9, r26	; 0x09
    370c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    370e:	6f 81       	ldd	r22, Y+7	; 0x07
    3710:	78 85       	ldd	r23, Y+8	; 0x08
    3712:	89 85       	ldd	r24, Y+9	; 0x09
    3714:	9a 85       	ldd	r25, Y+10	; 0x0a
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	40 e8       	ldi	r20, 0x80	; 128
    371c:	5f e3       	ldi	r21, 0x3F	; 63
    371e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3722:	88 23       	and	r24, r24
    3724:	2c f4       	brge	.+10     	; 0x3730 <H_LCD_Void_LCDWriteString+0xa0>
		__ticks = 1;
    3726:	81 e0       	ldi	r24, 0x01	; 1
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	9e 83       	std	Y+6, r25	; 0x06
    372c:	8d 83       	std	Y+5, r24	; 0x05
    372e:	3f c0       	rjmp	.+126    	; 0x37ae <H_LCD_Void_LCDWriteString+0x11e>
	else if (__tmp > 65535)
    3730:	6f 81       	ldd	r22, Y+7	; 0x07
    3732:	78 85       	ldd	r23, Y+8	; 0x08
    3734:	89 85       	ldd	r24, Y+9	; 0x09
    3736:	9a 85       	ldd	r25, Y+10	; 0x0a
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	3f ef       	ldi	r19, 0xFF	; 255
    373c:	4f e7       	ldi	r20, 0x7F	; 127
    373e:	57 e4       	ldi	r21, 0x47	; 71
    3740:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3744:	18 16       	cp	r1, r24
    3746:	4c f5       	brge	.+82     	; 0x379a <H_LCD_Void_LCDWriteString+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3748:	6b 85       	ldd	r22, Y+11	; 0x0b
    374a:	7c 85       	ldd	r23, Y+12	; 0x0c
    374c:	8d 85       	ldd	r24, Y+13	; 0x0d
    374e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	40 e2       	ldi	r20, 0x20	; 32
    3756:	51 e4       	ldi	r21, 0x41	; 65
    3758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	bc 01       	movw	r22, r24
    3762:	cd 01       	movw	r24, r26
    3764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	9e 83       	std	Y+6, r25	; 0x06
    376e:	8d 83       	std	Y+5, r24	; 0x05
    3770:	0f c0       	rjmp	.+30     	; 0x3790 <H_LCD_Void_LCDWriteString+0x100>
    3772:	80 e9       	ldi	r24, 0x90	; 144
    3774:	91 e0       	ldi	r25, 0x01	; 1
    3776:	9c 83       	std	Y+4, r25	; 0x04
    3778:	8b 83       	std	Y+3, r24	; 0x03
    377a:	8b 81       	ldd	r24, Y+3	; 0x03
    377c:	9c 81       	ldd	r25, Y+4	; 0x04
    377e:	01 97       	sbiw	r24, 0x01	; 1
    3780:	f1 f7       	brne	.-4      	; 0x377e <H_LCD_Void_LCDWriteString+0xee>
    3782:	9c 83       	std	Y+4, r25	; 0x04
    3784:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3786:	8d 81       	ldd	r24, Y+5	; 0x05
    3788:	9e 81       	ldd	r25, Y+6	; 0x06
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	9e 83       	std	Y+6, r25	; 0x06
    378e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3790:	8d 81       	ldd	r24, Y+5	; 0x05
    3792:	9e 81       	ldd	r25, Y+6	; 0x06
    3794:	00 97       	sbiw	r24, 0x00	; 0
    3796:	69 f7       	brne	.-38     	; 0x3772 <H_LCD_Void_LCDWriteString+0xe2>
    3798:	14 c0       	rjmp	.+40     	; 0x37c2 <H_LCD_Void_LCDWriteString+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379a:	6f 81       	ldd	r22, Y+7	; 0x07
    379c:	78 85       	ldd	r23, Y+8	; 0x08
    379e:	89 85       	ldd	r24, Y+9	; 0x09
    37a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	9e 83       	std	Y+6, r25	; 0x06
    37ac:	8d 83       	std	Y+5, r24	; 0x05
    37ae:	8d 81       	ldd	r24, Y+5	; 0x05
    37b0:	9e 81       	ldd	r25, Y+6	; 0x06
    37b2:	9a 83       	std	Y+2, r25	; 0x02
    37b4:	89 83       	std	Y+1, r24	; 0x01
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	f1 f7       	brne	.-4      	; 0x37ba <H_LCD_Void_LCDWriteString+0x12a>
    37be:	9a 83       	std	Y+2, r25	; 0x02
    37c0:	89 83       	std	Y+1, r24	; 0x01
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_Ptr[Local_u8_Counter]);
	Local_u8_Counter++;
	}
	_delay_ms(5);
}
    37c2:	61 96       	adiw	r28, 0x11	; 17
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	de bf       	out	0x3e, r29	; 62
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	cd bf       	out	0x3d, r28	; 61
    37ce:	cf 91       	pop	r28
    37d0:	df 91       	pop	r29
    37d2:	08 95       	ret

000037d4 <H_LCD_Void_LCDWriteNumber>:
void H_LCD_Void_LCDWriteNumber(f64 Local_f64_Number)
{
    37d4:	0f 93       	push	r16
    37d6:	1f 93       	push	r17
    37d8:	df 93       	push	r29
    37da:	cf 93       	push	r28
    37dc:	cd b7       	in	r28, 0x3d	; 61
    37de:	de b7       	in	r29, 0x3e	; 62
    37e0:	6d 97       	sbiw	r28, 0x1d	; 29
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	f8 94       	cli
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	cd bf       	out	0x3d, r28	; 61
    37ec:	6a 8f       	std	Y+26, r22	; 0x1a
    37ee:	7b 8f       	std	Y+27, r23	; 0x1b
    37f0:	8c 8f       	std	Y+28, r24	; 0x1c
    37f2:	9d 8f       	std	Y+29, r25	; 0x1d
	u8 Local_u8_IntArr[10] = {0};
    37f4:	8a e0       	ldi	r24, 0x0A	; 10
    37f6:	fe 01       	movw	r30, r28
    37f8:	3b 96       	adiw	r30, 0x0b	; 11
    37fa:	df 01       	movw	r26, r30
    37fc:	98 2f       	mov	r25, r24
    37fe:	1d 92       	st	X+, r1
    3800:	9a 95       	dec	r25
    3802:	e9 f7       	brne	.-6      	; 0x37fe <H_LCD_Void_LCDWriteNumber+0x2a>
	u8 Local_u8_FloatArr[5] = {0};
    3804:	85 e0       	ldi	r24, 0x05	; 5
    3806:	fe 01       	movw	r30, r28
    3808:	75 96       	adiw	r30, 0x15	; 21
    380a:	df 01       	movw	r26, r30
    380c:	98 2f       	mov	r25, r24
    380e:	1d 92       	st	X+, r1
    3810:	9a 95       	dec	r25
    3812:	e9 f7       	brne	.-6      	; 0x380e <H_LCD_Void_LCDWriteNumber+0x3a>
	s8 Local_s8_Counter1 = 0;
    3814:	1a 86       	std	Y+10, r1	; 0x0a
	s8 Local_s8_Counter2 = 0;
    3816:	19 86       	std	Y+9, r1	; 0x09
	f64 Local_f64_FloatSector = 0;
    3818:	80 e0       	ldi	r24, 0x00	; 0
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	a0 e0       	ldi	r26, 0x00	; 0
    381e:	b0 e0       	ldi	r27, 0x00	; 0
    3820:	8d 83       	std	Y+5, r24	; 0x05
    3822:	9e 83       	std	Y+6, r25	; 0x06
    3824:	af 83       	std	Y+7, r26	; 0x07
    3826:	b8 87       	std	Y+8, r27	; 0x08
	s32 Local_s32_IntSector = 0;
    3828:	19 82       	std	Y+1, r1	; 0x01
    382a:	1a 82       	std	Y+2, r1	; 0x02
    382c:	1b 82       	std	Y+3, r1	; 0x03
    382e:	1c 82       	std	Y+4, r1	; 0x04
	if(Local_f64_Number == 0)H_LCD_Void_LCDWriteCharacter(48);
    3830:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3832:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3834:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3836:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e0       	ldi	r20, 0x00	; 0
    383e:	50 e0       	ldi	r21, 0x00	; 0
    3840:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3844:	88 23       	and	r24, r24
    3846:	19 f4       	brne	.+6      	; 0x384e <H_LCD_Void_LCDWriteNumber+0x7a>
    3848:	80 e3       	ldi	r24, 0x30	; 48
    384a:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <H_LCD_Void_LCDWriteCharacter>
	if(Local_f64_Number < 0)
    384e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3850:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3852:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3854:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	40 e0       	ldi	r20, 0x00	; 0
    385c:	50 e0       	ldi	r21, 0x00	; 0
    385e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3862:	88 23       	and	r24, r24
    3864:	64 f4       	brge	.+24     	; 0x387e <H_LCD_Void_LCDWriteNumber+0xaa>
	{
		H_LCD_Void_LCDWriteCharacter('-');
    3866:	8d e2       	ldi	r24, 0x2D	; 45
    3868:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <H_LCD_Void_LCDWriteCharacter>
		Local_f64_Number = Local_f64_Number * (-1);
    386c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    386e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3870:	ac 8d       	ldd	r26, Y+28	; 0x1c
    3872:	bd 8d       	ldd	r27, Y+29	; 0x1d
    3874:	b0 58       	subi	r27, 0x80	; 128
    3876:	8a 8f       	std	Y+26, r24	; 0x1a
    3878:	9b 8f       	std	Y+27, r25	; 0x1b
    387a:	ac 8f       	std	Y+28, r26	; 0x1c
    387c:	bd 8f       	std	Y+29, r27	; 0x1d
	}
	Local_s32_IntSector = Local_f64_Number;
    387e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3880:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3882:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3884:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3886:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    388a:	dc 01       	movw	r26, r24
    388c:	cb 01       	movw	r24, r22
    388e:	89 83       	std	Y+1, r24	; 0x01
    3890:	9a 83       	std	Y+2, r25	; 0x02
    3892:	ab 83       	std	Y+3, r26	; 0x03
    3894:	bc 83       	std	Y+4, r27	; 0x04
	Local_f64_FloatSector = Local_f64_Number - Local_s32_IntSector;
    3896:	69 81       	ldd	r22, Y+1	; 0x01
    3898:	7a 81       	ldd	r23, Y+2	; 0x02
    389a:	8b 81       	ldd	r24, Y+3	; 0x03
    389c:	9c 81       	ldd	r25, Y+4	; 0x04
    389e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    38a2:	9b 01       	movw	r18, r22
    38a4:	ac 01       	movw	r20, r24
    38a6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    38a8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    38aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38ae:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	8d 83       	std	Y+5, r24	; 0x05
    38b8:	9e 83       	std	Y+6, r25	; 0x06
    38ba:	af 83       	std	Y+7, r26	; 0x07
    38bc:	b8 87       	std	Y+8, r27	; 0x08
    38be:	2f c0       	rjmp	.+94     	; 0x391e <H_LCD_Void_LCDWriteNumber+0x14a>

	/*************************************EXTRACTING_INTEGER_SECTION************************************/
	while(Local_s32_IntSector)
	{
	Local_u8_IntArr[Local_s8_Counter1] = Local_s32_IntSector % 10;
    38c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    38c2:	08 2f       	mov	r16, r24
    38c4:	11 27       	eor	r17, r17
    38c6:	07 fd       	sbrc	r16, 7
    38c8:	10 95       	com	r17
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	9a 81       	ldd	r25, Y+2	; 0x02
    38ce:	ab 81       	ldd	r26, Y+3	; 0x03
    38d0:	bc 81       	ldd	r27, Y+4	; 0x04
    38d2:	2a e0       	ldi	r18, 0x0A	; 10
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	40 e0       	ldi	r20, 0x00	; 0
    38d8:	50 e0       	ldi	r21, 0x00	; 0
    38da:	bc 01       	movw	r22, r24
    38dc:	cd 01       	movw	r24, r26
    38de:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <__divmodsi4>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	28 2f       	mov	r18, r24
    38e8:	ce 01       	movw	r24, r28
    38ea:	0b 96       	adiw	r24, 0x0b	; 11
    38ec:	fc 01       	movw	r30, r24
    38ee:	e0 0f       	add	r30, r16
    38f0:	f1 1f       	adc	r31, r17
    38f2:	20 83       	st	Z, r18
	Local_s32_IntSector = Local_s32_IntSector / 10;
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	9a 81       	ldd	r25, Y+2	; 0x02
    38f8:	ab 81       	ldd	r26, Y+3	; 0x03
    38fa:	bc 81       	ldd	r27, Y+4	; 0x04
    38fc:	2a e0       	ldi	r18, 0x0A	; 10
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	40 e0       	ldi	r20, 0x00	; 0
    3902:	50 e0       	ldi	r21, 0x00	; 0
    3904:	bc 01       	movw	r22, r24
    3906:	cd 01       	movw	r24, r26
    3908:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <__divmodsi4>
    390c:	da 01       	movw	r26, r20
    390e:	c9 01       	movw	r24, r18
    3910:	89 83       	std	Y+1, r24	; 0x01
    3912:	9a 83       	std	Y+2, r25	; 0x02
    3914:	ab 83       	std	Y+3, r26	; 0x03
    3916:	bc 83       	std	Y+4, r27	; 0x04
	Local_s8_Counter1++;
    3918:	8a 85       	ldd	r24, Y+10	; 0x0a
    391a:	8f 5f       	subi	r24, 0xFF	; 255
    391c:	8a 87       	std	Y+10, r24	; 0x0a
	}
	Local_s32_IntSector = Local_f64_Number;
	Local_f64_FloatSector = Local_f64_Number - Local_s32_IntSector;

	/*************************************EXTRACTING_INTEGER_SECTION************************************/
	while(Local_s32_IntSector)
    391e:	89 81       	ldd	r24, Y+1	; 0x01
    3920:	9a 81       	ldd	r25, Y+2	; 0x02
    3922:	ab 81       	ldd	r26, Y+3	; 0x03
    3924:	bc 81       	ldd	r27, Y+4	; 0x04
    3926:	00 97       	sbiw	r24, 0x00	; 0
    3928:	a1 05       	cpc	r26, r1
    392a:	b1 05       	cpc	r27, r1
    392c:	49 f6       	brne	.-110    	; 0x38c0 <H_LCD_Void_LCDWriteNumber+0xec>
	{
	Local_u8_IntArr[Local_s8_Counter1] = Local_s32_IntSector % 10;
	Local_s32_IntSector = Local_s32_IntSector / 10;
	Local_s8_Counter1++;
	}
	Local_s8_Counter1--;
    392e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3930:	81 50       	subi	r24, 0x01	; 1
    3932:	8a 87       	std	Y+10, r24	; 0x0a
    3934:	47 c0       	rjmp	.+142    	; 0x39c4 <H_LCD_Void_LCDWriteNumber+0x1f0>
	/*************************************EXTRACTING_FLOAT_SECTION************************************/
	while(Local_s8_Counter2 < 5)
	{

	Local_f64_FloatSector = Local_f64_FloatSector * 10;
    3936:	6d 81       	ldd	r22, Y+5	; 0x05
    3938:	7e 81       	ldd	r23, Y+6	; 0x06
    393a:	8f 81       	ldd	r24, Y+7	; 0x07
    393c:	98 85       	ldd	r25, Y+8	; 0x08
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	40 e2       	ldi	r20, 0x20	; 32
    3944:	51 e4       	ldi	r21, 0x41	; 65
    3946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	8d 83       	std	Y+5, r24	; 0x05
    3950:	9e 83       	std	Y+6, r25	; 0x06
    3952:	af 83       	std	Y+7, r26	; 0x07
    3954:	b8 87       	std	Y+8, r27	; 0x08
	Local_u8_FloatArr[Local_s8_Counter2] = Local_f64_FloatSector;
    3956:	89 85       	ldd	r24, Y+9	; 0x09
    3958:	08 2f       	mov	r16, r24
    395a:	11 27       	eor	r17, r17
    395c:	07 fd       	sbrc	r16, 7
    395e:	10 95       	com	r17
    3960:	6d 81       	ldd	r22, Y+5	; 0x05
    3962:	7e 81       	ldd	r23, Y+6	; 0x06
    3964:	8f 81       	ldd	r24, Y+7	; 0x07
    3966:	98 85       	ldd	r25, Y+8	; 0x08
    3968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	28 2f       	mov	r18, r24
    3972:	ce 01       	movw	r24, r28
    3974:	45 96       	adiw	r24, 0x15	; 21
    3976:	fc 01       	movw	r30, r24
    3978:	e0 0f       	add	r30, r16
    397a:	f1 1f       	adc	r31, r17
    397c:	20 83       	st	Z, r18
	Local_s8_Counter2++;
    397e:	89 85       	ldd	r24, Y+9	; 0x09
    3980:	8f 5f       	subi	r24, 0xFF	; 255
    3982:	89 87       	std	Y+9, r24	; 0x09
	Local_f64_FloatSector = (Local_f64_FloatSector - (u8)Local_f64_FloatSector);
    3984:	6d 81       	ldd	r22, Y+5	; 0x05
    3986:	7e 81       	ldd	r23, Y+6	; 0x06
    3988:	8f 81       	ldd	r24, Y+7	; 0x07
    398a:	98 85       	ldd	r25, Y+8	; 0x08
    398c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3990:	dc 01       	movw	r26, r24
    3992:	cb 01       	movw	r24, r22
    3994:	88 2f       	mov	r24, r24
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	aa 27       	eor	r26, r26
    399a:	97 fd       	sbrc	r25, 7
    399c:	a0 95       	com	r26
    399e:	ba 2f       	mov	r27, r26
    39a0:	bc 01       	movw	r22, r24
    39a2:	cd 01       	movw	r24, r26
    39a4:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    39a8:	9b 01       	movw	r18, r22
    39aa:	ac 01       	movw	r20, r24
    39ac:	6d 81       	ldd	r22, Y+5	; 0x05
    39ae:	7e 81       	ldd	r23, Y+6	; 0x06
    39b0:	8f 81       	ldd	r24, Y+7	; 0x07
    39b2:	98 85       	ldd	r25, Y+8	; 0x08
    39b4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	8d 83       	std	Y+5, r24	; 0x05
    39be:	9e 83       	std	Y+6, r25	; 0x06
    39c0:	af 83       	std	Y+7, r26	; 0x07
    39c2:	b8 87       	std	Y+8, r27	; 0x08
	Local_s32_IntSector = Local_s32_IntSector / 10;
	Local_s8_Counter1++;
	}
	Local_s8_Counter1--;
	/*************************************EXTRACTING_FLOAT_SECTION************************************/
	while(Local_s8_Counter2 < 5)
    39c4:	89 85       	ldd	r24, Y+9	; 0x09
    39c6:	85 30       	cpi	r24, 0x05	; 5
    39c8:	0c f4       	brge	.+2      	; 0x39cc <H_LCD_Void_LCDWriteNumber+0x1f8>
    39ca:	b5 cf       	rjmp	.-150    	; 0x3936 <H_LCD_Void_LCDWriteNumber+0x162>
	Local_f64_FloatSector = Local_f64_FloatSector * 10;
	Local_u8_FloatArr[Local_s8_Counter2] = Local_f64_FloatSector;
	Local_s8_Counter2++;
	Local_f64_FloatSector = (Local_f64_FloatSector - (u8)Local_f64_FloatSector);
	}
	Local_s8_Counter2--;
    39cc:	89 85       	ldd	r24, Y+9	; 0x09
    39ce:	81 50       	subi	r24, 0x01	; 1
    39d0:	89 87       	std	Y+9, r24	; 0x09
    39d2:	11 c0       	rjmp	.+34     	; 0x39f6 <H_LCD_Void_LCDWriteNumber+0x222>

	/*************************************WRITING_INTEGER_SECTION************************************/
	while(Local_s8_Counter1 >= 0 )
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_IntArr[Local_s8_Counter1] + 48);
    39d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    39d6:	28 2f       	mov	r18, r24
    39d8:	33 27       	eor	r19, r19
    39da:	27 fd       	sbrc	r18, 7
    39dc:	30 95       	com	r19
    39de:	ce 01       	movw	r24, r28
    39e0:	0b 96       	adiw	r24, 0x0b	; 11
    39e2:	fc 01       	movw	r30, r24
    39e4:	e2 0f       	add	r30, r18
    39e6:	f3 1f       	adc	r31, r19
    39e8:	80 81       	ld	r24, Z
    39ea:	80 5d       	subi	r24, 0xD0	; 208
    39ec:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <H_LCD_Void_LCDWriteCharacter>
	Local_s8_Counter1--;
    39f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    39f2:	81 50       	subi	r24, 0x01	; 1
    39f4:	8a 87       	std	Y+10, r24	; 0x0a
	Local_f64_FloatSector = (Local_f64_FloatSector - (u8)Local_f64_FloatSector);
	}
	Local_s8_Counter2--;

	/*************************************WRITING_INTEGER_SECTION************************************/
	while(Local_s8_Counter1 >= 0 )
    39f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    39f8:	88 23       	and	r24, r24
    39fa:	64 f7       	brge	.-40     	; 0x39d4 <H_LCD_Void_LCDWriteNumber+0x200>
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_IntArr[Local_s8_Counter1] + 48);
	Local_s8_Counter1--;
	}
	/*************************************WRITING_FLOAT_SECTION************************************/
	H_LCD_Void_LCDWriteCharacter('.');
    39fc:	8e e2       	ldi	r24, 0x2E	; 46
    39fe:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <H_LCD_Void_LCDWriteCharacter>
	Local_s8_Counter2 = 0;
    3a02:	19 86       	std	Y+9, r1	; 0x09
    3a04:	11 c0       	rjmp	.+34     	; 0x3a28 <H_LCD_Void_LCDWriteNumber+0x254>
	while(Local_s8_Counter2 < 4 )
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_FloatArr[Local_s8_Counter2] + 48);
    3a06:	89 85       	ldd	r24, Y+9	; 0x09
    3a08:	28 2f       	mov	r18, r24
    3a0a:	33 27       	eor	r19, r19
    3a0c:	27 fd       	sbrc	r18, 7
    3a0e:	30 95       	com	r19
    3a10:	ce 01       	movw	r24, r28
    3a12:	45 96       	adiw	r24, 0x15	; 21
    3a14:	fc 01       	movw	r30, r24
    3a16:	e2 0f       	add	r30, r18
    3a18:	f3 1f       	adc	r31, r19
    3a1a:	80 81       	ld	r24, Z
    3a1c:	80 5d       	subi	r24, 0xD0	; 208
    3a1e:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <H_LCD_Void_LCDWriteCharacter>
	Local_s8_Counter2++;
    3a22:	89 85       	ldd	r24, Y+9	; 0x09
    3a24:	8f 5f       	subi	r24, 0xFF	; 255
    3a26:	89 87       	std	Y+9, r24	; 0x09
	Local_s8_Counter1--;
	}
	/*************************************WRITING_FLOAT_SECTION************************************/
	H_LCD_Void_LCDWriteCharacter('.');
	Local_s8_Counter2 = 0;
	while(Local_s8_Counter2 < 4 )
    3a28:	89 85       	ldd	r24, Y+9	; 0x09
    3a2a:	84 30       	cpi	r24, 0x04	; 4
    3a2c:	64 f3       	brlt	.-40     	; 0x3a06 <H_LCD_Void_LCDWriteNumber+0x232>
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_FloatArr[Local_s8_Counter2] + 48);
	Local_s8_Counter2++;
	}
}
    3a2e:	6d 96       	adiw	r28, 0x1d	; 29
    3a30:	0f b6       	in	r0, 0x3f	; 63
    3a32:	f8 94       	cli
    3a34:	de bf       	out	0x3e, r29	; 62
    3a36:	0f be       	out	0x3f, r0	; 63
    3a38:	cd bf       	out	0x3d, r28	; 61
    3a3a:	cf 91       	pop	r28
    3a3c:	df 91       	pop	r29
    3a3e:	1f 91       	pop	r17
    3a40:	0f 91       	pop	r16
    3a42:	08 95       	ret

00003a44 <H_LCD_Void_LCDGoto>:


void H_LCD_Void_LCDGoto(u8 Local_u8_Row,u8 Local_u8_Col)
{
    3a44:	df 93       	push	r29
    3a46:	cf 93       	push	r28
    3a48:	00 d0       	rcall	.+0      	; 0x3a4a <H_LCD_Void_LCDGoto+0x6>
    3a4a:	00 d0       	rcall	.+0      	; 0x3a4c <H_LCD_Void_LCDGoto+0x8>
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
    3a50:	8b 83       	std	Y+3, r24	; 0x03
    3a52:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8_Arr[2] = {LCD_1st_Row_command , LCD_2nd_Row_command};
    3a54:	80 e8       	ldi	r24, 0x80	; 128
    3a56:	89 83       	std	Y+1, r24	; 0x01
    3a58:	80 ec       	ldi	r24, 0xC0	; 192
    3a5a:	8a 83       	std	Y+2, r24	; 0x02
	H_LCD_Void_LCDWriteCommand(Local_u8_Arr[Local_u8_Row] + Local_u8_Col);
    3a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5e:	28 2f       	mov	r18, r24
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	ce 01       	movw	r24, r28
    3a64:	01 96       	adiw	r24, 0x01	; 1
    3a66:	fc 01       	movw	r30, r24
    3a68:	e2 0f       	add	r30, r18
    3a6a:	f3 1f       	adc	r31, r19
    3a6c:	90 81       	ld	r25, Z
    3a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a70:	89 0f       	add	r24, r25
    3a72:	0e 94 39 19 	call	0x3272	; 0x3272 <H_LCD_Void_LCDWriteCommand>
}
    3a76:	0f 90       	pop	r0
    3a78:	0f 90       	pop	r0
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	08 95       	ret

00003a84 <H_LCD_Void_LCDClr>:


void H_LCD_Void_LCDClr(void)
{
    3a84:	df 93       	push	r29
    3a86:	cf 93       	push	r28
    3a88:	cd b7       	in	r28, 0x3d	; 61
    3a8a:	de b7       	in	r29, 0x3e	; 62
    3a8c:	2e 97       	sbiw	r28, 0x0e	; 14
    3a8e:	0f b6       	in	r0, 0x3f	; 63
    3a90:	f8 94       	cli
    3a92:	de bf       	out	0x3e, r29	; 62
    3a94:	0f be       	out	0x3f, r0	; 63
    3a96:	cd bf       	out	0x3d, r28	; 61
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR_SCREEN);
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	0e 94 39 19 	call	0x3272	; 0x3272 <H_LCD_Void_LCDWriteCommand>
    3a9e:	80 e0       	ldi	r24, 0x00	; 0
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	a0 ea       	ldi	r26, 0xA0	; 160
    3aa4:	b0 e4       	ldi	r27, 0x40	; 64
    3aa6:	8b 87       	std	Y+11, r24	; 0x0b
    3aa8:	9c 87       	std	Y+12, r25	; 0x0c
    3aaa:	ad 87       	std	Y+13, r26	; 0x0d
    3aac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aae:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ab0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	4a e7       	ldi	r20, 0x7A	; 122
    3abc:	55 e4       	ldi	r21, 0x45	; 69
    3abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	8f 83       	std	Y+7, r24	; 0x07
    3ac8:	98 87       	std	Y+8, r25	; 0x08
    3aca:	a9 87       	std	Y+9, r26	; 0x09
    3acc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ace:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad0:	78 85       	ldd	r23, Y+8	; 0x08
    3ad2:	89 85       	ldd	r24, Y+9	; 0x09
    3ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ad6:	20 e0       	ldi	r18, 0x00	; 0
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	40 e8       	ldi	r20, 0x80	; 128
    3adc:	5f e3       	ldi	r21, 0x3F	; 63
    3ade:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3ae2:	88 23       	and	r24, r24
    3ae4:	2c f4       	brge	.+10     	; 0x3af0 <H_LCD_Void_LCDClr+0x6c>
		__ticks = 1;
    3ae6:	81 e0       	ldi	r24, 0x01	; 1
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	9e 83       	std	Y+6, r25	; 0x06
    3aec:	8d 83       	std	Y+5, r24	; 0x05
    3aee:	3f c0       	rjmp	.+126    	; 0x3b6e <H_LCD_Void_LCDClr+0xea>
	else if (__tmp > 65535)
    3af0:	6f 81       	ldd	r22, Y+7	; 0x07
    3af2:	78 85       	ldd	r23, Y+8	; 0x08
    3af4:	89 85       	ldd	r24, Y+9	; 0x09
    3af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	3f ef       	ldi	r19, 0xFF	; 255
    3afc:	4f e7       	ldi	r20, 0x7F	; 127
    3afe:	57 e4       	ldi	r21, 0x47	; 71
    3b00:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b04:	18 16       	cp	r1, r24
    3b06:	4c f5       	brge	.+82     	; 0x3b5a <H_LCD_Void_LCDClr+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	40 e2       	ldi	r20, 0x20	; 32
    3b16:	51 e4       	ldi	r21, 0x41	; 65
    3b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	bc 01       	movw	r22, r24
    3b22:	cd 01       	movw	r24, r26
    3b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	9e 83       	std	Y+6, r25	; 0x06
    3b2e:	8d 83       	std	Y+5, r24	; 0x05
    3b30:	0f c0       	rjmp	.+30     	; 0x3b50 <H_LCD_Void_LCDClr+0xcc>
    3b32:	80 e9       	ldi	r24, 0x90	; 144
    3b34:	91 e0       	ldi	r25, 0x01	; 1
    3b36:	9c 83       	std	Y+4, r25	; 0x04
    3b38:	8b 83       	std	Y+3, r24	; 0x03
    3b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b3e:	01 97       	sbiw	r24, 0x01	; 1
    3b40:	f1 f7       	brne	.-4      	; 0x3b3e <H_LCD_Void_LCDClr+0xba>
    3b42:	9c 83       	std	Y+4, r25	; 0x04
    3b44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b46:	8d 81       	ldd	r24, Y+5	; 0x05
    3b48:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4a:	01 97       	sbiw	r24, 0x01	; 1
    3b4c:	9e 83       	std	Y+6, r25	; 0x06
    3b4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b50:	8d 81       	ldd	r24, Y+5	; 0x05
    3b52:	9e 81       	ldd	r25, Y+6	; 0x06
    3b54:	00 97       	sbiw	r24, 0x00	; 0
    3b56:	69 f7       	brne	.-38     	; 0x3b32 <H_LCD_Void_LCDClr+0xae>
    3b58:	14 c0       	rjmp	.+40     	; 0x3b82 <H_LCD_Void_LCDClr+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b5c:	78 85       	ldd	r23, Y+8	; 0x08
    3b5e:	89 85       	ldd	r24, Y+9	; 0x09
    3b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b66:	dc 01       	movw	r26, r24
    3b68:	cb 01       	movw	r24, r22
    3b6a:	9e 83       	std	Y+6, r25	; 0x06
    3b6c:	8d 83       	std	Y+5, r24	; 0x05
    3b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b70:	9e 81       	ldd	r25, Y+6	; 0x06
    3b72:	9a 83       	std	Y+2, r25	; 0x02
    3b74:	89 83       	std	Y+1, r24	; 0x01
    3b76:	89 81       	ldd	r24, Y+1	; 0x01
    3b78:	9a 81       	ldd	r25, Y+2	; 0x02
    3b7a:	01 97       	sbiw	r24, 0x01	; 1
    3b7c:	f1 f7       	brne	.-4      	; 0x3b7a <H_LCD_Void_LCDClr+0xf6>
    3b7e:	9a 83       	std	Y+2, r25	; 0x02
    3b80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    3b82:	2e 96       	adiw	r28, 0x0e	; 14
    3b84:	0f b6       	in	r0, 0x3f	; 63
    3b86:	f8 94       	cli
    3b88:	de bf       	out	0x3e, r29	; 62
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	cd bf       	out	0x3d, r28	; 61
    3b8e:	cf 91       	pop	r28
    3b90:	df 91       	pop	r29
    3b92:	08 95       	ret

00003b94 <H_KeyPad_Void_KeyPadInit>:
 */

#include"KeyPad.h"

void H_KeyPad_Void_KeyPadInit(void)
{
    3b94:	df 93       	push	r29
    3b96:	cf 93       	push	r28
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
	M_Dio_Void_PinMode(KEYPAD_R0_PIN,OUTPUT);
    3b9c:	88 e1       	ldi	r24, 0x18	; 24
    3b9e:	61 e0       	ldi	r22, 0x01	; 1
    3ba0:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_R1_PIN,OUTPUT);
    3ba4:	89 e1       	ldi	r24, 0x19	; 25
    3ba6:	61 e0       	ldi	r22, 0x01	; 1
    3ba8:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_R2_PIN,OUTPUT);
    3bac:	8a e1       	ldi	r24, 0x1A	; 26
    3bae:	61 e0       	ldi	r22, 0x01	; 1
    3bb0:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_R3_PIN,OUTPUT);
    3bb4:	8b e1       	ldi	r24, 0x1B	; 27
    3bb6:	61 e0       	ldi	r22, 0x01	; 1
    3bb8:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>

	M_Dio_Void_PinMode(KEYPAD_C0_PIN,INPUT);
    3bbc:	8a e2       	ldi	r24, 0x2A	; 42
    3bbe:	60 e0       	ldi	r22, 0x00	; 0
    3bc0:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_C1_PIN,INPUT);
    3bc4:	8b e2       	ldi	r24, 0x2B	; 43
    3bc6:	60 e0       	ldi	r22, 0x00	; 0
    3bc8:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_C2_PIN,INPUT);
    3bcc:	8c e2       	ldi	r24, 0x2C	; 44
    3bce:	60 e0       	ldi	r22, 0x00	; 0
    3bd0:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_C3_PIN,INPUT);
    3bd4:	8d e2       	ldi	r24, 0x2D	; 45
    3bd6:	60 e0       	ldi	r22, 0x00	; 0
    3bd8:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>

	M_Dio_Void_PinWrite(KEYPAD_R0_PIN,HIGH);
    3bdc:	88 e1       	ldi	r24, 0x18	; 24
    3bde:	61 e0       	ldi	r22, 0x01	; 1
    3be0:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(KEYPAD_R1_PIN,HIGH);
    3be4:	89 e1       	ldi	r24, 0x19	; 25
    3be6:	61 e0       	ldi	r22, 0x01	; 1
    3be8:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(KEYPAD_R2_PIN,HIGH);
    3bec:	8a e1       	ldi	r24, 0x1A	; 26
    3bee:	61 e0       	ldi	r22, 0x01	; 1
    3bf0:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(KEYPAD_R3_PIN,HIGH);
    3bf4:	8b e1       	ldi	r24, 0x1B	; 27
    3bf6:	61 e0       	ldi	r22, 0x01	; 1
    3bf8:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
}
    3bfc:	cf 91       	pop	r28
    3bfe:	df 91       	pop	r29
    3c00:	08 95       	ret

00003c02 <H_KeyPad_U8_KeyPadRead>:
u8 H_KeyPad_U8_KeyPadRead(void)
{
    3c02:	df 93       	push	r29
    3c04:	cf 93       	push	r28
    3c06:	cd b7       	in	r28, 0x3d	; 61
    3c08:	de b7       	in	r29, 0x3e	; 62
    3c0a:	a6 97       	sbiw	r28, 0x26	; 38
    3c0c:	0f b6       	in	r0, 0x3f	; 63
    3c0e:	f8 94       	cli
    3c10:	de bf       	out	0x3e, r29	; 62
    3c12:	0f be       	out	0x3f, r0	; 63
    3c14:	cd bf       	out	0x3d, r28	; 61
#if KEY_PAD_MODE == CALCULATOR
	u8 Local_u8_Arr [4][4] = {{'1','2','3','+'},
							  {'4','5','6','-'},
	 	 	 	 	 	 	  {'7','8','9','*'},
	 	 	 	 	 	 	  {'.','0','=','/'}};
    3c16:	ce 01       	movw	r24, r28
    3c18:	42 96       	adiw	r24, 0x12	; 18
    3c1a:	9b a3       	std	Y+35, r25	; 0x23
    3c1c:	8a a3       	std	Y+34, r24	; 0x22
    3c1e:	ef e6       	ldi	r30, 0x6F	; 111
    3c20:	f1 e0       	ldi	r31, 0x01	; 1
    3c22:	fd a3       	std	Y+37, r31	; 0x25
    3c24:	ec a3       	std	Y+36, r30	; 0x24
    3c26:	f0 e1       	ldi	r31, 0x10	; 16
    3c28:	fe a3       	std	Y+38, r31	; 0x26
    3c2a:	ec a1       	ldd	r30, Y+36	; 0x24
    3c2c:	fd a1       	ldd	r31, Y+37	; 0x25
    3c2e:	00 80       	ld	r0, Z
    3c30:	8c a1       	ldd	r24, Y+36	; 0x24
    3c32:	9d a1       	ldd	r25, Y+37	; 0x25
    3c34:	01 96       	adiw	r24, 0x01	; 1
    3c36:	9d a3       	std	Y+37, r25	; 0x25
    3c38:	8c a3       	std	Y+36, r24	; 0x24
    3c3a:	ea a1       	ldd	r30, Y+34	; 0x22
    3c3c:	fb a1       	ldd	r31, Y+35	; 0x23
    3c3e:	00 82       	st	Z, r0
    3c40:	8a a1       	ldd	r24, Y+34	; 0x22
    3c42:	9b a1       	ldd	r25, Y+35	; 0x23
    3c44:	01 96       	adiw	r24, 0x01	; 1
    3c46:	9b a3       	std	Y+35, r25	; 0x23
    3c48:	8a a3       	std	Y+34, r24	; 0x22
    3c4a:	9e a1       	ldd	r25, Y+38	; 0x26
    3c4c:	91 50       	subi	r25, 0x01	; 1
    3c4e:	9e a3       	std	Y+38, r25	; 0x26
    3c50:	ee a1       	ldd	r30, Y+38	; 0x26
    3c52:	ee 23       	and	r30, r30
    3c54:	51 f7       	brne	.-44     	; 0x3c2a <H_KeyPad_U8_KeyPadRead+0x28>
	u8 Local_u8_Arr [4][4] = {{'1','2','3','A'},
							  {'4','5','6','B'},
	 	 	 	 	 	 	  {'7','8','9','C'},
	 	 	 	 	 	 	  {'*','0','#','D'}};
#endif
	u8 Local_u8_ColCounter = 0;
    3c56:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8_RowCounter = 0;
    3c58:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8_Reading = 0;
    3c5a:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_u8_RowCounter = KEYPAD_R0_PIN ; Local_u8_RowCounter <= KEYPAD_R3_PIN ; Local_u8_RowCounter++)
    3c5c:	88 e1       	ldi	r24, 0x18	; 24
    3c5e:	88 8b       	std	Y+16, r24	; 0x10
    3c60:	b1 c0       	rjmp	.+354    	; 0x3dc4 <H_KeyPad_U8_KeyPadRead+0x1c2>
	{
		M_Dio_Void_PinWrite(Local_u8_RowCounter,LOW);
    3c62:	88 89       	ldd	r24, Y+16	; 0x10
    3c64:	60 e0       	ldi	r22, 0x00	; 0
    3c66:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
		for(Local_u8_ColCounter = KEYPAD_C0_PIN ; Local_u8_ColCounter <= KEYPAD_C3_PIN ; Local_u8_ColCounter++ )
    3c6a:	8a e2       	ldi	r24, 0x2A	; 42
    3c6c:	89 8b       	std	Y+17, r24	; 0x11
    3c6e:	9f c0       	rjmp	.+318    	; 0x3dae <H_KeyPad_U8_KeyPadRead+0x1ac>
		{
			if(M_Dio_U8_PinRead(Local_u8_ColCounter) == PRESSED)
    3c70:	89 89       	ldd	r24, Y+17	; 0x11
    3c72:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    3c76:	88 23       	and	r24, r24
    3c78:	09 f0       	breq	.+2      	; 0x3c7c <H_KeyPad_U8_KeyPadRead+0x7a>
    3c7a:	96 c0       	rjmp	.+300    	; 0x3da8 <H_KeyPad_U8_KeyPadRead+0x1a6>
    3c7c:	80 e0       	ldi	r24, 0x00	; 0
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	a8 ec       	ldi	r26, 0xC8	; 200
    3c82:	b2 e4       	ldi	r27, 0x42	; 66
    3c84:	8b 87       	std	Y+11, r24	; 0x0b
    3c86:	9c 87       	std	Y+12, r25	; 0x0c
    3c88:	ad 87       	std	Y+13, r26	; 0x0d
    3c8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	4a e7       	ldi	r20, 0x7A	; 122
    3c9a:	55 e4       	ldi	r21, 0x45	; 69
    3c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	cb 01       	movw	r24, r22
    3ca4:	8f 83       	std	Y+7, r24	; 0x07
    3ca6:	98 87       	std	Y+8, r25	; 0x08
    3ca8:	a9 87       	std	Y+9, r26	; 0x09
    3caa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cac:	6f 81       	ldd	r22, Y+7	; 0x07
    3cae:	78 85       	ldd	r23, Y+8	; 0x08
    3cb0:	89 85       	ldd	r24, Y+9	; 0x09
    3cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	40 e8       	ldi	r20, 0x80	; 128
    3cba:	5f e3       	ldi	r21, 0x3F	; 63
    3cbc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3cc0:	88 23       	and	r24, r24
    3cc2:	2c f4       	brge	.+10     	; 0x3cce <H_KeyPad_U8_KeyPadRead+0xcc>
		__ticks = 1;
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	9e 83       	std	Y+6, r25	; 0x06
    3cca:	8d 83       	std	Y+5, r24	; 0x05
    3ccc:	3f c0       	rjmp	.+126    	; 0x3d4c <H_KeyPad_U8_KeyPadRead+0x14a>
	else if (__tmp > 65535)
    3cce:	6f 81       	ldd	r22, Y+7	; 0x07
    3cd0:	78 85       	ldd	r23, Y+8	; 0x08
    3cd2:	89 85       	ldd	r24, Y+9	; 0x09
    3cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	3f ef       	ldi	r19, 0xFF	; 255
    3cda:	4f e7       	ldi	r20, 0x7F	; 127
    3cdc:	57 e4       	ldi	r21, 0x47	; 71
    3cde:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3ce2:	18 16       	cp	r1, r24
    3ce4:	4c f5       	brge	.+82     	; 0x3d38 <H_KeyPad_U8_KeyPadRead+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	40 e2       	ldi	r20, 0x20	; 32
    3cf4:	51 e4       	ldi	r21, 0x41	; 65
    3cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	bc 01       	movw	r22, r24
    3d00:	cd 01       	movw	r24, r26
    3d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	9e 83       	std	Y+6, r25	; 0x06
    3d0c:	8d 83       	std	Y+5, r24	; 0x05
    3d0e:	0f c0       	rjmp	.+30     	; 0x3d2e <H_KeyPad_U8_KeyPadRead+0x12c>
    3d10:	80 e9       	ldi	r24, 0x90	; 144
    3d12:	91 e0       	ldi	r25, 0x01	; 1
    3d14:	9c 83       	std	Y+4, r25	; 0x04
    3d16:	8b 83       	std	Y+3, r24	; 0x03
    3d18:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d1c:	01 97       	sbiw	r24, 0x01	; 1
    3d1e:	f1 f7       	brne	.-4      	; 0x3d1c <H_KeyPad_U8_KeyPadRead+0x11a>
    3d20:	9c 83       	std	Y+4, r25	; 0x04
    3d22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d24:	8d 81       	ldd	r24, Y+5	; 0x05
    3d26:	9e 81       	ldd	r25, Y+6	; 0x06
    3d28:	01 97       	sbiw	r24, 0x01	; 1
    3d2a:	9e 83       	std	Y+6, r25	; 0x06
    3d2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d30:	9e 81       	ldd	r25, Y+6	; 0x06
    3d32:	00 97       	sbiw	r24, 0x00	; 0
    3d34:	69 f7       	brne	.-38     	; 0x3d10 <H_KeyPad_U8_KeyPadRead+0x10e>
    3d36:	14 c0       	rjmp	.+40     	; 0x3d60 <H_KeyPad_U8_KeyPadRead+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d38:	6f 81       	ldd	r22, Y+7	; 0x07
    3d3a:	78 85       	ldd	r23, Y+8	; 0x08
    3d3c:	89 85       	ldd	r24, Y+9	; 0x09
    3d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d44:	dc 01       	movw	r26, r24
    3d46:	cb 01       	movw	r24, r22
    3d48:	9e 83       	std	Y+6, r25	; 0x06
    3d4a:	8d 83       	std	Y+5, r24	; 0x05
    3d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d50:	9a 83       	std	Y+2, r25	; 0x02
    3d52:	89 83       	std	Y+1, r24	; 0x01
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	9a 81       	ldd	r25, Y+2	; 0x02
    3d58:	01 97       	sbiw	r24, 0x01	; 1
    3d5a:	f1 f7       	brne	.-4      	; 0x3d58 <H_KeyPad_U8_KeyPadRead+0x156>
    3d5c:	9a 83       	std	Y+2, r25	; 0x02
    3d5e:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
				if(M_Dio_U8_PinRead(Local_u8_ColCounter) == PRESSED)
    3d60:	89 89       	ldd	r24, Y+17	; 0x11
    3d62:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    3d66:	88 23       	and	r24, r24
    3d68:	f9 f4       	brne	.+62     	; 0x3da8 <H_KeyPad_U8_KeyPadRead+0x1a6>
				{
					while(M_Dio_U8_PinRead(Local_u8_ColCounter) == PRESSED);
    3d6a:	89 89       	ldd	r24, Y+17	; 0x11
    3d6c:	0e 94 bf 0a 	call	0x157e	; 0x157e <M_Dio_U8_PinRead>
    3d70:	88 23       	and	r24, r24
    3d72:	d9 f3       	breq	.-10     	; 0x3d6a <H_KeyPad_U8_KeyPadRead+0x168>
					Local_u8_Reading = Local_u8_Arr[Local_u8_RowCounter - KEYPAD_R0_PIN][Local_u8_ColCounter -KEYPAD_C0_PIN ];
    3d74:	88 89       	ldd	r24, Y+16	; 0x10
    3d76:	88 2f       	mov	r24, r24
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	9c 01       	movw	r18, r24
    3d7c:	28 51       	subi	r18, 0x18	; 24
    3d7e:	30 40       	sbci	r19, 0x00	; 0
    3d80:	89 89       	ldd	r24, Y+17	; 0x11
    3d82:	88 2f       	mov	r24, r24
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	ac 01       	movw	r20, r24
    3d88:	4a 52       	subi	r20, 0x2A	; 42
    3d8a:	50 40       	sbci	r21, 0x00	; 0
    3d8c:	22 0f       	add	r18, r18
    3d8e:	33 1f       	adc	r19, r19
    3d90:	22 0f       	add	r18, r18
    3d92:	33 1f       	adc	r19, r19
    3d94:	ce 01       	movw	r24, r28
    3d96:	01 96       	adiw	r24, 0x01	; 1
    3d98:	82 0f       	add	r24, r18
    3d9a:	93 1f       	adc	r25, r19
    3d9c:	84 0f       	add	r24, r20
    3d9e:	95 1f       	adc	r25, r21
    3da0:	fc 01       	movw	r30, r24
    3da2:	71 96       	adiw	r30, 0x11	; 17
    3da4:	80 81       	ld	r24, Z
    3da6:	8f 87       	std	Y+15, r24	; 0x0f
	u8 Local_u8_RowCounter = 0;
	u8 Local_u8_Reading = 0;
	for(Local_u8_RowCounter = KEYPAD_R0_PIN ; Local_u8_RowCounter <= KEYPAD_R3_PIN ; Local_u8_RowCounter++)
	{
		M_Dio_Void_PinWrite(Local_u8_RowCounter,LOW);
		for(Local_u8_ColCounter = KEYPAD_C0_PIN ; Local_u8_ColCounter <= KEYPAD_C3_PIN ; Local_u8_ColCounter++ )
    3da8:	89 89       	ldd	r24, Y+17	; 0x11
    3daa:	8f 5f       	subi	r24, 0xFF	; 255
    3dac:	89 8b       	std	Y+17, r24	; 0x11
    3dae:	89 89       	ldd	r24, Y+17	; 0x11
    3db0:	8e 32       	cpi	r24, 0x2E	; 46
    3db2:	08 f4       	brcc	.+2      	; 0x3db6 <H_KeyPad_U8_KeyPadRead+0x1b4>
    3db4:	5d cf       	rjmp	.-326    	; 0x3c70 <H_KeyPad_U8_KeyPadRead+0x6e>
					while(M_Dio_U8_PinRead(Local_u8_ColCounter) == PRESSED);
					Local_u8_Reading = Local_u8_Arr[Local_u8_RowCounter - KEYPAD_R0_PIN][Local_u8_ColCounter -KEYPAD_C0_PIN ];
				}
			}
		}
		M_Dio_Void_PinWrite(Local_u8_RowCounter,HIGH);
    3db6:	88 89       	ldd	r24, Y+16	; 0x10
    3db8:	61 e0       	ldi	r22, 0x01	; 1
    3dba:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
	 	 	 	 	 	 	  {'*','0','#','D'}};
#endif
	u8 Local_u8_ColCounter = 0;
	u8 Local_u8_RowCounter = 0;
	u8 Local_u8_Reading = 0;
	for(Local_u8_RowCounter = KEYPAD_R0_PIN ; Local_u8_RowCounter <= KEYPAD_R3_PIN ; Local_u8_RowCounter++)
    3dbe:	88 89       	ldd	r24, Y+16	; 0x10
    3dc0:	8f 5f       	subi	r24, 0xFF	; 255
    3dc2:	88 8b       	std	Y+16, r24	; 0x10
    3dc4:	88 89       	ldd	r24, Y+16	; 0x10
    3dc6:	8c 31       	cpi	r24, 0x1C	; 28
    3dc8:	08 f4       	brcc	.+2      	; 0x3dcc <H_KeyPad_U8_KeyPadRead+0x1ca>
    3dca:	4b cf       	rjmp	.-362    	; 0x3c62 <H_KeyPad_U8_KeyPadRead+0x60>
				}
			}
		}
		M_Dio_Void_PinWrite(Local_u8_RowCounter,HIGH);
	}
	return Local_u8_Reading;
    3dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3dce:	a6 96       	adiw	r28, 0x26	; 38
    3dd0:	0f b6       	in	r0, 0x3f	; 63
    3dd2:	f8 94       	cli
    3dd4:	de bf       	out	0x3e, r29	; 62
    3dd6:	0f be       	out	0x3f, r0	; 63
    3dd8:	cd bf       	out	0x3d, r28	; 61
    3dda:	cf 91       	pop	r28
    3ddc:	df 91       	pop	r29
    3dde:	08 95       	ret

00003de0 <H_Buzzer_Void_BuzzerInit>:
 */

#include"Buzzer.h"

 void H_Buzzer_Void_BuzzerInit(void)
 {
    3de0:	df 93       	push	r29
    3de2:	cf 93       	push	r28
    3de4:	cd b7       	in	r28, 0x3d	; 61
    3de6:	de b7       	in	r29, 0x3e	; 62
	 M_Dio_Void_PinMode(Buzzer_Pin,OUTPUT);
    3de8:	83 e2       	ldi	r24, 0x23	; 35
    3dea:	61 e0       	ldi	r22, 0x01	; 1
    3dec:	0e 94 07 08 	call	0x100e	; 0x100e <M_Dio_Void_PinMode>
 }
    3df0:	cf 91       	pop	r28
    3df2:	df 91       	pop	r29
    3df4:	08 95       	ret

00003df6 <H_Buzzer_Void_BuzzerOn>:


 void H_Buzzer_Void_BuzzerOn(void)
 {
    3df6:	df 93       	push	r29
    3df8:	cf 93       	push	r28
    3dfa:	cd b7       	in	r28, 0x3d	; 61
    3dfc:	de b7       	in	r29, 0x3e	; 62
	M_Dio_Void_PinWrite(Buzzer_Pin,HIGH);
    3dfe:	83 e2       	ldi	r24, 0x23	; 35
    3e00:	61 e0       	ldi	r22, 0x01	; 1
    3e02:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
 }
    3e06:	cf 91       	pop	r28
    3e08:	df 91       	pop	r29
    3e0a:	08 95       	ret

00003e0c <H_Buzzer_Void_BuzzerOff>:

 void H_Buzzer_Void_BuzzerOff(void)
 {
    3e0c:	df 93       	push	r29
    3e0e:	cf 93       	push	r28
    3e10:	cd b7       	in	r28, 0x3d	; 61
    3e12:	de b7       	in	r29, 0x3e	; 62
	M_Dio_Void_PinWrite(Buzzer_Pin,LOW);
    3e14:	83 e2       	ldi	r24, 0x23	; 35
    3e16:	60 e0       	ldi	r22, 0x00	; 0
    3e18:	0e 94 1d 09 	call	0x123a	; 0x123a <M_Dio_Void_PinWrite>
 }
    3e1c:	cf 91       	pop	r28
    3e1e:	df 91       	pop	r29
    3e20:	08 95       	ret

00003e22 <H_Buzzer_Void_BuzzerOnce>:
 void H_Buzzer_Void_BuzzerOnce(void)
 {
    3e22:	df 93       	push	r29
    3e24:	cf 93       	push	r28
    3e26:	cd b7       	in	r28, 0x3d	; 61
    3e28:	de b7       	in	r29, 0x3e	; 62
    3e2a:	2e 97       	sbiw	r28, 0x0e	; 14
    3e2c:	0f b6       	in	r0, 0x3f	; 63
    3e2e:	f8 94       	cli
    3e30:	de bf       	out	0x3e, r29	; 62
    3e32:	0f be       	out	0x3f, r0	; 63
    3e34:	cd bf       	out	0x3d, r28	; 61
	 H_Buzzer_Void_BuzzerOn();
    3e36:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <H_Buzzer_Void_BuzzerOn>
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	aa ef       	ldi	r26, 0xFA	; 250
    3e40:	b3 e4       	ldi	r27, 0x43	; 67
    3e42:	8b 87       	std	Y+11, r24	; 0x0b
    3e44:	9c 87       	std	Y+12, r25	; 0x0c
    3e46:	ad 87       	std	Y+13, r26	; 0x0d
    3e48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e52:	20 e0       	ldi	r18, 0x00	; 0
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	4a e7       	ldi	r20, 0x7A	; 122
    3e58:	55 e4       	ldi	r21, 0x45	; 69
    3e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e5e:	dc 01       	movw	r26, r24
    3e60:	cb 01       	movw	r24, r22
    3e62:	8f 83       	std	Y+7, r24	; 0x07
    3e64:	98 87       	std	Y+8, r25	; 0x08
    3e66:	a9 87       	std	Y+9, r26	; 0x09
    3e68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e6c:	78 85       	ldd	r23, Y+8	; 0x08
    3e6e:	89 85       	ldd	r24, Y+9	; 0x09
    3e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	40 e8       	ldi	r20, 0x80	; 128
    3e78:	5f e3       	ldi	r21, 0x3F	; 63
    3e7a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e7e:	88 23       	and	r24, r24
    3e80:	2c f4       	brge	.+10     	; 0x3e8c <H_Buzzer_Void_BuzzerOnce+0x6a>
		__ticks = 1;
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	9e 83       	std	Y+6, r25	; 0x06
    3e88:	8d 83       	std	Y+5, r24	; 0x05
    3e8a:	3f c0       	rjmp	.+126    	; 0x3f0a <H_Buzzer_Void_BuzzerOnce+0xe8>
	else if (__tmp > 65535)
    3e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e8e:	78 85       	ldd	r23, Y+8	; 0x08
    3e90:	89 85       	ldd	r24, Y+9	; 0x09
    3e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	3f ef       	ldi	r19, 0xFF	; 255
    3e98:	4f e7       	ldi	r20, 0x7F	; 127
    3e9a:	57 e4       	ldi	r21, 0x47	; 71
    3e9c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3ea0:	18 16       	cp	r1, r24
    3ea2:	4c f5       	brge	.+82     	; 0x3ef6 <H_Buzzer_Void_BuzzerOnce+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eac:	20 e0       	ldi	r18, 0x00	; 0
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	40 e2       	ldi	r20, 0x20	; 32
    3eb2:	51 e4       	ldi	r21, 0x41	; 65
    3eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	bc 01       	movw	r22, r24
    3ebe:	cd 01       	movw	r24, r26
    3ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	9e 83       	std	Y+6, r25	; 0x06
    3eca:	8d 83       	std	Y+5, r24	; 0x05
    3ecc:	0f c0       	rjmp	.+30     	; 0x3eec <H_Buzzer_Void_BuzzerOnce+0xca>
    3ece:	80 e9       	ldi	r24, 0x90	; 144
    3ed0:	91 e0       	ldi	r25, 0x01	; 1
    3ed2:	9c 83       	std	Y+4, r25	; 0x04
    3ed4:	8b 83       	std	Y+3, r24	; 0x03
    3ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eda:	01 97       	sbiw	r24, 0x01	; 1
    3edc:	f1 f7       	brne	.-4      	; 0x3eda <H_Buzzer_Void_BuzzerOnce+0xb8>
    3ede:	9c 83       	std	Y+4, r25	; 0x04
    3ee0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee6:	01 97       	sbiw	r24, 0x01	; 1
    3ee8:	9e 83       	std	Y+6, r25	; 0x06
    3eea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eec:	8d 81       	ldd	r24, Y+5	; 0x05
    3eee:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef0:	00 97       	sbiw	r24, 0x00	; 0
    3ef2:	69 f7       	brne	.-38     	; 0x3ece <H_Buzzer_Void_BuzzerOnce+0xac>
    3ef4:	14 c0       	rjmp	.+40     	; 0x3f1e <H_Buzzer_Void_BuzzerOnce+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ef8:	78 85       	ldd	r23, Y+8	; 0x08
    3efa:	89 85       	ldd	r24, Y+9	; 0x09
    3efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f02:	dc 01       	movw	r26, r24
    3f04:	cb 01       	movw	r24, r22
    3f06:	9e 83       	std	Y+6, r25	; 0x06
    3f08:	8d 83       	std	Y+5, r24	; 0x05
    3f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f0e:	9a 83       	std	Y+2, r25	; 0x02
    3f10:	89 83       	std	Y+1, r24	; 0x01
    3f12:	89 81       	ldd	r24, Y+1	; 0x01
    3f14:	9a 81       	ldd	r25, Y+2	; 0x02
    3f16:	01 97       	sbiw	r24, 0x01	; 1
    3f18:	f1 f7       	brne	.-4      	; 0x3f16 <H_Buzzer_Void_BuzzerOnce+0xf4>
    3f1a:	9a 83       	std	Y+2, r25	; 0x02
    3f1c:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    3f1e:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <H_Buzzer_Void_BuzzerOff>
 }
    3f22:	2e 96       	adiw	r28, 0x0e	; 14
    3f24:	0f b6       	in	r0, 0x3f	; 63
    3f26:	f8 94       	cli
    3f28:	de bf       	out	0x3e, r29	; 62
    3f2a:	0f be       	out	0x3f, r0	; 63
    3f2c:	cd bf       	out	0x3d, r28	; 61
    3f2e:	cf 91       	pop	r28
    3f30:	df 91       	pop	r29
    3f32:	08 95       	ret

00003f34 <H_Buzzer_Void_BuzzerTwice>:
 void H_Buzzer_Void_BuzzerTwice(void)
 {
    3f34:	df 93       	push	r29
    3f36:	cf 93       	push	r28
    3f38:	cd b7       	in	r28, 0x3d	; 61
    3f3a:	de b7       	in	r29, 0x3e	; 62
    3f3c:	aa 97       	sbiw	r28, 0x2a	; 42
    3f3e:	0f b6       	in	r0, 0x3f	; 63
    3f40:	f8 94       	cli
    3f42:	de bf       	out	0x3e, r29	; 62
    3f44:	0f be       	out	0x3f, r0	; 63
    3f46:	cd bf       	out	0x3d, r28	; 61
	 H_Buzzer_Void_BuzzerOn();
    3f48:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <H_Buzzer_Void_BuzzerOn>
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	aa ef       	ldi	r26, 0xFA	; 250
    3f52:	b3 e4       	ldi	r27, 0x43	; 67
    3f54:	8f a3       	std	Y+39, r24	; 0x27
    3f56:	98 a7       	std	Y+40, r25	; 0x28
    3f58:	a9 a7       	std	Y+41, r26	; 0x29
    3f5a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f5c:	6f a1       	ldd	r22, Y+39	; 0x27
    3f5e:	78 a5       	ldd	r23, Y+40	; 0x28
    3f60:	89 a5       	ldd	r24, Y+41	; 0x29
    3f62:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f64:	20 e0       	ldi	r18, 0x00	; 0
    3f66:	30 e0       	ldi	r19, 0x00	; 0
    3f68:	4a e7       	ldi	r20, 0x7A	; 122
    3f6a:	55 e4       	ldi	r21, 0x45	; 69
    3f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f70:	dc 01       	movw	r26, r24
    3f72:	cb 01       	movw	r24, r22
    3f74:	8b a3       	std	Y+35, r24	; 0x23
    3f76:	9c a3       	std	Y+36, r25	; 0x24
    3f78:	ad a3       	std	Y+37, r26	; 0x25
    3f7a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f7c:	6b a1       	ldd	r22, Y+35	; 0x23
    3f7e:	7c a1       	ldd	r23, Y+36	; 0x24
    3f80:	8d a1       	ldd	r24, Y+37	; 0x25
    3f82:	9e a1       	ldd	r25, Y+38	; 0x26
    3f84:	20 e0       	ldi	r18, 0x00	; 0
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	40 e8       	ldi	r20, 0x80	; 128
    3f8a:	5f e3       	ldi	r21, 0x3F	; 63
    3f8c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f90:	88 23       	and	r24, r24
    3f92:	2c f4       	brge	.+10     	; 0x3f9e <H_Buzzer_Void_BuzzerTwice+0x6a>
		__ticks = 1;
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	9a a3       	std	Y+34, r25	; 0x22
    3f9a:	89 a3       	std	Y+33, r24	; 0x21
    3f9c:	3f c0       	rjmp	.+126    	; 0x401c <H_Buzzer_Void_BuzzerTwice+0xe8>
	else if (__tmp > 65535)
    3f9e:	6b a1       	ldd	r22, Y+35	; 0x23
    3fa0:	7c a1       	ldd	r23, Y+36	; 0x24
    3fa2:	8d a1       	ldd	r24, Y+37	; 0x25
    3fa4:	9e a1       	ldd	r25, Y+38	; 0x26
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	3f ef       	ldi	r19, 0xFF	; 255
    3faa:	4f e7       	ldi	r20, 0x7F	; 127
    3fac:	57 e4       	ldi	r21, 0x47	; 71
    3fae:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3fb2:	18 16       	cp	r1, r24
    3fb4:	4c f5       	brge	.+82     	; 0x4008 <H_Buzzer_Void_BuzzerTwice+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb6:	6f a1       	ldd	r22, Y+39	; 0x27
    3fb8:	78 a5       	ldd	r23, Y+40	; 0x28
    3fba:	89 a5       	ldd	r24, Y+41	; 0x29
    3fbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fbe:	20 e0       	ldi	r18, 0x00	; 0
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	40 e2       	ldi	r20, 0x20	; 32
    3fc4:	51 e4       	ldi	r21, 0x41	; 65
    3fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fca:	dc 01       	movw	r26, r24
    3fcc:	cb 01       	movw	r24, r22
    3fce:	bc 01       	movw	r22, r24
    3fd0:	cd 01       	movw	r24, r26
    3fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd6:	dc 01       	movw	r26, r24
    3fd8:	cb 01       	movw	r24, r22
    3fda:	9a a3       	std	Y+34, r25	; 0x22
    3fdc:	89 a3       	std	Y+33, r24	; 0x21
    3fde:	0f c0       	rjmp	.+30     	; 0x3ffe <H_Buzzer_Void_BuzzerTwice+0xca>
    3fe0:	80 e9       	ldi	r24, 0x90	; 144
    3fe2:	91 e0       	ldi	r25, 0x01	; 1
    3fe4:	98 a3       	std	Y+32, r25	; 0x20
    3fe6:	8f 8f       	std	Y+31, r24	; 0x1f
    3fe8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fea:	98 a1       	ldd	r25, Y+32	; 0x20
    3fec:	01 97       	sbiw	r24, 0x01	; 1
    3fee:	f1 f7       	brne	.-4      	; 0x3fec <H_Buzzer_Void_BuzzerTwice+0xb8>
    3ff0:	98 a3       	std	Y+32, r25	; 0x20
    3ff2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ff4:	89 a1       	ldd	r24, Y+33	; 0x21
    3ff6:	9a a1       	ldd	r25, Y+34	; 0x22
    3ff8:	01 97       	sbiw	r24, 0x01	; 1
    3ffa:	9a a3       	std	Y+34, r25	; 0x22
    3ffc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ffe:	89 a1       	ldd	r24, Y+33	; 0x21
    4000:	9a a1       	ldd	r25, Y+34	; 0x22
    4002:	00 97       	sbiw	r24, 0x00	; 0
    4004:	69 f7       	brne	.-38     	; 0x3fe0 <H_Buzzer_Void_BuzzerTwice+0xac>
    4006:	14 c0       	rjmp	.+40     	; 0x4030 <H_Buzzer_Void_BuzzerTwice+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4008:	6b a1       	ldd	r22, Y+35	; 0x23
    400a:	7c a1       	ldd	r23, Y+36	; 0x24
    400c:	8d a1       	ldd	r24, Y+37	; 0x25
    400e:	9e a1       	ldd	r25, Y+38	; 0x26
    4010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4014:	dc 01       	movw	r26, r24
    4016:	cb 01       	movw	r24, r22
    4018:	9a a3       	std	Y+34, r25	; 0x22
    401a:	89 a3       	std	Y+33, r24	; 0x21
    401c:	89 a1       	ldd	r24, Y+33	; 0x21
    401e:	9a a1       	ldd	r25, Y+34	; 0x22
    4020:	9e 8f       	std	Y+30, r25	; 0x1e
    4022:	8d 8f       	std	Y+29, r24	; 0x1d
    4024:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4026:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4028:	01 97       	sbiw	r24, 0x01	; 1
    402a:	f1 f7       	brne	.-4      	; 0x4028 <H_Buzzer_Void_BuzzerTwice+0xf4>
    402c:	9e 8f       	std	Y+30, r25	; 0x1e
    402e:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    4030:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <H_Buzzer_Void_BuzzerOff>
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	aa e7       	ldi	r26, 0x7A	; 122
    403a:	b3 e4       	ldi	r27, 0x43	; 67
    403c:	89 8f       	std	Y+25, r24	; 0x19
    403e:	9a 8f       	std	Y+26, r25	; 0x1a
    4040:	ab 8f       	std	Y+27, r26	; 0x1b
    4042:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4044:	69 8d       	ldd	r22, Y+25	; 0x19
    4046:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4048:	8b 8d       	ldd	r24, Y+27	; 0x1b
    404a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    404c:	20 e0       	ldi	r18, 0x00	; 0
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	4a e7       	ldi	r20, 0x7A	; 122
    4052:	55 e4       	ldi	r21, 0x45	; 69
    4054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4058:	dc 01       	movw	r26, r24
    405a:	cb 01       	movw	r24, r22
    405c:	8d 8b       	std	Y+21, r24	; 0x15
    405e:	9e 8b       	std	Y+22, r25	; 0x16
    4060:	af 8b       	std	Y+23, r26	; 0x17
    4062:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4064:	6d 89       	ldd	r22, Y+21	; 0x15
    4066:	7e 89       	ldd	r23, Y+22	; 0x16
    4068:	8f 89       	ldd	r24, Y+23	; 0x17
    406a:	98 8d       	ldd	r25, Y+24	; 0x18
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	40 e8       	ldi	r20, 0x80	; 128
    4072:	5f e3       	ldi	r21, 0x3F	; 63
    4074:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4078:	88 23       	and	r24, r24
    407a:	2c f4       	brge	.+10     	; 0x4086 <H_Buzzer_Void_BuzzerTwice+0x152>
		__ticks = 1;
    407c:	81 e0       	ldi	r24, 0x01	; 1
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	9c 8b       	std	Y+20, r25	; 0x14
    4082:	8b 8b       	std	Y+19, r24	; 0x13
    4084:	3f c0       	rjmp	.+126    	; 0x4104 <H_Buzzer_Void_BuzzerTwice+0x1d0>
	else if (__tmp > 65535)
    4086:	6d 89       	ldd	r22, Y+21	; 0x15
    4088:	7e 89       	ldd	r23, Y+22	; 0x16
    408a:	8f 89       	ldd	r24, Y+23	; 0x17
    408c:	98 8d       	ldd	r25, Y+24	; 0x18
    408e:	20 e0       	ldi	r18, 0x00	; 0
    4090:	3f ef       	ldi	r19, 0xFF	; 255
    4092:	4f e7       	ldi	r20, 0x7F	; 127
    4094:	57 e4       	ldi	r21, 0x47	; 71
    4096:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    409a:	18 16       	cp	r1, r24
    409c:	4c f5       	brge	.+82     	; 0x40f0 <H_Buzzer_Void_BuzzerTwice+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    409e:	69 8d       	ldd	r22, Y+25	; 0x19
    40a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40a6:	20 e0       	ldi	r18, 0x00	; 0
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	40 e2       	ldi	r20, 0x20	; 32
    40ac:	51 e4       	ldi	r21, 0x41	; 65
    40ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b2:	dc 01       	movw	r26, r24
    40b4:	cb 01       	movw	r24, r22
    40b6:	bc 01       	movw	r22, r24
    40b8:	cd 01       	movw	r24, r26
    40ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40be:	dc 01       	movw	r26, r24
    40c0:	cb 01       	movw	r24, r22
    40c2:	9c 8b       	std	Y+20, r25	; 0x14
    40c4:	8b 8b       	std	Y+19, r24	; 0x13
    40c6:	0f c0       	rjmp	.+30     	; 0x40e6 <H_Buzzer_Void_BuzzerTwice+0x1b2>
    40c8:	80 e9       	ldi	r24, 0x90	; 144
    40ca:	91 e0       	ldi	r25, 0x01	; 1
    40cc:	9a 8b       	std	Y+18, r25	; 0x12
    40ce:	89 8b       	std	Y+17, r24	; 0x11
    40d0:	89 89       	ldd	r24, Y+17	; 0x11
    40d2:	9a 89       	ldd	r25, Y+18	; 0x12
    40d4:	01 97       	sbiw	r24, 0x01	; 1
    40d6:	f1 f7       	brne	.-4      	; 0x40d4 <H_Buzzer_Void_BuzzerTwice+0x1a0>
    40d8:	9a 8b       	std	Y+18, r25	; 0x12
    40da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40dc:	8b 89       	ldd	r24, Y+19	; 0x13
    40de:	9c 89       	ldd	r25, Y+20	; 0x14
    40e0:	01 97       	sbiw	r24, 0x01	; 1
    40e2:	9c 8b       	std	Y+20, r25	; 0x14
    40e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e6:	8b 89       	ldd	r24, Y+19	; 0x13
    40e8:	9c 89       	ldd	r25, Y+20	; 0x14
    40ea:	00 97       	sbiw	r24, 0x00	; 0
    40ec:	69 f7       	brne	.-38     	; 0x40c8 <H_Buzzer_Void_BuzzerTwice+0x194>
    40ee:	14 c0       	rjmp	.+40     	; 0x4118 <H_Buzzer_Void_BuzzerTwice+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f0:	6d 89       	ldd	r22, Y+21	; 0x15
    40f2:	7e 89       	ldd	r23, Y+22	; 0x16
    40f4:	8f 89       	ldd	r24, Y+23	; 0x17
    40f6:	98 8d       	ldd	r25, Y+24	; 0x18
    40f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fc:	dc 01       	movw	r26, r24
    40fe:	cb 01       	movw	r24, r22
    4100:	9c 8b       	std	Y+20, r25	; 0x14
    4102:	8b 8b       	std	Y+19, r24	; 0x13
    4104:	8b 89       	ldd	r24, Y+19	; 0x13
    4106:	9c 89       	ldd	r25, Y+20	; 0x14
    4108:	98 8b       	std	Y+16, r25	; 0x10
    410a:	8f 87       	std	Y+15, r24	; 0x0f
    410c:	8f 85       	ldd	r24, Y+15	; 0x0f
    410e:	98 89       	ldd	r25, Y+16	; 0x10
    4110:	01 97       	sbiw	r24, 0x01	; 1
    4112:	f1 f7       	brne	.-4      	; 0x4110 <H_Buzzer_Void_BuzzerTwice+0x1dc>
    4114:	98 8b       	std	Y+16, r25	; 0x10
    4116:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(BUZZER_OFFDELAY_TIME);
	 H_Buzzer_Void_BuzzerOn();
    4118:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <H_Buzzer_Void_BuzzerOn>
    411c:	80 e0       	ldi	r24, 0x00	; 0
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	aa ef       	ldi	r26, 0xFA	; 250
    4122:	b3 e4       	ldi	r27, 0x43	; 67
    4124:	8b 87       	std	Y+11, r24	; 0x0b
    4126:	9c 87       	std	Y+12, r25	; 0x0c
    4128:	ad 87       	std	Y+13, r26	; 0x0d
    412a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    412c:	6b 85       	ldd	r22, Y+11	; 0x0b
    412e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4130:	8d 85       	ldd	r24, Y+13	; 0x0d
    4132:	9e 85       	ldd	r25, Y+14	; 0x0e
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	4a e7       	ldi	r20, 0x7A	; 122
    413a:	55 e4       	ldi	r21, 0x45	; 69
    413c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	8f 83       	std	Y+7, r24	; 0x07
    4146:	98 87       	std	Y+8, r25	; 0x08
    4148:	a9 87       	std	Y+9, r26	; 0x09
    414a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    414c:	6f 81       	ldd	r22, Y+7	; 0x07
    414e:	78 85       	ldd	r23, Y+8	; 0x08
    4150:	89 85       	ldd	r24, Y+9	; 0x09
    4152:	9a 85       	ldd	r25, Y+10	; 0x0a
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	40 e8       	ldi	r20, 0x80	; 128
    415a:	5f e3       	ldi	r21, 0x3F	; 63
    415c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4160:	88 23       	and	r24, r24
    4162:	2c f4       	brge	.+10     	; 0x416e <H_Buzzer_Void_BuzzerTwice+0x23a>
		__ticks = 1;
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	9e 83       	std	Y+6, r25	; 0x06
    416a:	8d 83       	std	Y+5, r24	; 0x05
    416c:	3f c0       	rjmp	.+126    	; 0x41ec <H_Buzzer_Void_BuzzerTwice+0x2b8>
	else if (__tmp > 65535)
    416e:	6f 81       	ldd	r22, Y+7	; 0x07
    4170:	78 85       	ldd	r23, Y+8	; 0x08
    4172:	89 85       	ldd	r24, Y+9	; 0x09
    4174:	9a 85       	ldd	r25, Y+10	; 0x0a
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	3f ef       	ldi	r19, 0xFF	; 255
    417a:	4f e7       	ldi	r20, 0x7F	; 127
    417c:	57 e4       	ldi	r21, 0x47	; 71
    417e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4182:	18 16       	cp	r1, r24
    4184:	4c f5       	brge	.+82     	; 0x41d8 <H_Buzzer_Void_BuzzerTwice+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4186:	6b 85       	ldd	r22, Y+11	; 0x0b
    4188:	7c 85       	ldd	r23, Y+12	; 0x0c
    418a:	8d 85       	ldd	r24, Y+13	; 0x0d
    418c:	9e 85       	ldd	r25, Y+14	; 0x0e
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e2       	ldi	r20, 0x20	; 32
    4194:	51 e4       	ldi	r21, 0x41	; 65
    4196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	bc 01       	movw	r22, r24
    41a0:	cd 01       	movw	r24, r26
    41a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	9e 83       	std	Y+6, r25	; 0x06
    41ac:	8d 83       	std	Y+5, r24	; 0x05
    41ae:	0f c0       	rjmp	.+30     	; 0x41ce <H_Buzzer_Void_BuzzerTwice+0x29a>
    41b0:	80 e9       	ldi	r24, 0x90	; 144
    41b2:	91 e0       	ldi	r25, 0x01	; 1
    41b4:	9c 83       	std	Y+4, r25	; 0x04
    41b6:	8b 83       	std	Y+3, r24	; 0x03
    41b8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ba:	9c 81       	ldd	r25, Y+4	; 0x04
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	f1 f7       	brne	.-4      	; 0x41bc <H_Buzzer_Void_BuzzerTwice+0x288>
    41c0:	9c 83       	std	Y+4, r25	; 0x04
    41c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c4:	8d 81       	ldd	r24, Y+5	; 0x05
    41c6:	9e 81       	ldd	r25, Y+6	; 0x06
    41c8:	01 97       	sbiw	r24, 0x01	; 1
    41ca:	9e 83       	std	Y+6, r25	; 0x06
    41cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ce:	8d 81       	ldd	r24, Y+5	; 0x05
    41d0:	9e 81       	ldd	r25, Y+6	; 0x06
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	69 f7       	brne	.-38     	; 0x41b0 <H_Buzzer_Void_BuzzerTwice+0x27c>
    41d6:	14 c0       	rjmp	.+40     	; 0x4200 <H_Buzzer_Void_BuzzerTwice+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d8:	6f 81       	ldd	r22, Y+7	; 0x07
    41da:	78 85       	ldd	r23, Y+8	; 0x08
    41dc:	89 85       	ldd	r24, Y+9	; 0x09
    41de:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e4:	dc 01       	movw	r26, r24
    41e6:	cb 01       	movw	r24, r22
    41e8:	9e 83       	std	Y+6, r25	; 0x06
    41ea:	8d 83       	std	Y+5, r24	; 0x05
    41ec:	8d 81       	ldd	r24, Y+5	; 0x05
    41ee:	9e 81       	ldd	r25, Y+6	; 0x06
    41f0:	9a 83       	std	Y+2, r25	; 0x02
    41f2:	89 83       	std	Y+1, r24	; 0x01
    41f4:	89 81       	ldd	r24, Y+1	; 0x01
    41f6:	9a 81       	ldd	r25, Y+2	; 0x02
    41f8:	01 97       	sbiw	r24, 0x01	; 1
    41fa:	f1 f7       	brne	.-4      	; 0x41f8 <H_Buzzer_Void_BuzzerTwice+0x2c4>
    41fc:	9a 83       	std	Y+2, r25	; 0x02
    41fe:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    4200:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <H_Buzzer_Void_BuzzerOff>
 }
    4204:	aa 96       	adiw	r28, 0x2a	; 42
    4206:	0f b6       	in	r0, 0x3f	; 63
    4208:	f8 94       	cli
    420a:	de bf       	out	0x3e, r29	; 62
    420c:	0f be       	out	0x3f, r0	; 63
    420e:	cd bf       	out	0x3d, r28	; 61
    4210:	cf 91       	pop	r28
    4212:	df 91       	pop	r29
    4214:	08 95       	ret

00004216 <H_Buzzer_Void_BuzzerTriple>:
 void H_Buzzer_Void_BuzzerTriple(void)
 {
    4216:	0f 93       	push	r16
    4218:	1f 93       	push	r17
    421a:	df 93       	push	r29
    421c:	cf 93       	push	r28
    421e:	cd b7       	in	r28, 0x3d	; 61
    4220:	de b7       	in	r29, 0x3e	; 62
    4222:	c6 54       	subi	r28, 0x46	; 70
    4224:	d0 40       	sbci	r29, 0x00	; 0
    4226:	0f b6       	in	r0, 0x3f	; 63
    4228:	f8 94       	cli
    422a:	de bf       	out	0x3e, r29	; 62
    422c:	0f be       	out	0x3f, r0	; 63
    422e:	cd bf       	out	0x3d, r28	; 61
	 H_Buzzer_Void_BuzzerOn();
    4230:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <H_Buzzer_Void_BuzzerOn>
    4234:	fe 01       	movw	r30, r28
    4236:	ed 5b       	subi	r30, 0xBD	; 189
    4238:	ff 4f       	sbci	r31, 0xFF	; 255
    423a:	80 e0       	ldi	r24, 0x00	; 0
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	aa ef       	ldi	r26, 0xFA	; 250
    4240:	b3 e4       	ldi	r27, 0x43	; 67
    4242:	80 83       	st	Z, r24
    4244:	91 83       	std	Z+1, r25	; 0x01
    4246:	a2 83       	std	Z+2, r26	; 0x02
    4248:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    424a:	8e 01       	movw	r16, r28
    424c:	01 5c       	subi	r16, 0xC1	; 193
    424e:	1f 4f       	sbci	r17, 0xFF	; 255
    4250:	fe 01       	movw	r30, r28
    4252:	ed 5b       	subi	r30, 0xBD	; 189
    4254:	ff 4f       	sbci	r31, 0xFF	; 255
    4256:	60 81       	ld	r22, Z
    4258:	71 81       	ldd	r23, Z+1	; 0x01
    425a:	82 81       	ldd	r24, Z+2	; 0x02
    425c:	93 81       	ldd	r25, Z+3	; 0x03
    425e:	20 e0       	ldi	r18, 0x00	; 0
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	4a e7       	ldi	r20, 0x7A	; 122
    4264:	55 e4       	ldi	r21, 0x45	; 69
    4266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    426a:	dc 01       	movw	r26, r24
    426c:	cb 01       	movw	r24, r22
    426e:	f8 01       	movw	r30, r16
    4270:	80 83       	st	Z, r24
    4272:	91 83       	std	Z+1, r25	; 0x01
    4274:	a2 83       	std	Z+2, r26	; 0x02
    4276:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4278:	fe 01       	movw	r30, r28
    427a:	ff 96       	adiw	r30, 0x3f	; 63
    427c:	60 81       	ld	r22, Z
    427e:	71 81       	ldd	r23, Z+1	; 0x01
    4280:	82 81       	ldd	r24, Z+2	; 0x02
    4282:	93 81       	ldd	r25, Z+3	; 0x03
    4284:	20 e0       	ldi	r18, 0x00	; 0
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	40 e8       	ldi	r20, 0x80	; 128
    428a:	5f e3       	ldi	r21, 0x3F	; 63
    428c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4290:	88 23       	and	r24, r24
    4292:	2c f4       	brge	.+10     	; 0x429e <H_Buzzer_Void_BuzzerTriple+0x88>
		__ticks = 1;
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	90 e0       	ldi	r25, 0x00	; 0
    4298:	9e af       	std	Y+62, r25	; 0x3e
    429a:	8d af       	std	Y+61, r24	; 0x3d
    429c:	46 c0       	rjmp	.+140    	; 0x432a <H_Buzzer_Void_BuzzerTriple+0x114>
	else if (__tmp > 65535)
    429e:	fe 01       	movw	r30, r28
    42a0:	ff 96       	adiw	r30, 0x3f	; 63
    42a2:	60 81       	ld	r22, Z
    42a4:	71 81       	ldd	r23, Z+1	; 0x01
    42a6:	82 81       	ldd	r24, Z+2	; 0x02
    42a8:	93 81       	ldd	r25, Z+3	; 0x03
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	3f ef       	ldi	r19, 0xFF	; 255
    42ae:	4f e7       	ldi	r20, 0x7F	; 127
    42b0:	57 e4       	ldi	r21, 0x47	; 71
    42b2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    42b6:	18 16       	cp	r1, r24
    42b8:	64 f5       	brge	.+88     	; 0x4312 <H_Buzzer_Void_BuzzerTriple+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42ba:	fe 01       	movw	r30, r28
    42bc:	ed 5b       	subi	r30, 0xBD	; 189
    42be:	ff 4f       	sbci	r31, 0xFF	; 255
    42c0:	60 81       	ld	r22, Z
    42c2:	71 81       	ldd	r23, Z+1	; 0x01
    42c4:	82 81       	ldd	r24, Z+2	; 0x02
    42c6:	93 81       	ldd	r25, Z+3	; 0x03
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	40 e2       	ldi	r20, 0x20	; 32
    42ce:	51 e4       	ldi	r21, 0x41	; 65
    42d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	bc 01       	movw	r22, r24
    42da:	cd 01       	movw	r24, r26
    42dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e0:	dc 01       	movw	r26, r24
    42e2:	cb 01       	movw	r24, r22
    42e4:	9e af       	std	Y+62, r25	; 0x3e
    42e6:	8d af       	std	Y+61, r24	; 0x3d
    42e8:	0f c0       	rjmp	.+30     	; 0x4308 <H_Buzzer_Void_BuzzerTriple+0xf2>
    42ea:	80 e9       	ldi	r24, 0x90	; 144
    42ec:	91 e0       	ldi	r25, 0x01	; 1
    42ee:	9c af       	std	Y+60, r25	; 0x3c
    42f0:	8b af       	std	Y+59, r24	; 0x3b
    42f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    42f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    42f6:	01 97       	sbiw	r24, 0x01	; 1
    42f8:	f1 f7       	brne	.-4      	; 0x42f6 <H_Buzzer_Void_BuzzerTriple+0xe0>
    42fa:	9c af       	std	Y+60, r25	; 0x3c
    42fc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    4300:	9e ad       	ldd	r25, Y+62	; 0x3e
    4302:	01 97       	sbiw	r24, 0x01	; 1
    4304:	9e af       	std	Y+62, r25	; 0x3e
    4306:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4308:	8d ad       	ldd	r24, Y+61	; 0x3d
    430a:	9e ad       	ldd	r25, Y+62	; 0x3e
    430c:	00 97       	sbiw	r24, 0x00	; 0
    430e:	69 f7       	brne	.-38     	; 0x42ea <H_Buzzer_Void_BuzzerTriple+0xd4>
    4310:	16 c0       	rjmp	.+44     	; 0x433e <H_Buzzer_Void_BuzzerTriple+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4312:	fe 01       	movw	r30, r28
    4314:	ff 96       	adiw	r30, 0x3f	; 63
    4316:	60 81       	ld	r22, Z
    4318:	71 81       	ldd	r23, Z+1	; 0x01
    431a:	82 81       	ldd	r24, Z+2	; 0x02
    431c:	93 81       	ldd	r25, Z+3	; 0x03
    431e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4322:	dc 01       	movw	r26, r24
    4324:	cb 01       	movw	r24, r22
    4326:	9e af       	std	Y+62, r25	; 0x3e
    4328:	8d af       	std	Y+61, r24	; 0x3d
    432a:	8d ad       	ldd	r24, Y+61	; 0x3d
    432c:	9e ad       	ldd	r25, Y+62	; 0x3e
    432e:	9a af       	std	Y+58, r25	; 0x3a
    4330:	89 af       	std	Y+57, r24	; 0x39
    4332:	89 ad       	ldd	r24, Y+57	; 0x39
    4334:	9a ad       	ldd	r25, Y+58	; 0x3a
    4336:	01 97       	sbiw	r24, 0x01	; 1
    4338:	f1 f7       	brne	.-4      	; 0x4336 <H_Buzzer_Void_BuzzerTriple+0x120>
    433a:	9a af       	std	Y+58, r25	; 0x3a
    433c:	89 af       	std	Y+57, r24	; 0x39
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    433e:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <H_Buzzer_Void_BuzzerOff>
    4342:	80 e0       	ldi	r24, 0x00	; 0
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	aa e7       	ldi	r26, 0x7A	; 122
    4348:	b3 e4       	ldi	r27, 0x43	; 67
    434a:	8d ab       	std	Y+53, r24	; 0x35
    434c:	9e ab       	std	Y+54, r25	; 0x36
    434e:	af ab       	std	Y+55, r26	; 0x37
    4350:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4352:	6d a9       	ldd	r22, Y+53	; 0x35
    4354:	7e a9       	ldd	r23, Y+54	; 0x36
    4356:	8f a9       	ldd	r24, Y+55	; 0x37
    4358:	98 ad       	ldd	r25, Y+56	; 0x38
    435a:	20 e0       	ldi	r18, 0x00	; 0
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	4a e7       	ldi	r20, 0x7A	; 122
    4360:	55 e4       	ldi	r21, 0x45	; 69
    4362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4366:	dc 01       	movw	r26, r24
    4368:	cb 01       	movw	r24, r22
    436a:	89 ab       	std	Y+49, r24	; 0x31
    436c:	9a ab       	std	Y+50, r25	; 0x32
    436e:	ab ab       	std	Y+51, r26	; 0x33
    4370:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4372:	69 a9       	ldd	r22, Y+49	; 0x31
    4374:	7a a9       	ldd	r23, Y+50	; 0x32
    4376:	8b a9       	ldd	r24, Y+51	; 0x33
    4378:	9c a9       	ldd	r25, Y+52	; 0x34
    437a:	20 e0       	ldi	r18, 0x00	; 0
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	40 e8       	ldi	r20, 0x80	; 128
    4380:	5f e3       	ldi	r21, 0x3F	; 63
    4382:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4386:	88 23       	and	r24, r24
    4388:	2c f4       	brge	.+10     	; 0x4394 <H_Buzzer_Void_BuzzerTriple+0x17e>
		__ticks = 1;
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	98 ab       	std	Y+48, r25	; 0x30
    4390:	8f a7       	std	Y+47, r24	; 0x2f
    4392:	3f c0       	rjmp	.+126    	; 0x4412 <H_Buzzer_Void_BuzzerTriple+0x1fc>
	else if (__tmp > 65535)
    4394:	69 a9       	ldd	r22, Y+49	; 0x31
    4396:	7a a9       	ldd	r23, Y+50	; 0x32
    4398:	8b a9       	ldd	r24, Y+51	; 0x33
    439a:	9c a9       	ldd	r25, Y+52	; 0x34
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	3f ef       	ldi	r19, 0xFF	; 255
    43a0:	4f e7       	ldi	r20, 0x7F	; 127
    43a2:	57 e4       	ldi	r21, 0x47	; 71
    43a4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    43a8:	18 16       	cp	r1, r24
    43aa:	4c f5       	brge	.+82     	; 0x43fe <H_Buzzer_Void_BuzzerTriple+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43ac:	6d a9       	ldd	r22, Y+53	; 0x35
    43ae:	7e a9       	ldd	r23, Y+54	; 0x36
    43b0:	8f a9       	ldd	r24, Y+55	; 0x37
    43b2:	98 ad       	ldd	r25, Y+56	; 0x38
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	40 e2       	ldi	r20, 0x20	; 32
    43ba:	51 e4       	ldi	r21, 0x41	; 65
    43bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c0:	dc 01       	movw	r26, r24
    43c2:	cb 01       	movw	r24, r22
    43c4:	bc 01       	movw	r22, r24
    43c6:	cd 01       	movw	r24, r26
    43c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43cc:	dc 01       	movw	r26, r24
    43ce:	cb 01       	movw	r24, r22
    43d0:	98 ab       	std	Y+48, r25	; 0x30
    43d2:	8f a7       	std	Y+47, r24	; 0x2f
    43d4:	0f c0       	rjmp	.+30     	; 0x43f4 <H_Buzzer_Void_BuzzerTriple+0x1de>
    43d6:	80 e9       	ldi	r24, 0x90	; 144
    43d8:	91 e0       	ldi	r25, 0x01	; 1
    43da:	9e a7       	std	Y+46, r25	; 0x2e
    43dc:	8d a7       	std	Y+45, r24	; 0x2d
    43de:	8d a5       	ldd	r24, Y+45	; 0x2d
    43e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    43e2:	01 97       	sbiw	r24, 0x01	; 1
    43e4:	f1 f7       	brne	.-4      	; 0x43e2 <H_Buzzer_Void_BuzzerTriple+0x1cc>
    43e6:	9e a7       	std	Y+46, r25	; 0x2e
    43e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    43ec:	98 a9       	ldd	r25, Y+48	; 0x30
    43ee:	01 97       	sbiw	r24, 0x01	; 1
    43f0:	98 ab       	std	Y+48, r25	; 0x30
    43f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    43f6:	98 a9       	ldd	r25, Y+48	; 0x30
    43f8:	00 97       	sbiw	r24, 0x00	; 0
    43fa:	69 f7       	brne	.-38     	; 0x43d6 <H_Buzzer_Void_BuzzerTriple+0x1c0>
    43fc:	14 c0       	rjmp	.+40     	; 0x4426 <H_Buzzer_Void_BuzzerTriple+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43fe:	69 a9       	ldd	r22, Y+49	; 0x31
    4400:	7a a9       	ldd	r23, Y+50	; 0x32
    4402:	8b a9       	ldd	r24, Y+51	; 0x33
    4404:	9c a9       	ldd	r25, Y+52	; 0x34
    4406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    440a:	dc 01       	movw	r26, r24
    440c:	cb 01       	movw	r24, r22
    440e:	98 ab       	std	Y+48, r25	; 0x30
    4410:	8f a7       	std	Y+47, r24	; 0x2f
    4412:	8f a5       	ldd	r24, Y+47	; 0x2f
    4414:	98 a9       	ldd	r25, Y+48	; 0x30
    4416:	9c a7       	std	Y+44, r25	; 0x2c
    4418:	8b a7       	std	Y+43, r24	; 0x2b
    441a:	8b a5       	ldd	r24, Y+43	; 0x2b
    441c:	9c a5       	ldd	r25, Y+44	; 0x2c
    441e:	01 97       	sbiw	r24, 0x01	; 1
    4420:	f1 f7       	brne	.-4      	; 0x441e <H_Buzzer_Void_BuzzerTriple+0x208>
    4422:	9c a7       	std	Y+44, r25	; 0x2c
    4424:	8b a7       	std	Y+43, r24	; 0x2b
	 _delay_ms(BUZZER_OFFDELAY_TIME);
	 H_Buzzer_Void_BuzzerOn();
    4426:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <H_Buzzer_Void_BuzzerOn>
    442a:	80 e0       	ldi	r24, 0x00	; 0
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	aa ef       	ldi	r26, 0xFA	; 250
    4430:	b3 e4       	ldi	r27, 0x43	; 67
    4432:	8f a3       	std	Y+39, r24	; 0x27
    4434:	98 a7       	std	Y+40, r25	; 0x28
    4436:	a9 a7       	std	Y+41, r26	; 0x29
    4438:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    443a:	6f a1       	ldd	r22, Y+39	; 0x27
    443c:	78 a5       	ldd	r23, Y+40	; 0x28
    443e:	89 a5       	ldd	r24, Y+41	; 0x29
    4440:	9a a5       	ldd	r25, Y+42	; 0x2a
    4442:	20 e0       	ldi	r18, 0x00	; 0
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	4a e7       	ldi	r20, 0x7A	; 122
    4448:	55 e4       	ldi	r21, 0x45	; 69
    444a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    444e:	dc 01       	movw	r26, r24
    4450:	cb 01       	movw	r24, r22
    4452:	8b a3       	std	Y+35, r24	; 0x23
    4454:	9c a3       	std	Y+36, r25	; 0x24
    4456:	ad a3       	std	Y+37, r26	; 0x25
    4458:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    445a:	6b a1       	ldd	r22, Y+35	; 0x23
    445c:	7c a1       	ldd	r23, Y+36	; 0x24
    445e:	8d a1       	ldd	r24, Y+37	; 0x25
    4460:	9e a1       	ldd	r25, Y+38	; 0x26
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	40 e8       	ldi	r20, 0x80	; 128
    4468:	5f e3       	ldi	r21, 0x3F	; 63
    446a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    446e:	88 23       	and	r24, r24
    4470:	2c f4       	brge	.+10     	; 0x447c <H_Buzzer_Void_BuzzerTriple+0x266>
		__ticks = 1;
    4472:	81 e0       	ldi	r24, 0x01	; 1
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	9a a3       	std	Y+34, r25	; 0x22
    4478:	89 a3       	std	Y+33, r24	; 0x21
    447a:	3f c0       	rjmp	.+126    	; 0x44fa <H_Buzzer_Void_BuzzerTriple+0x2e4>
	else if (__tmp > 65535)
    447c:	6b a1       	ldd	r22, Y+35	; 0x23
    447e:	7c a1       	ldd	r23, Y+36	; 0x24
    4480:	8d a1       	ldd	r24, Y+37	; 0x25
    4482:	9e a1       	ldd	r25, Y+38	; 0x26
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	3f ef       	ldi	r19, 0xFF	; 255
    4488:	4f e7       	ldi	r20, 0x7F	; 127
    448a:	57 e4       	ldi	r21, 0x47	; 71
    448c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4490:	18 16       	cp	r1, r24
    4492:	4c f5       	brge	.+82     	; 0x44e6 <H_Buzzer_Void_BuzzerTriple+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4494:	6f a1       	ldd	r22, Y+39	; 0x27
    4496:	78 a5       	ldd	r23, Y+40	; 0x28
    4498:	89 a5       	ldd	r24, Y+41	; 0x29
    449a:	9a a5       	ldd	r25, Y+42	; 0x2a
    449c:	20 e0       	ldi	r18, 0x00	; 0
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	40 e2       	ldi	r20, 0x20	; 32
    44a2:	51 e4       	ldi	r21, 0x41	; 65
    44a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	bc 01       	movw	r22, r24
    44ae:	cd 01       	movw	r24, r26
    44b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b4:	dc 01       	movw	r26, r24
    44b6:	cb 01       	movw	r24, r22
    44b8:	9a a3       	std	Y+34, r25	; 0x22
    44ba:	89 a3       	std	Y+33, r24	; 0x21
    44bc:	0f c0       	rjmp	.+30     	; 0x44dc <H_Buzzer_Void_BuzzerTriple+0x2c6>
    44be:	80 e9       	ldi	r24, 0x90	; 144
    44c0:	91 e0       	ldi	r25, 0x01	; 1
    44c2:	98 a3       	std	Y+32, r25	; 0x20
    44c4:	8f 8f       	std	Y+31, r24	; 0x1f
    44c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44c8:	98 a1       	ldd	r25, Y+32	; 0x20
    44ca:	01 97       	sbiw	r24, 0x01	; 1
    44cc:	f1 f7       	brne	.-4      	; 0x44ca <H_Buzzer_Void_BuzzerTriple+0x2b4>
    44ce:	98 a3       	std	Y+32, r25	; 0x20
    44d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d2:	89 a1       	ldd	r24, Y+33	; 0x21
    44d4:	9a a1       	ldd	r25, Y+34	; 0x22
    44d6:	01 97       	sbiw	r24, 0x01	; 1
    44d8:	9a a3       	std	Y+34, r25	; 0x22
    44da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44dc:	89 a1       	ldd	r24, Y+33	; 0x21
    44de:	9a a1       	ldd	r25, Y+34	; 0x22
    44e0:	00 97       	sbiw	r24, 0x00	; 0
    44e2:	69 f7       	brne	.-38     	; 0x44be <H_Buzzer_Void_BuzzerTriple+0x2a8>
    44e4:	14 c0       	rjmp	.+40     	; 0x450e <H_Buzzer_Void_BuzzerTriple+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44e6:	6b a1       	ldd	r22, Y+35	; 0x23
    44e8:	7c a1       	ldd	r23, Y+36	; 0x24
    44ea:	8d a1       	ldd	r24, Y+37	; 0x25
    44ec:	9e a1       	ldd	r25, Y+38	; 0x26
    44ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	9a a3       	std	Y+34, r25	; 0x22
    44f8:	89 a3       	std	Y+33, r24	; 0x21
    44fa:	89 a1       	ldd	r24, Y+33	; 0x21
    44fc:	9a a1       	ldd	r25, Y+34	; 0x22
    44fe:	9e 8f       	std	Y+30, r25	; 0x1e
    4500:	8d 8f       	std	Y+29, r24	; 0x1d
    4502:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4504:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4506:	01 97       	sbiw	r24, 0x01	; 1
    4508:	f1 f7       	brne	.-4      	; 0x4506 <H_Buzzer_Void_BuzzerTriple+0x2f0>
    450a:	9e 8f       	std	Y+30, r25	; 0x1e
    450c:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    450e:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <H_Buzzer_Void_BuzzerOff>
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	aa e7       	ldi	r26, 0x7A	; 122
    4518:	b3 e4       	ldi	r27, 0x43	; 67
    451a:	89 8f       	std	Y+25, r24	; 0x19
    451c:	9a 8f       	std	Y+26, r25	; 0x1a
    451e:	ab 8f       	std	Y+27, r26	; 0x1b
    4520:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4522:	69 8d       	ldd	r22, Y+25	; 0x19
    4524:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4526:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4528:	9c 8d       	ldd	r25, Y+28	; 0x1c
    452a:	20 e0       	ldi	r18, 0x00	; 0
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	4a e7       	ldi	r20, 0x7A	; 122
    4530:	55 e4       	ldi	r21, 0x45	; 69
    4532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4536:	dc 01       	movw	r26, r24
    4538:	cb 01       	movw	r24, r22
    453a:	8d 8b       	std	Y+21, r24	; 0x15
    453c:	9e 8b       	std	Y+22, r25	; 0x16
    453e:	af 8b       	std	Y+23, r26	; 0x17
    4540:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4542:	6d 89       	ldd	r22, Y+21	; 0x15
    4544:	7e 89       	ldd	r23, Y+22	; 0x16
    4546:	8f 89       	ldd	r24, Y+23	; 0x17
    4548:	98 8d       	ldd	r25, Y+24	; 0x18
    454a:	20 e0       	ldi	r18, 0x00	; 0
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	40 e8       	ldi	r20, 0x80	; 128
    4550:	5f e3       	ldi	r21, 0x3F	; 63
    4552:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4556:	88 23       	and	r24, r24
    4558:	2c f4       	brge	.+10     	; 0x4564 <H_Buzzer_Void_BuzzerTriple+0x34e>
		__ticks = 1;
    455a:	81 e0       	ldi	r24, 0x01	; 1
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	9c 8b       	std	Y+20, r25	; 0x14
    4560:	8b 8b       	std	Y+19, r24	; 0x13
    4562:	3f c0       	rjmp	.+126    	; 0x45e2 <H_Buzzer_Void_BuzzerTriple+0x3cc>
	else if (__tmp > 65535)
    4564:	6d 89       	ldd	r22, Y+21	; 0x15
    4566:	7e 89       	ldd	r23, Y+22	; 0x16
    4568:	8f 89       	ldd	r24, Y+23	; 0x17
    456a:	98 8d       	ldd	r25, Y+24	; 0x18
    456c:	20 e0       	ldi	r18, 0x00	; 0
    456e:	3f ef       	ldi	r19, 0xFF	; 255
    4570:	4f e7       	ldi	r20, 0x7F	; 127
    4572:	57 e4       	ldi	r21, 0x47	; 71
    4574:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4578:	18 16       	cp	r1, r24
    457a:	4c f5       	brge	.+82     	; 0x45ce <H_Buzzer_Void_BuzzerTriple+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    457c:	69 8d       	ldd	r22, Y+25	; 0x19
    457e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4580:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4582:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4584:	20 e0       	ldi	r18, 0x00	; 0
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	40 e2       	ldi	r20, 0x20	; 32
    458a:	51 e4       	ldi	r21, 0x41	; 65
    458c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4590:	dc 01       	movw	r26, r24
    4592:	cb 01       	movw	r24, r22
    4594:	bc 01       	movw	r22, r24
    4596:	cd 01       	movw	r24, r26
    4598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    459c:	dc 01       	movw	r26, r24
    459e:	cb 01       	movw	r24, r22
    45a0:	9c 8b       	std	Y+20, r25	; 0x14
    45a2:	8b 8b       	std	Y+19, r24	; 0x13
    45a4:	0f c0       	rjmp	.+30     	; 0x45c4 <H_Buzzer_Void_BuzzerTriple+0x3ae>
    45a6:	80 e9       	ldi	r24, 0x90	; 144
    45a8:	91 e0       	ldi	r25, 0x01	; 1
    45aa:	9a 8b       	std	Y+18, r25	; 0x12
    45ac:	89 8b       	std	Y+17, r24	; 0x11
    45ae:	89 89       	ldd	r24, Y+17	; 0x11
    45b0:	9a 89       	ldd	r25, Y+18	; 0x12
    45b2:	01 97       	sbiw	r24, 0x01	; 1
    45b4:	f1 f7       	brne	.-4      	; 0x45b2 <H_Buzzer_Void_BuzzerTriple+0x39c>
    45b6:	9a 8b       	std	Y+18, r25	; 0x12
    45b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ba:	8b 89       	ldd	r24, Y+19	; 0x13
    45bc:	9c 89       	ldd	r25, Y+20	; 0x14
    45be:	01 97       	sbiw	r24, 0x01	; 1
    45c0:	9c 8b       	std	Y+20, r25	; 0x14
    45c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c4:	8b 89       	ldd	r24, Y+19	; 0x13
    45c6:	9c 89       	ldd	r25, Y+20	; 0x14
    45c8:	00 97       	sbiw	r24, 0x00	; 0
    45ca:	69 f7       	brne	.-38     	; 0x45a6 <H_Buzzer_Void_BuzzerTriple+0x390>
    45cc:	14 c0       	rjmp	.+40     	; 0x45f6 <H_Buzzer_Void_BuzzerTriple+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45ce:	6d 89       	ldd	r22, Y+21	; 0x15
    45d0:	7e 89       	ldd	r23, Y+22	; 0x16
    45d2:	8f 89       	ldd	r24, Y+23	; 0x17
    45d4:	98 8d       	ldd	r25, Y+24	; 0x18
    45d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	9c 8b       	std	Y+20, r25	; 0x14
    45e0:	8b 8b       	std	Y+19, r24	; 0x13
    45e2:	8b 89       	ldd	r24, Y+19	; 0x13
    45e4:	9c 89       	ldd	r25, Y+20	; 0x14
    45e6:	98 8b       	std	Y+16, r25	; 0x10
    45e8:	8f 87       	std	Y+15, r24	; 0x0f
    45ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    45ec:	98 89       	ldd	r25, Y+16	; 0x10
    45ee:	01 97       	sbiw	r24, 0x01	; 1
    45f0:	f1 f7       	brne	.-4      	; 0x45ee <H_Buzzer_Void_BuzzerTriple+0x3d8>
    45f2:	98 8b       	std	Y+16, r25	; 0x10
    45f4:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(BUZZER_OFFDELAY_TIME);
	 H_Buzzer_Void_BuzzerOn();
    45f6:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <H_Buzzer_Void_BuzzerOn>
    45fa:	80 e0       	ldi	r24, 0x00	; 0
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	aa ef       	ldi	r26, 0xFA	; 250
    4600:	b3 e4       	ldi	r27, 0x43	; 67
    4602:	8b 87       	std	Y+11, r24	; 0x0b
    4604:	9c 87       	std	Y+12, r25	; 0x0c
    4606:	ad 87       	std	Y+13, r26	; 0x0d
    4608:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    460a:	6b 85       	ldd	r22, Y+11	; 0x0b
    460c:	7c 85       	ldd	r23, Y+12	; 0x0c
    460e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4610:	9e 85       	ldd	r25, Y+14	; 0x0e
    4612:	20 e0       	ldi	r18, 0x00	; 0
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	4a e7       	ldi	r20, 0x7A	; 122
    4618:	55 e4       	ldi	r21, 0x45	; 69
    461a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    461e:	dc 01       	movw	r26, r24
    4620:	cb 01       	movw	r24, r22
    4622:	8f 83       	std	Y+7, r24	; 0x07
    4624:	98 87       	std	Y+8, r25	; 0x08
    4626:	a9 87       	std	Y+9, r26	; 0x09
    4628:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    462a:	6f 81       	ldd	r22, Y+7	; 0x07
    462c:	78 85       	ldd	r23, Y+8	; 0x08
    462e:	89 85       	ldd	r24, Y+9	; 0x09
    4630:	9a 85       	ldd	r25, Y+10	; 0x0a
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	40 e8       	ldi	r20, 0x80	; 128
    4638:	5f e3       	ldi	r21, 0x3F	; 63
    463a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    463e:	88 23       	and	r24, r24
    4640:	2c f4       	brge	.+10     	; 0x464c <H_Buzzer_Void_BuzzerTriple+0x436>
		__ticks = 1;
    4642:	81 e0       	ldi	r24, 0x01	; 1
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	9e 83       	std	Y+6, r25	; 0x06
    4648:	8d 83       	std	Y+5, r24	; 0x05
    464a:	3f c0       	rjmp	.+126    	; 0x46ca <H_Buzzer_Void_BuzzerTriple+0x4b4>
	else if (__tmp > 65535)
    464c:	6f 81       	ldd	r22, Y+7	; 0x07
    464e:	78 85       	ldd	r23, Y+8	; 0x08
    4650:	89 85       	ldd	r24, Y+9	; 0x09
    4652:	9a 85       	ldd	r25, Y+10	; 0x0a
    4654:	20 e0       	ldi	r18, 0x00	; 0
    4656:	3f ef       	ldi	r19, 0xFF	; 255
    4658:	4f e7       	ldi	r20, 0x7F	; 127
    465a:	57 e4       	ldi	r21, 0x47	; 71
    465c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4660:	18 16       	cp	r1, r24
    4662:	4c f5       	brge	.+82     	; 0x46b6 <H_Buzzer_Void_BuzzerTriple+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4664:	6b 85       	ldd	r22, Y+11	; 0x0b
    4666:	7c 85       	ldd	r23, Y+12	; 0x0c
    4668:	8d 85       	ldd	r24, Y+13	; 0x0d
    466a:	9e 85       	ldd	r25, Y+14	; 0x0e
    466c:	20 e0       	ldi	r18, 0x00	; 0
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	40 e2       	ldi	r20, 0x20	; 32
    4672:	51 e4       	ldi	r21, 0x41	; 65
    4674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4678:	dc 01       	movw	r26, r24
    467a:	cb 01       	movw	r24, r22
    467c:	bc 01       	movw	r22, r24
    467e:	cd 01       	movw	r24, r26
    4680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4684:	dc 01       	movw	r26, r24
    4686:	cb 01       	movw	r24, r22
    4688:	9e 83       	std	Y+6, r25	; 0x06
    468a:	8d 83       	std	Y+5, r24	; 0x05
    468c:	0f c0       	rjmp	.+30     	; 0x46ac <H_Buzzer_Void_BuzzerTriple+0x496>
    468e:	80 e9       	ldi	r24, 0x90	; 144
    4690:	91 e0       	ldi	r25, 0x01	; 1
    4692:	9c 83       	std	Y+4, r25	; 0x04
    4694:	8b 83       	std	Y+3, r24	; 0x03
    4696:	8b 81       	ldd	r24, Y+3	; 0x03
    4698:	9c 81       	ldd	r25, Y+4	; 0x04
    469a:	01 97       	sbiw	r24, 0x01	; 1
    469c:	f1 f7       	brne	.-4      	; 0x469a <H_Buzzer_Void_BuzzerTriple+0x484>
    469e:	9c 83       	std	Y+4, r25	; 0x04
    46a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46a2:	8d 81       	ldd	r24, Y+5	; 0x05
    46a4:	9e 81       	ldd	r25, Y+6	; 0x06
    46a6:	01 97       	sbiw	r24, 0x01	; 1
    46a8:	9e 83       	std	Y+6, r25	; 0x06
    46aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ac:	8d 81       	ldd	r24, Y+5	; 0x05
    46ae:	9e 81       	ldd	r25, Y+6	; 0x06
    46b0:	00 97       	sbiw	r24, 0x00	; 0
    46b2:	69 f7       	brne	.-38     	; 0x468e <H_Buzzer_Void_BuzzerTriple+0x478>
    46b4:	14 c0       	rjmp	.+40     	; 0x46de <H_Buzzer_Void_BuzzerTriple+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46b6:	6f 81       	ldd	r22, Y+7	; 0x07
    46b8:	78 85       	ldd	r23, Y+8	; 0x08
    46ba:	89 85       	ldd	r24, Y+9	; 0x09
    46bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    46be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c2:	dc 01       	movw	r26, r24
    46c4:	cb 01       	movw	r24, r22
    46c6:	9e 83       	std	Y+6, r25	; 0x06
    46c8:	8d 83       	std	Y+5, r24	; 0x05
    46ca:	8d 81       	ldd	r24, Y+5	; 0x05
    46cc:	9e 81       	ldd	r25, Y+6	; 0x06
    46ce:	9a 83       	std	Y+2, r25	; 0x02
    46d0:	89 83       	std	Y+1, r24	; 0x01
    46d2:	89 81       	ldd	r24, Y+1	; 0x01
    46d4:	9a 81       	ldd	r25, Y+2	; 0x02
    46d6:	01 97       	sbiw	r24, 0x01	; 1
    46d8:	f1 f7       	brne	.-4      	; 0x46d6 <H_Buzzer_Void_BuzzerTriple+0x4c0>
    46da:	9a 83       	std	Y+2, r25	; 0x02
    46dc:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    46de:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <H_Buzzer_Void_BuzzerOff>
 }
    46e2:	ca 5b       	subi	r28, 0xBA	; 186
    46e4:	df 4f       	sbci	r29, 0xFF	; 255
    46e6:	0f b6       	in	r0, 0x3f	; 63
    46e8:	f8 94       	cli
    46ea:	de bf       	out	0x3e, r29	; 62
    46ec:	0f be       	out	0x3f, r0	; 63
    46ee:	cd bf       	out	0x3d, r28	; 61
    46f0:	cf 91       	pop	r28
    46f2:	df 91       	pop	r29
    46f4:	1f 91       	pop	r17
    46f6:	0f 91       	pop	r16
    46f8:	08 95       	ret

000046fa <H_Buzzer_Void_BuzzerLong>:
 void H_Buzzer_Void_BuzzerLong(void)
 {
    46fa:	df 93       	push	r29
    46fc:	cf 93       	push	r28
    46fe:	cd b7       	in	r28, 0x3d	; 61
    4700:	de b7       	in	r29, 0x3e	; 62
    4702:	2e 97       	sbiw	r28, 0x0e	; 14
    4704:	0f b6       	in	r0, 0x3f	; 63
    4706:	f8 94       	cli
    4708:	de bf       	out	0x3e, r29	; 62
    470a:	0f be       	out	0x3f, r0	; 63
    470c:	cd bf       	out	0x3d, r28	; 61
	 H_Buzzer_Void_BuzzerOn();
    470e:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <H_Buzzer_Void_BuzzerOn>
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	90 e4       	ldi	r25, 0x40	; 64
    4716:	ac e9       	ldi	r26, 0x9C	; 156
    4718:	b5 e4       	ldi	r27, 0x45	; 69
    471a:	8b 87       	std	Y+11, r24	; 0x0b
    471c:	9c 87       	std	Y+12, r25	; 0x0c
    471e:	ad 87       	std	Y+13, r26	; 0x0d
    4720:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4722:	6b 85       	ldd	r22, Y+11	; 0x0b
    4724:	7c 85       	ldd	r23, Y+12	; 0x0c
    4726:	8d 85       	ldd	r24, Y+13	; 0x0d
    4728:	9e 85       	ldd	r25, Y+14	; 0x0e
    472a:	20 e0       	ldi	r18, 0x00	; 0
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	4a e7       	ldi	r20, 0x7A	; 122
    4730:	55 e4       	ldi	r21, 0x45	; 69
    4732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4736:	dc 01       	movw	r26, r24
    4738:	cb 01       	movw	r24, r22
    473a:	8f 83       	std	Y+7, r24	; 0x07
    473c:	98 87       	std	Y+8, r25	; 0x08
    473e:	a9 87       	std	Y+9, r26	; 0x09
    4740:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4742:	6f 81       	ldd	r22, Y+7	; 0x07
    4744:	78 85       	ldd	r23, Y+8	; 0x08
    4746:	89 85       	ldd	r24, Y+9	; 0x09
    4748:	9a 85       	ldd	r25, Y+10	; 0x0a
    474a:	20 e0       	ldi	r18, 0x00	; 0
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	40 e8       	ldi	r20, 0x80	; 128
    4750:	5f e3       	ldi	r21, 0x3F	; 63
    4752:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4756:	88 23       	and	r24, r24
    4758:	2c f4       	brge	.+10     	; 0x4764 <H_Buzzer_Void_BuzzerLong+0x6a>
		__ticks = 1;
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	9e 83       	std	Y+6, r25	; 0x06
    4760:	8d 83       	std	Y+5, r24	; 0x05
    4762:	3f c0       	rjmp	.+126    	; 0x47e2 <H_Buzzer_Void_BuzzerLong+0xe8>
	else if (__tmp > 65535)
    4764:	6f 81       	ldd	r22, Y+7	; 0x07
    4766:	78 85       	ldd	r23, Y+8	; 0x08
    4768:	89 85       	ldd	r24, Y+9	; 0x09
    476a:	9a 85       	ldd	r25, Y+10	; 0x0a
    476c:	20 e0       	ldi	r18, 0x00	; 0
    476e:	3f ef       	ldi	r19, 0xFF	; 255
    4770:	4f e7       	ldi	r20, 0x7F	; 127
    4772:	57 e4       	ldi	r21, 0x47	; 71
    4774:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4778:	18 16       	cp	r1, r24
    477a:	4c f5       	brge	.+82     	; 0x47ce <H_Buzzer_Void_BuzzerLong+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    477c:	6b 85       	ldd	r22, Y+11	; 0x0b
    477e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4780:	8d 85       	ldd	r24, Y+13	; 0x0d
    4782:	9e 85       	ldd	r25, Y+14	; 0x0e
    4784:	20 e0       	ldi	r18, 0x00	; 0
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	40 e2       	ldi	r20, 0x20	; 32
    478a:	51 e4       	ldi	r21, 0x41	; 65
    478c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4790:	dc 01       	movw	r26, r24
    4792:	cb 01       	movw	r24, r22
    4794:	bc 01       	movw	r22, r24
    4796:	cd 01       	movw	r24, r26
    4798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    479c:	dc 01       	movw	r26, r24
    479e:	cb 01       	movw	r24, r22
    47a0:	9e 83       	std	Y+6, r25	; 0x06
    47a2:	8d 83       	std	Y+5, r24	; 0x05
    47a4:	0f c0       	rjmp	.+30     	; 0x47c4 <H_Buzzer_Void_BuzzerLong+0xca>
    47a6:	80 e9       	ldi	r24, 0x90	; 144
    47a8:	91 e0       	ldi	r25, 0x01	; 1
    47aa:	9c 83       	std	Y+4, r25	; 0x04
    47ac:	8b 83       	std	Y+3, r24	; 0x03
    47ae:	8b 81       	ldd	r24, Y+3	; 0x03
    47b0:	9c 81       	ldd	r25, Y+4	; 0x04
    47b2:	01 97       	sbiw	r24, 0x01	; 1
    47b4:	f1 f7       	brne	.-4      	; 0x47b2 <H_Buzzer_Void_BuzzerLong+0xb8>
    47b6:	9c 83       	std	Y+4, r25	; 0x04
    47b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ba:	8d 81       	ldd	r24, Y+5	; 0x05
    47bc:	9e 81       	ldd	r25, Y+6	; 0x06
    47be:	01 97       	sbiw	r24, 0x01	; 1
    47c0:	9e 83       	std	Y+6, r25	; 0x06
    47c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c4:	8d 81       	ldd	r24, Y+5	; 0x05
    47c6:	9e 81       	ldd	r25, Y+6	; 0x06
    47c8:	00 97       	sbiw	r24, 0x00	; 0
    47ca:	69 f7       	brne	.-38     	; 0x47a6 <H_Buzzer_Void_BuzzerLong+0xac>
    47cc:	14 c0       	rjmp	.+40     	; 0x47f6 <H_Buzzer_Void_BuzzerLong+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ce:	6f 81       	ldd	r22, Y+7	; 0x07
    47d0:	78 85       	ldd	r23, Y+8	; 0x08
    47d2:	89 85       	ldd	r24, Y+9	; 0x09
    47d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    47d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47da:	dc 01       	movw	r26, r24
    47dc:	cb 01       	movw	r24, r22
    47de:	9e 83       	std	Y+6, r25	; 0x06
    47e0:	8d 83       	std	Y+5, r24	; 0x05
    47e2:	8d 81       	ldd	r24, Y+5	; 0x05
    47e4:	9e 81       	ldd	r25, Y+6	; 0x06
    47e6:	9a 83       	std	Y+2, r25	; 0x02
    47e8:	89 83       	std	Y+1, r24	; 0x01
    47ea:	89 81       	ldd	r24, Y+1	; 0x01
    47ec:	9a 81       	ldd	r25, Y+2	; 0x02
    47ee:	01 97       	sbiw	r24, 0x01	; 1
    47f0:	f1 f7       	brne	.-4      	; 0x47ee <H_Buzzer_Void_BuzzerLong+0xf4>
    47f2:	9a 83       	std	Y+2, r25	; 0x02
    47f4:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(10*BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    47f6:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <H_Buzzer_Void_BuzzerOff>
 }
    47fa:	2e 96       	adiw	r28, 0x0e	; 14
    47fc:	0f b6       	in	r0, 0x3f	; 63
    47fe:	f8 94       	cli
    4800:	de bf       	out	0x3e, r29	; 62
    4802:	0f be       	out	0x3f, r0	; 63
    4804:	cd bf       	out	0x3d, r28	; 61
    4806:	cf 91       	pop	r28
    4808:	df 91       	pop	r29
    480a:	08 95       	ret

0000480c <main>:
#include"ADC.h"

void A_ExtInt0Exc(void);

int main()
{
    480c:	df 93       	push	r29
    480e:	cf 93       	push	r28
    4810:	cd b7       	in	r28, 0x3d	; 61
    4812:	de b7       	in	r29, 0x3e	; 62
    4814:	62 97       	sbiw	r28, 0x12	; 18
    4816:	0f b6       	in	r0, 0x3f	; 63
    4818:	f8 94       	cli
    481a:	de bf       	out	0x3e, r29	; 62
    481c:	0f be       	out	0x3f, r0	; 63
    481e:	cd bf       	out	0x3d, r28	; 61
	M_ADC_Void_ADCInit();
    4820:	0e 94 46 0b 	call	0x168c	; 0x168c <M_ADC_Void_ADCInit>
	H_LCD_Void_LCDInit();
    4824:	0e 94 09 16 	call	0x2c12	; 0x2c12 <H_LCD_Void_LCDInit>
	f32 x=0;
    4828:	80 e0       	ldi	r24, 0x00	; 0
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	a0 e0       	ldi	r26, 0x00	; 0
    482e:	b0 e0       	ldi	r27, 0x00	; 0
    4830:	8f 87       	std	Y+15, r24	; 0x0f
    4832:	98 8b       	std	Y+16, r25	; 0x10
    4834:	a9 8b       	std	Y+17, r26	; 0x11
    4836:	ba 8b       	std	Y+18, r27	; 0x12

	while(1)
		{
		 	 x=M_ADC_U16_ADCRead();
    4838:	0e 94 a8 0b 	call	0x1750	; 0x1750 <M_ADC_U16_ADCRead>
    483c:	cc 01       	movw	r24, r24
    483e:	a0 e0       	ldi	r26, 0x00	; 0
    4840:	b0 e0       	ldi	r27, 0x00	; 0
    4842:	bc 01       	movw	r22, r24
    4844:	cd 01       	movw	r24, r26
    4846:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    484a:	dc 01       	movw	r26, r24
    484c:	cb 01       	movw	r24, r22
    484e:	8f 87       	std	Y+15, r24	; 0x0f
    4850:	98 8b       	std	Y+16, r25	; 0x10
    4852:	a9 8b       	std	Y+17, r26	; 0x11
    4854:	ba 8b       	std	Y+18, r27	; 0x12
		 	 H_LCD_Void_LCDWriteString("Temp =");
    4856:	80 e6       	ldi	r24, 0x60	; 96
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	0e 94 48 1b 	call	0x3690	; 0x3690 <H_LCD_Void_LCDWriteString>
		 	 H_LCD_Void_LCDWriteNumber(x/4);
    485e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4860:	78 89       	ldd	r23, Y+16	; 0x10
    4862:	89 89       	ldd	r24, Y+17	; 0x11
    4864:	9a 89       	ldd	r25, Y+18	; 0x12
    4866:	20 e0       	ldi	r18, 0x00	; 0
    4868:	30 e0       	ldi	r19, 0x00	; 0
    486a:	40 e8       	ldi	r20, 0x80	; 128
    486c:	50 e4       	ldi	r21, 0x40	; 64
    486e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4872:	dc 01       	movw	r26, r24
    4874:	cb 01       	movw	r24, r22
    4876:	bc 01       	movw	r22, r24
    4878:	cd 01       	movw	r24, r26
    487a:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <H_LCD_Void_LCDWriteNumber>
		 	 H_LCD_Void_LCDWriteCharacter('C');
    487e:	83 e4       	ldi	r24, 0x43	; 67
    4880:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <H_LCD_Void_LCDWriteCharacter>
    4884:	80 e0       	ldi	r24, 0x00	; 0
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	aa e7       	ldi	r26, 0x7A	; 122
    488a:	b4 e4       	ldi	r27, 0x44	; 68
    488c:	8b 87       	std	Y+11, r24	; 0x0b
    488e:	9c 87       	std	Y+12, r25	; 0x0c
    4890:	ad 87       	std	Y+13, r26	; 0x0d
    4892:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4894:	6b 85       	ldd	r22, Y+11	; 0x0b
    4896:	7c 85       	ldd	r23, Y+12	; 0x0c
    4898:	8d 85       	ldd	r24, Y+13	; 0x0d
    489a:	9e 85       	ldd	r25, Y+14	; 0x0e
    489c:	20 e0       	ldi	r18, 0x00	; 0
    489e:	30 e0       	ldi	r19, 0x00	; 0
    48a0:	4a e7       	ldi	r20, 0x7A	; 122
    48a2:	55 e4       	ldi	r21, 0x45	; 69
    48a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48a8:	dc 01       	movw	r26, r24
    48aa:	cb 01       	movw	r24, r22
    48ac:	8f 83       	std	Y+7, r24	; 0x07
    48ae:	98 87       	std	Y+8, r25	; 0x08
    48b0:	a9 87       	std	Y+9, r26	; 0x09
    48b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48b4:	6f 81       	ldd	r22, Y+7	; 0x07
    48b6:	78 85       	ldd	r23, Y+8	; 0x08
    48b8:	89 85       	ldd	r24, Y+9	; 0x09
    48ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    48bc:	20 e0       	ldi	r18, 0x00	; 0
    48be:	30 e0       	ldi	r19, 0x00	; 0
    48c0:	40 e8       	ldi	r20, 0x80	; 128
    48c2:	5f e3       	ldi	r21, 0x3F	; 63
    48c4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    48c8:	88 23       	and	r24, r24
    48ca:	2c f4       	brge	.+10     	; 0x48d6 <main+0xca>
		__ticks = 1;
    48cc:	81 e0       	ldi	r24, 0x01	; 1
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	9e 83       	std	Y+6, r25	; 0x06
    48d2:	8d 83       	std	Y+5, r24	; 0x05
    48d4:	3f c0       	rjmp	.+126    	; 0x4954 <main+0x148>
	else if (__tmp > 65535)
    48d6:	6f 81       	ldd	r22, Y+7	; 0x07
    48d8:	78 85       	ldd	r23, Y+8	; 0x08
    48da:	89 85       	ldd	r24, Y+9	; 0x09
    48dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    48de:	20 e0       	ldi	r18, 0x00	; 0
    48e0:	3f ef       	ldi	r19, 0xFF	; 255
    48e2:	4f e7       	ldi	r20, 0x7F	; 127
    48e4:	57 e4       	ldi	r21, 0x47	; 71
    48e6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    48ea:	18 16       	cp	r1, r24
    48ec:	4c f5       	brge	.+82     	; 0x4940 <main+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    48f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    48f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    48f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    48f6:	20 e0       	ldi	r18, 0x00	; 0
    48f8:	30 e0       	ldi	r19, 0x00	; 0
    48fa:	40 e2       	ldi	r20, 0x20	; 32
    48fc:	51 e4       	ldi	r21, 0x41	; 65
    48fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4902:	dc 01       	movw	r26, r24
    4904:	cb 01       	movw	r24, r22
    4906:	bc 01       	movw	r22, r24
    4908:	cd 01       	movw	r24, r26
    490a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    490e:	dc 01       	movw	r26, r24
    4910:	cb 01       	movw	r24, r22
    4912:	9e 83       	std	Y+6, r25	; 0x06
    4914:	8d 83       	std	Y+5, r24	; 0x05
    4916:	0f c0       	rjmp	.+30     	; 0x4936 <main+0x12a>
    4918:	80 e9       	ldi	r24, 0x90	; 144
    491a:	91 e0       	ldi	r25, 0x01	; 1
    491c:	9c 83       	std	Y+4, r25	; 0x04
    491e:	8b 83       	std	Y+3, r24	; 0x03
    4920:	8b 81       	ldd	r24, Y+3	; 0x03
    4922:	9c 81       	ldd	r25, Y+4	; 0x04
    4924:	01 97       	sbiw	r24, 0x01	; 1
    4926:	f1 f7       	brne	.-4      	; 0x4924 <main+0x118>
    4928:	9c 83       	std	Y+4, r25	; 0x04
    492a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    492c:	8d 81       	ldd	r24, Y+5	; 0x05
    492e:	9e 81       	ldd	r25, Y+6	; 0x06
    4930:	01 97       	sbiw	r24, 0x01	; 1
    4932:	9e 83       	std	Y+6, r25	; 0x06
    4934:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4936:	8d 81       	ldd	r24, Y+5	; 0x05
    4938:	9e 81       	ldd	r25, Y+6	; 0x06
    493a:	00 97       	sbiw	r24, 0x00	; 0
    493c:	69 f7       	brne	.-38     	; 0x4918 <main+0x10c>
    493e:	14 c0       	rjmp	.+40     	; 0x4968 <main+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4940:	6f 81       	ldd	r22, Y+7	; 0x07
    4942:	78 85       	ldd	r23, Y+8	; 0x08
    4944:	89 85       	ldd	r24, Y+9	; 0x09
    4946:	9a 85       	ldd	r25, Y+10	; 0x0a
    4948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    494c:	dc 01       	movw	r26, r24
    494e:	cb 01       	movw	r24, r22
    4950:	9e 83       	std	Y+6, r25	; 0x06
    4952:	8d 83       	std	Y+5, r24	; 0x05
    4954:	8d 81       	ldd	r24, Y+5	; 0x05
    4956:	9e 81       	ldd	r25, Y+6	; 0x06
    4958:	9a 83       	std	Y+2, r25	; 0x02
    495a:	89 83       	std	Y+1, r24	; 0x01
    495c:	89 81       	ldd	r24, Y+1	; 0x01
    495e:	9a 81       	ldd	r25, Y+2	; 0x02
    4960:	01 97       	sbiw	r24, 0x01	; 1
    4962:	f1 f7       	brne	.-4      	; 0x4960 <main+0x154>
    4964:	9a 83       	std	Y+2, r25	; 0x02
    4966:	89 83       	std	Y+1, r24	; 0x01
		 	 _delay_ms(1000);
		 	 H_LCD_Void_LCDClr();
    4968:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <H_LCD_Void_LCDClr>
    496c:	65 cf       	rjmp	.-310    	; 0x4838 <main+0x2c>

0000496e <A_ExtInt0Exc>:

	return 0;
}

void A_ExtInt0Exc(void)
{
    496e:	df 93       	push	r29
    4970:	cf 93       	push	r28
    4972:	cd b7       	in	r28, 0x3d	; 61
    4974:	de b7       	in	r29, 0x3e	; 62
    4976:	2e 97       	sbiw	r28, 0x0e	; 14
    4978:	0f b6       	in	r0, 0x3f	; 63
    497a:	f8 94       	cli
    497c:	de bf       	out	0x3e, r29	; 62
    497e:	0f be       	out	0x3f, r0	; 63
    4980:	cd bf       	out	0x3d, r28	; 61
	H_Led_Void_LedOn(BLU_LED);
    4982:	81 e0       	ldi	r24, 0x01	; 1
    4984:	0e 94 81 14 	call	0x2902	; 0x2902 <H_Led_Void_LedOn>
	H_Buzzer_Void_BuzzerOn();
    4988:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <H_Buzzer_Void_BuzzerOn>
    498c:	80 e0       	ldi	r24, 0x00	; 0
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	aa e7       	ldi	r26, 0x7A	; 122
    4992:	b4 e4       	ldi	r27, 0x44	; 68
    4994:	8b 87       	std	Y+11, r24	; 0x0b
    4996:	9c 87       	std	Y+12, r25	; 0x0c
    4998:	ad 87       	std	Y+13, r26	; 0x0d
    499a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    499c:	6b 85       	ldd	r22, Y+11	; 0x0b
    499e:	7c 85       	ldd	r23, Y+12	; 0x0c
    49a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    49a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    49a4:	20 e0       	ldi	r18, 0x00	; 0
    49a6:	30 e0       	ldi	r19, 0x00	; 0
    49a8:	4a e7       	ldi	r20, 0x7A	; 122
    49aa:	55 e4       	ldi	r21, 0x45	; 69
    49ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49b0:	dc 01       	movw	r26, r24
    49b2:	cb 01       	movw	r24, r22
    49b4:	8f 83       	std	Y+7, r24	; 0x07
    49b6:	98 87       	std	Y+8, r25	; 0x08
    49b8:	a9 87       	std	Y+9, r26	; 0x09
    49ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49bc:	6f 81       	ldd	r22, Y+7	; 0x07
    49be:	78 85       	ldd	r23, Y+8	; 0x08
    49c0:	89 85       	ldd	r24, Y+9	; 0x09
    49c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    49c4:	20 e0       	ldi	r18, 0x00	; 0
    49c6:	30 e0       	ldi	r19, 0x00	; 0
    49c8:	40 e8       	ldi	r20, 0x80	; 128
    49ca:	5f e3       	ldi	r21, 0x3F	; 63
    49cc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    49d0:	88 23       	and	r24, r24
    49d2:	2c f4       	brge	.+10     	; 0x49de <A_ExtInt0Exc+0x70>
		__ticks = 1;
    49d4:	81 e0       	ldi	r24, 0x01	; 1
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	9e 83       	std	Y+6, r25	; 0x06
    49da:	8d 83       	std	Y+5, r24	; 0x05
    49dc:	3f c0       	rjmp	.+126    	; 0x4a5c <A_ExtInt0Exc+0xee>
	else if (__tmp > 65535)
    49de:	6f 81       	ldd	r22, Y+7	; 0x07
    49e0:	78 85       	ldd	r23, Y+8	; 0x08
    49e2:	89 85       	ldd	r24, Y+9	; 0x09
    49e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	3f ef       	ldi	r19, 0xFF	; 255
    49ea:	4f e7       	ldi	r20, 0x7F	; 127
    49ec:	57 e4       	ldi	r21, 0x47	; 71
    49ee:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    49f2:	18 16       	cp	r1, r24
    49f4:	4c f5       	brge	.+82     	; 0x4a48 <A_ExtInt0Exc+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    49f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    49fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    49fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    49fe:	20 e0       	ldi	r18, 0x00	; 0
    4a00:	30 e0       	ldi	r19, 0x00	; 0
    4a02:	40 e2       	ldi	r20, 0x20	; 32
    4a04:	51 e4       	ldi	r21, 0x41	; 65
    4a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a0a:	dc 01       	movw	r26, r24
    4a0c:	cb 01       	movw	r24, r22
    4a0e:	bc 01       	movw	r22, r24
    4a10:	cd 01       	movw	r24, r26
    4a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a16:	dc 01       	movw	r26, r24
    4a18:	cb 01       	movw	r24, r22
    4a1a:	9e 83       	std	Y+6, r25	; 0x06
    4a1c:	8d 83       	std	Y+5, r24	; 0x05
    4a1e:	0f c0       	rjmp	.+30     	; 0x4a3e <A_ExtInt0Exc+0xd0>
    4a20:	80 e9       	ldi	r24, 0x90	; 144
    4a22:	91 e0       	ldi	r25, 0x01	; 1
    4a24:	9c 83       	std	Y+4, r25	; 0x04
    4a26:	8b 83       	std	Y+3, r24	; 0x03
    4a28:	8b 81       	ldd	r24, Y+3	; 0x03
    4a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    4a2c:	01 97       	sbiw	r24, 0x01	; 1
    4a2e:	f1 f7       	brne	.-4      	; 0x4a2c <A_ExtInt0Exc+0xbe>
    4a30:	9c 83       	std	Y+4, r25	; 0x04
    4a32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a34:	8d 81       	ldd	r24, Y+5	; 0x05
    4a36:	9e 81       	ldd	r25, Y+6	; 0x06
    4a38:	01 97       	sbiw	r24, 0x01	; 1
    4a3a:	9e 83       	std	Y+6, r25	; 0x06
    4a3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a40:	9e 81       	ldd	r25, Y+6	; 0x06
    4a42:	00 97       	sbiw	r24, 0x00	; 0
    4a44:	69 f7       	brne	.-38     	; 0x4a20 <A_ExtInt0Exc+0xb2>
    4a46:	14 c0       	rjmp	.+40     	; 0x4a70 <A_ExtInt0Exc+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a48:	6f 81       	ldd	r22, Y+7	; 0x07
    4a4a:	78 85       	ldd	r23, Y+8	; 0x08
    4a4c:	89 85       	ldd	r24, Y+9	; 0x09
    4a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a54:	dc 01       	movw	r26, r24
    4a56:	cb 01       	movw	r24, r22
    4a58:	9e 83       	std	Y+6, r25	; 0x06
    4a5a:	8d 83       	std	Y+5, r24	; 0x05
    4a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    4a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    4a60:	9a 83       	std	Y+2, r25	; 0x02
    4a62:	89 83       	std	Y+1, r24	; 0x01
    4a64:	89 81       	ldd	r24, Y+1	; 0x01
    4a66:	9a 81       	ldd	r25, Y+2	; 0x02
    4a68:	01 97       	sbiw	r24, 0x01	; 1
    4a6a:	f1 f7       	brne	.-4      	; 0x4a68 <A_ExtInt0Exc+0xfa>
    4a6c:	9a 83       	std	Y+2, r25	; 0x02
    4a6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	H_Led_Void_LedOff(BLU_LED);
    4a70:	81 e0       	ldi	r24, 0x01	; 1
    4a72:	0e 94 b0 14 	call	0x2960	; 0x2960 <H_Led_Void_LedOff>
	H_Buzzer_Void_BuzzerOff();
    4a76:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <H_Buzzer_Void_BuzzerOff>
}
    4a7a:	2e 96       	adiw	r28, 0x0e	; 14
    4a7c:	0f b6       	in	r0, 0x3f	; 63
    4a7e:	f8 94       	cli
    4a80:	de bf       	out	0x3e, r29	; 62
    4a82:	0f be       	out	0x3f, r0	; 63
    4a84:	cd bf       	out	0x3d, r28	; 61
    4a86:	cf 91       	pop	r28
    4a88:	df 91       	pop	r29
    4a8a:	08 95       	ret

00004a8c <__udivmodqi4>:
    4a8c:	99 1b       	sub	r25, r25
    4a8e:	79 e0       	ldi	r23, 0x09	; 9
    4a90:	04 c0       	rjmp	.+8      	; 0x4a9a <__udivmodqi4_ep>

00004a92 <__udivmodqi4_loop>:
    4a92:	99 1f       	adc	r25, r25
    4a94:	96 17       	cp	r25, r22
    4a96:	08 f0       	brcs	.+2      	; 0x4a9a <__udivmodqi4_ep>
    4a98:	96 1b       	sub	r25, r22

00004a9a <__udivmodqi4_ep>:
    4a9a:	88 1f       	adc	r24, r24
    4a9c:	7a 95       	dec	r23
    4a9e:	c9 f7       	brne	.-14     	; 0x4a92 <__udivmodqi4_loop>
    4aa0:	80 95       	com	r24
    4aa2:	08 95       	ret

00004aa4 <__divmodsi4>:
    4aa4:	97 fb       	bst	r25, 7
    4aa6:	09 2e       	mov	r0, r25
    4aa8:	05 26       	eor	r0, r21
    4aaa:	0e d0       	rcall	.+28     	; 0x4ac8 <__divmodsi4_neg1>
    4aac:	57 fd       	sbrc	r21, 7
    4aae:	04 d0       	rcall	.+8      	; 0x4ab8 <__divmodsi4_neg2>
    4ab0:	14 d0       	rcall	.+40     	; 0x4ada <__udivmodsi4>
    4ab2:	0a d0       	rcall	.+20     	; 0x4ac8 <__divmodsi4_neg1>
    4ab4:	00 1c       	adc	r0, r0
    4ab6:	38 f4       	brcc	.+14     	; 0x4ac6 <__divmodsi4_exit>

00004ab8 <__divmodsi4_neg2>:
    4ab8:	50 95       	com	r21
    4aba:	40 95       	com	r20
    4abc:	30 95       	com	r19
    4abe:	21 95       	neg	r18
    4ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ac2:	4f 4f       	sbci	r20, 0xFF	; 255
    4ac4:	5f 4f       	sbci	r21, 0xFF	; 255

00004ac6 <__divmodsi4_exit>:
    4ac6:	08 95       	ret

00004ac8 <__divmodsi4_neg1>:
    4ac8:	f6 f7       	brtc	.-4      	; 0x4ac6 <__divmodsi4_exit>
    4aca:	90 95       	com	r25
    4acc:	80 95       	com	r24
    4ace:	70 95       	com	r23
    4ad0:	61 95       	neg	r22
    4ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    4ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ad8:	08 95       	ret

00004ada <__udivmodsi4>:
    4ada:	a1 e2       	ldi	r26, 0x21	; 33
    4adc:	1a 2e       	mov	r1, r26
    4ade:	aa 1b       	sub	r26, r26
    4ae0:	bb 1b       	sub	r27, r27
    4ae2:	fd 01       	movw	r30, r26
    4ae4:	0d c0       	rjmp	.+26     	; 0x4b00 <__udivmodsi4_ep>

00004ae6 <__udivmodsi4_loop>:
    4ae6:	aa 1f       	adc	r26, r26
    4ae8:	bb 1f       	adc	r27, r27
    4aea:	ee 1f       	adc	r30, r30
    4aec:	ff 1f       	adc	r31, r31
    4aee:	a2 17       	cp	r26, r18
    4af0:	b3 07       	cpc	r27, r19
    4af2:	e4 07       	cpc	r30, r20
    4af4:	f5 07       	cpc	r31, r21
    4af6:	20 f0       	brcs	.+8      	; 0x4b00 <__udivmodsi4_ep>
    4af8:	a2 1b       	sub	r26, r18
    4afa:	b3 0b       	sbc	r27, r19
    4afc:	e4 0b       	sbc	r30, r20
    4afe:	f5 0b       	sbc	r31, r21

00004b00 <__udivmodsi4_ep>:
    4b00:	66 1f       	adc	r22, r22
    4b02:	77 1f       	adc	r23, r23
    4b04:	88 1f       	adc	r24, r24
    4b06:	99 1f       	adc	r25, r25
    4b08:	1a 94       	dec	r1
    4b0a:	69 f7       	brne	.-38     	; 0x4ae6 <__udivmodsi4_loop>
    4b0c:	60 95       	com	r22
    4b0e:	70 95       	com	r23
    4b10:	80 95       	com	r24
    4b12:	90 95       	com	r25
    4b14:	9b 01       	movw	r18, r22
    4b16:	ac 01       	movw	r20, r24
    4b18:	bd 01       	movw	r22, r26
    4b1a:	cf 01       	movw	r24, r30
    4b1c:	08 95       	ret

00004b1e <__prologue_saves__>:
    4b1e:	2f 92       	push	r2
    4b20:	3f 92       	push	r3
    4b22:	4f 92       	push	r4
    4b24:	5f 92       	push	r5
    4b26:	6f 92       	push	r6
    4b28:	7f 92       	push	r7
    4b2a:	8f 92       	push	r8
    4b2c:	9f 92       	push	r9
    4b2e:	af 92       	push	r10
    4b30:	bf 92       	push	r11
    4b32:	cf 92       	push	r12
    4b34:	df 92       	push	r13
    4b36:	ef 92       	push	r14
    4b38:	ff 92       	push	r15
    4b3a:	0f 93       	push	r16
    4b3c:	1f 93       	push	r17
    4b3e:	cf 93       	push	r28
    4b40:	df 93       	push	r29
    4b42:	cd b7       	in	r28, 0x3d	; 61
    4b44:	de b7       	in	r29, 0x3e	; 62
    4b46:	ca 1b       	sub	r28, r26
    4b48:	db 0b       	sbc	r29, r27
    4b4a:	0f b6       	in	r0, 0x3f	; 63
    4b4c:	f8 94       	cli
    4b4e:	de bf       	out	0x3e, r29	; 62
    4b50:	0f be       	out	0x3f, r0	; 63
    4b52:	cd bf       	out	0x3d, r28	; 61
    4b54:	09 94       	ijmp

00004b56 <__epilogue_restores__>:
    4b56:	2a 88       	ldd	r2, Y+18	; 0x12
    4b58:	39 88       	ldd	r3, Y+17	; 0x11
    4b5a:	48 88       	ldd	r4, Y+16	; 0x10
    4b5c:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b5e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b60:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b62:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b64:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b66:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b68:	b9 84       	ldd	r11, Y+9	; 0x09
    4b6a:	c8 84       	ldd	r12, Y+8	; 0x08
    4b6c:	df 80       	ldd	r13, Y+7	; 0x07
    4b6e:	ee 80       	ldd	r14, Y+6	; 0x06
    4b70:	fd 80       	ldd	r15, Y+5	; 0x05
    4b72:	0c 81       	ldd	r16, Y+4	; 0x04
    4b74:	1b 81       	ldd	r17, Y+3	; 0x03
    4b76:	aa 81       	ldd	r26, Y+2	; 0x02
    4b78:	b9 81       	ldd	r27, Y+1	; 0x01
    4b7a:	ce 0f       	add	r28, r30
    4b7c:	d1 1d       	adc	r29, r1
    4b7e:	0f b6       	in	r0, 0x3f	; 63
    4b80:	f8 94       	cli
    4b82:	de bf       	out	0x3e, r29	; 62
    4b84:	0f be       	out	0x3f, r0	; 63
    4b86:	cd bf       	out	0x3d, r28	; 61
    4b88:	ed 01       	movw	r28, r26
    4b8a:	08 95       	ret

00004b8c <_exit>:
    4b8c:	f8 94       	cli

00004b8e <__stop_program>:
    4b8e:	ff cf       	rjmp	.-2      	; 0x4b8e <__stop_program>
