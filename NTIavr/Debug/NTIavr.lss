
NTIavr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000537e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  0000537e  00005412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008001a4  008001a4  00005556  2**0
                  ALLOC
  3 .stab         000051e4  00000000  00000000  00005558  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001aeb  00000000  00000000  0000a73c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000c227  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000c407  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000c639  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000eeca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  000104f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  000118d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00011ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00011ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012835  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__vector_10>
      2c:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f3 e5       	ldi	r31, 0x53	; 83
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3b       	cpi	r26, 0xB4	; 180
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <main>
      8a:	0c 94 bd 29 	jmp	0x537a	; 0x537a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 86 29 	jmp	0x530c	; 0x530c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e8       	ldi	r26, 0x8B	; 139
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a2 29 	jmp	0x5344	; 0x5344 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 92 29 	jmp	0x5324	; 0x5324 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ae 29 	jmp	0x535c	; 0x535c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 92 29 	jmp	0x5324	; 0x5324 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ae 29 	jmp	0x535c	; 0x535c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 29 	jmp	0x530c	; 0x530c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e8       	ldi	r24, 0x8B	; 139
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a2 29 	jmp	0x5344	; 0x5344 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8e 29 	jmp	0x531c	; 0x531c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e8       	ldi	r22, 0x8B	; 139
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 aa 29 	jmp	0x5354	; 0x5354 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 92 29 	jmp	0x5324	; 0x5324 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ae 29 	jmp	0x535c	; 0x535c <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 92 29 	jmp	0x5324	; 0x5324 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ae 29 	jmp	0x535c	; 0x535c <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 92 29 	jmp	0x5324	; 0x5324 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ae 29 	jmp	0x535c	; 0x535c <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 92 29 	jmp	0x5324	; 0x5324 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 ae 29 	jmp	0x535c	; 0x535c <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 8f 29 	jmp	0x531e	; 0x531e <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 ab 29 	jmp	0x5356	; 0x5356 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 96 29 	jmp	0x532c	; 0x532c <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 b2 29 	jmp	0x5364	; 0x5364 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 8e 29 	jmp	0x531c	; 0x531c <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 aa 29 	jmp	0x5354	; 0x5354 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	ed 56       	subi	r30, 0x6D	; 109
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <M_Timer0_Void_Init>:

static void (*PV_CallBack[2]) (void) = {NULL}; // array of two pointers to function(Over Flow function & Compare Match function)
static void (*PV_ICU_CallBack)(void) = NULL;

void M_Timer0_Void_Init(void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	#error("Wrong OC0 Mode")
#endif

	//step1 : choose mode
#elif(TIMER0_MODE == TIMER0_FAST_PWM_MODE )
	SetBit(TCCR0_REG,6);
     f52:	a3 e5       	ldi	r26, 0x53	; 83
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e3 e5       	ldi	r30, 0x53	; 83
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 64       	ori	r24, 0x40	; 64
     f5e:	8c 93       	st	X, r24
	SetBit(TCCR0_REG,3);
     f60:	a3 e5       	ldi	r26, 0x53	; 83
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e3 e5       	ldi	r30, 0x53	; 83
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	88 60       	ori	r24, 0x08	; 8
     f6c:	8c 93       	st	X, r24

	//step2 : choose OC0 mode
#if(TIMER0_OC0_PIN_MODE == TIMER0_OC0_MODE_PWM_NON_INVERTING || TIMER0_OC0_PIN_MODE == TIMER0_OC0_MODE_PWM_INVERTING)

	TCCR0_REG = (TCCR0_REG & TIMER0_OC0_MODE_MASK) | TIMER0_OC0_PIN_MODE ;
     f6e:	a3 e5       	ldi	r26, 0x53	; 83
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e3 e5       	ldi	r30, 0x53	; 83
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8f 7c       	andi	r24, 0xCF	; 207
     f7a:	80 62       	ori	r24, 0x20	; 32
     f7c:	8c 93       	st	X, r24
#endif

#endif


}
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <M_Timer0_Void_StartTimer>:
void M_Timer0_Void_StartTimer(void)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
	//step3 : choose prescaler   //timer starts once the prescaler is defined
#if(TIMER0_PRESCALER >= 0 && TIMER0_PRESCALER <= 7)
	TCCR0_REG = (TCCR0_REG & TIMER0_PRESCALER_MASK) | TIMER0_PRESCALER;
     f8c:	a3 e5       	ldi	r26, 0x53	; 83
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e3 e5       	ldi	r30, 0x53	; 83
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	88 7f       	andi	r24, 0xF8	; 248
     f98:	82 60       	ori	r24, 0x02	; 2
     f9a:	8c 93       	st	X, r24
#else
	#error("Wrong prescaler")
#endif
}
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <M_Timer0_Void_StopTimer>:
void M_Timer0_Void_StopTimer(void)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG = (TCCR0_REG & TIMER0_PRESCALER_MASK); //Stop counter by clearing prescaler mode pins
     faa:	a3 e5       	ldi	r26, 0x53	; 83
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e3 e5       	ldi	r30, 0x53	; 83
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	88 7f       	andi	r24, 0xF8	; 248
     fb6:	8c 93       	st	X, r24
}
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <M_Timer0_Void_InterruptEnable>:
void M_Timer0_Void_InterruptEnable(u8 IntID)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <M_Timer0_Void_InterruptEnable+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
	switch(IntID)
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	3b 83       	std	Y+3, r19	; 0x03
     fd4:	2a 83       	std	Y+2, r18	; 0x02
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	9b 81       	ldd	r25, Y+3	; 0x03
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	31 f0       	breq	.+12     	; 0xfea <M_Timer0_Void_InterruptEnable+0x2c>
     fde:	2a 81       	ldd	r18, Y+2	; 0x02
     fe0:	3b 81       	ldd	r19, Y+3	; 0x03
     fe2:	21 30       	cpi	r18, 0x01	; 1
     fe4:	31 05       	cpc	r19, r1
     fe6:	49 f0       	breq	.+18     	; 0xffa <M_Timer0_Void_InterruptEnable+0x3c>
     fe8:	0f c0       	rjmp	.+30     	; 0x1008 <M_Timer0_Void_InterruptEnable+0x4a>
	{
	case Timer0_OVF_INT_ID :
		SetBit(TIMSK_REG,0);
     fea:	a9 e5       	ldi	r26, 0x59	; 89
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e9 e5       	ldi	r30, 0x59	; 89
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	81 60       	ori	r24, 0x01	; 1
     ff6:	8c 93       	st	X, r24
     ff8:	07 c0       	rjmp	.+14     	; 0x1008 <M_Timer0_Void_InterruptEnable+0x4a>
		break;
	case Timer0_CMPMATCH_INT_ID :
		SetBit(TIMSK_REG,1);
     ffa:	a9 e5       	ldi	r26, 0x59	; 89
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e9 e5       	ldi	r30, 0x59	; 89
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	82 60       	ori	r24, 0x02	; 2
    1006:	8c 93       	st	X, r24
		break;
	default:
		break ;
	}

}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <M_Timer0_Void_InterruptDisable>:
void M_Timer0_Void_InterruptDisable(u8 IntID)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <M_Timer0_Void_InterruptDisable+0x6>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	89 83       	std	Y+1, r24	; 0x01
	switch(IntID)
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	3b 83       	std	Y+3, r19	; 0x03
    102a:	2a 83       	std	Y+2, r18	; 0x02
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	9b 81       	ldd	r25, Y+3	; 0x03
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	31 f0       	breq	.+12     	; 0x1040 <M_Timer0_Void_InterruptDisable+0x2c>
    1034:	2a 81       	ldd	r18, Y+2	; 0x02
    1036:	3b 81       	ldd	r19, Y+3	; 0x03
    1038:	21 30       	cpi	r18, 0x01	; 1
    103a:	31 05       	cpc	r19, r1
    103c:	49 f0       	breq	.+18     	; 0x1050 <M_Timer0_Void_InterruptDisable+0x3c>
    103e:	0f c0       	rjmp	.+30     	; 0x105e <M_Timer0_Void_InterruptDisable+0x4a>
	{
	case Timer0_OVF_INT_ID :
		ClrBit(TIMSK_REG,0);
    1040:	a9 e5       	ldi	r26, 0x59	; 89
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e9 e5       	ldi	r30, 0x59	; 89
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8e 7f       	andi	r24, 0xFE	; 254
    104c:	8c 93       	st	X, r24
    104e:	07 c0       	rjmp	.+14     	; 0x105e <M_Timer0_Void_InterruptDisable+0x4a>
		break;
	case Timer0_CMPMATCH_INT_ID :
		ClrBit(TIMSK_REG,1);
    1050:	a9 e5       	ldi	r26, 0x59	; 89
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e9 e5       	ldi	r30, 0x59	; 89
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8d 7f       	andi	r24, 0xFD	; 253
    105c:	8c 93       	st	X, r24
		break;
	default:
		break ;
	}
}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <M_Timer0_Void_SetPreload>:
void M_Timer0_Void_SetPreload(u8 Copy_U8_Preload)
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	0f 92       	push	r0
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG = Copy_U8_Preload;
    1076:	e2 e5       	ldi	r30, 0x52	; 82
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	80 83       	st	Z, r24
}
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <M_Timer0_Void_SetCmpMatch>:
void M_Timer0_Void_SetCmpMatch(u8 Copy_U8_CmpMatch)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	0f 92       	push	r0
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG = Copy_U8_CmpMatch;
    1092:	ec e5       	ldi	r30, 0x5C	; 92
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	80 83       	st	Z, r24
}
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <M_Timer0_Void_SetCallBackFun>:
void M_Timer0_Void_SetCallBackFun(void (*PtrFun)(void) ,u8 IntID)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <M_Timer0_Void_SetCallBackFun+0x6>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <M_Timer0_Void_SetCallBackFun+0x8>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	9a 83       	std	Y+2, r25	; 0x02
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	6b 83       	std	Y+3, r22	; 0x03
	switch(IntID)
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3d 83       	std	Y+5, r19	; 0x05
    10be:	2c 83       	std	Y+4, r18	; 0x04
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	9d 81       	ldd	r25, Y+5	; 0x05
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	31 f0       	breq	.+12     	; 0x10d4 <M_Timer0_Void_SetCallBackFun+0x32>
    10c8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ca:	3d 81       	ldd	r19, Y+5	; 0x05
    10cc:	21 30       	cpi	r18, 0x01	; 1
    10ce:	31 05       	cpc	r19, r1
    10d0:	41 f0       	breq	.+16     	; 0x10e2 <M_Timer0_Void_SetCallBackFun+0x40>
    10d2:	0d c0       	rjmp	.+26     	; 0x10ee <M_Timer0_Void_SetCallBackFun+0x4c>
	{
	case Timer0_OVF_INT_ID :
		PV_CallBack[Timer0_OVF_INT_ID] = PtrFun;
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	90 93 a5 01 	sts	0x01A5, r25
    10dc:	80 93 a4 01 	sts	0x01A4, r24
    10e0:	06 c0       	rjmp	.+12     	; 0x10ee <M_Timer0_Void_SetCallBackFun+0x4c>
		break;
	case Timer0_CMPMATCH_INT_ID :
		PV_CallBack[Timer0_CMPMATCH_INT_ID] = PtrFun;
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	9a 81       	ldd	r25, Y+2	; 0x02
    10e6:	90 93 a7 01 	sts	0x01A7, r25
    10ea:	80 93 a6 01 	sts	0x01A6, r24
		break;
	default:
		break ;
	}
}
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    10fe:	1f 92       	push	r1
    1100:	0f 92       	push	r0
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	0f 92       	push	r0
    1106:	11 24       	eor	r1, r1
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	ef 93       	push	r30
    111e:	ff 93       	push	r31
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
	if(PV_CallBack[Timer0_OVF_INT_ID] != NULL)
    1128:	80 91 a4 01 	lds	r24, 0x01A4
    112c:	90 91 a5 01 	lds	r25, 0x01A5
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	29 f0       	breq	.+10     	; 0x113e <__vector_11+0x40>
		PV_CallBack[Timer0_OVF_INT_ID]();
    1134:	e0 91 a4 01 	lds	r30, 0x01A4
    1138:	f0 91 a5 01 	lds	r31, 0x01A5
    113c:	09 95       	icall
}
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	ff 91       	pop	r31
    1144:	ef 91       	pop	r30
    1146:	bf 91       	pop	r27
    1148:	af 91       	pop	r26
    114a:	9f 91       	pop	r25
    114c:	8f 91       	pop	r24
    114e:	7f 91       	pop	r23
    1150:	6f 91       	pop	r22
    1152:	5f 91       	pop	r21
    1154:	4f 91       	pop	r20
    1156:	3f 91       	pop	r19
    1158:	2f 91       	pop	r18
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	0f 90       	pop	r0
    1160:	1f 90       	pop	r1
    1162:	18 95       	reti

00001164 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1164:	1f 92       	push	r1
    1166:	0f 92       	push	r0
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	0f 92       	push	r0
    116c:	11 24       	eor	r1, r1
    116e:	2f 93       	push	r18
    1170:	3f 93       	push	r19
    1172:	4f 93       	push	r20
    1174:	5f 93       	push	r21
    1176:	6f 93       	push	r22
    1178:	7f 93       	push	r23
    117a:	8f 93       	push	r24
    117c:	9f 93       	push	r25
    117e:	af 93       	push	r26
    1180:	bf 93       	push	r27
    1182:	ef 93       	push	r30
    1184:	ff 93       	push	r31
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
	if(PV_CallBack[Timer0_CMPMATCH_INT_ID] != NULL )
    118e:	80 91 a6 01 	lds	r24, 0x01A6
    1192:	90 91 a7 01 	lds	r25, 0x01A7
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	29 f0       	breq	.+10     	; 0x11a4 <__vector_10+0x40>
		PV_CallBack[Timer0_CMPMATCH_INT_ID]();
    119a:	e0 91 a6 01 	lds	r30, 0x01A6
    119e:	f0 91 a7 01 	lds	r31, 0x01A7
    11a2:	09 95       	icall
}
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	ff 91       	pop	r31
    11aa:	ef 91       	pop	r30
    11ac:	bf 91       	pop	r27
    11ae:	af 91       	pop	r26
    11b0:	9f 91       	pop	r25
    11b2:	8f 91       	pop	r24
    11b4:	7f 91       	pop	r23
    11b6:	6f 91       	pop	r22
    11b8:	5f 91       	pop	r21
    11ba:	4f 91       	pop	r20
    11bc:	3f 91       	pop	r19
    11be:	2f 91       	pop	r18
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	0f 90       	pop	r0
    11c6:	1f 90       	pop	r1
    11c8:	18 95       	reti

000011ca <M_Timer0_Void_SetFastPWM>:


void M_Timer0_Void_SetFastPWM(u8 Copy_U8_DutyCycle)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <M_Timer0_Void_SetFastPWM+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <M_Timer0_Void_SetFastPWM+0x8>
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	89 83       	std	Y+1, r24	; 0x01
#if (TIMER0_MODE == TIMER0_FAST_PWM_MODE )
	if(Copy_U8_DutyCycle > 100)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	85 36       	cpi	r24, 0x65	; 101
    11de:	08 f5       	brcc	.+66     	; 0x1222 <M_Timer0_Void_SetFastPWM+0x58>
		return;
#if(TIMER0_OC0_PIN_MODE == TIMER0_OC0_MODE_PWM_NON_INVERTING)
	OCR0_REG = abs(((Copy_U8_DutyCycle * 256) / 100) - 1);
    11e0:	8c e5       	ldi	r24, 0x5C	; 92
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9d 83       	std	Y+5, r25	; 0x05
    11e6:	8c 83       	std	Y+4, r24	; 0x04
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	98 2f       	mov	r25, r24
    11f0:	88 27       	eor	r24, r24
    11f2:	24 e6       	ldi	r18, 0x64	; 100
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	b9 01       	movw	r22, r18
    11f8:	0e 94 22 29 	call	0x5244	; 0x5244 <__divmodhi4>
    11fc:	cb 01       	movw	r24, r22
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	9b 83       	std	Y+3, r25	; 0x03
    1202:	8a 83       	std	Y+2, r24	; 0x02
    1204:	ea 81       	ldd	r30, Y+2	; 0x02
    1206:	fb 81       	ldd	r31, Y+3	; 0x03
    1208:	ff 23       	and	r31, r31
    120a:	3c f4       	brge	.+14     	; 0x121a <M_Timer0_Void_SetFastPWM+0x50>
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	9b 81       	ldd	r25, Y+3	; 0x03
    1210:	90 95       	com	r25
    1212:	81 95       	neg	r24
    1214:	9f 4f       	sbci	r25, 0xFF	; 255
    1216:	9b 83       	std	Y+3, r25	; 0x03
    1218:	8a 83       	std	Y+2, r24	; 0x02
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	ec 81       	ldd	r30, Y+4	; 0x04
    121e:	fd 81       	ldd	r31, Y+5	; 0x05
    1220:	80 83       	st	Z, r24
#else
	#error("Wrong OC0 Mode")
#endif

#endif
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <M_Timer0_Void_SetPhaseCorrectPWM>:


void M_Timer0_Void_SetPhaseCorrectPWM(u8 Copy_U8_DutyCycle)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	0f 92       	push	r0
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	89 83       	std	Y+1, r24	; 0x01
#else
	#error("Wrong OC0 Mode")
#endif

#endif
}
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <M_Timer1_Void_Init>:


/************************************INPUT_CAPTURE_UNIT_(ICU)_IN_TIMER_1*************************************************************************************/

void M_Timer1_Void_Init(void)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
	//set timer1 mode  (normal mode)
	ClrBit(TCCR1A_REG,0);
    124e:	af e4       	ldi	r26, 0x4F	; 79
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ef e4       	ldi	r30, 0x4F	; 79
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	8e 7f       	andi	r24, 0xFE	; 254
    125a:	8c 93       	st	X, r24
	ClrBit(TCCR1A_REG,1);
    125c:	af e4       	ldi	r26, 0x4F	; 79
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	ef e4       	ldi	r30, 0x4F	; 79
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	8d 7f       	andi	r24, 0xFD	; 253
    1268:	8c 93       	st	X, r24
	ClrBit(TCCR1B_REG,3);
    126a:	ae e4       	ldi	r26, 0x4E	; 78
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	ee e4       	ldi	r30, 0x4E	; 78
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	87 7f       	andi	r24, 0xF7	; 247
    1276:	8c 93       	st	X, r24
	ClrBit(TCCR1B_REG,4);
    1278:	ae e4       	ldi	r26, 0x4E	; 78
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	ee e4       	ldi	r30, 0x4E	; 78
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	8f 7e       	andi	r24, 0xEF	; 239
    1284:	8c 93       	st	X, r24
	//set prescaler
	ClrBit(TCCR1B_REG,0);
    1286:	ae e4       	ldi	r26, 0x4E	; 78
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	ee e4       	ldi	r30, 0x4E	; 78
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8e 7f       	andi	r24, 0xFE	; 254
    1292:	8c 93       	st	X, r24
	SetBit(TCCR1B_REG,1);
    1294:	ae e4       	ldi	r26, 0x4E	; 78
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	ee e4       	ldi	r30, 0x4E	; 78
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	82 60       	ori	r24, 0x02	; 2
    12a0:	8c 93       	st	X, r24
	ClrBit(TCCR1B_REG,2);
    12a2:	ae e4       	ldi	r26, 0x4E	; 78
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	ee e4       	ldi	r30, 0x4E	; 78
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8b 7f       	andi	r24, 0xFB	; 251
    12ae:	8c 93       	st	X, r24
}
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <M_Timer1_Void_ICUInit>:
void M_Timer1_Void_ICUInit(void)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	//set ICU trigger on rising edge
	SetBit(TCCR1B_REG,6);
    12be:	ae e4       	ldi	r26, 0x4E	; 78
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	ee e4       	ldi	r30, 0x4E	; 78
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	80 64       	ori	r24, 0x40	; 64
    12ca:	8c 93       	st	X, r24
}
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <M_Timer1_Void_Settrigger>:
void M_Timer1_Void_Settrigger(u8 Copy_U8_Trigger)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <M_Timer1_Void_Settrigger+0x6>
    12d8:	0f 92       	push	r0
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Trigger)
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	3b 83       	std	Y+3, r19	; 0x03
    12e8:	2a 83       	std	Y+2, r18	; 0x02
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	9b 81       	ldd	r25, Y+3	; 0x03
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	31 f0       	breq	.+12     	; 0x12fe <M_Timer1_Void_Settrigger+0x2c>
    12f2:	2a 81       	ldd	r18, Y+2	; 0x02
    12f4:	3b 81       	ldd	r19, Y+3	; 0x03
    12f6:	21 30       	cpi	r18, 0x01	; 1
    12f8:	31 05       	cpc	r19, r1
    12fa:	49 f0       	breq	.+18     	; 0x130e <M_Timer1_Void_Settrigger+0x3c>
    12fc:	0f c0       	rjmp	.+30     	; 0x131c <M_Timer1_Void_Settrigger+0x4a>
	{
	case Timer1_RISING_EDGE_TRIGGER :
		SetBit(TCCR1B_REG,6);
    12fe:	ae e4       	ldi	r26, 0x4E	; 78
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ee e4       	ldi	r30, 0x4E	; 78
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	80 64       	ori	r24, 0x40	; 64
    130a:	8c 93       	st	X, r24
    130c:	07 c0       	rjmp	.+14     	; 0x131c <M_Timer1_Void_Settrigger+0x4a>
		break;
	case Timer1_FALLING_EDGE_TRIGGER :
		ClrBit(TCCR1B_REG,6);
    130e:	ae e4       	ldi	r26, 0x4E	; 78
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ee e4       	ldi	r30, 0x4E	; 78
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8f 7b       	andi	r24, 0xBF	; 191
    131a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <M_Timer1_Void_InterruptEnable>:
void M_Timer1_Void_InterruptEnable(void)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
	SetBit(TIMSK_REG,5);
    1330:	a9 e5       	ldi	r26, 0x59	; 89
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e9 e5       	ldi	r30, 0x59	; 89
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	80 62       	ori	r24, 0x20	; 32
    133c:	8c 93       	st	X, r24
}
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <M_Timer1_Void_InterruptDisable>:
void M_Timer1_Void_InterruptDisable(void)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
	ClrBit(TIMSK_REG,5);
    134c:	a9 e5       	ldi	r26, 0x59	; 89
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e9 e5       	ldi	r30, 0x59	; 89
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	8f 7d       	andi	r24, 0xDF	; 223
    1358:	8c 93       	st	X, r24
}
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <M_Timer1_Void_SetCallBackFun>:
void M_Timer1_Void_SetCallBackFun(void (*PtrFun)(void))
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <M_Timer1_Void_SetCallBackFun+0x6>
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	89 83       	std	Y+1, r24	; 0x01
	PV_ICU_CallBack = PtrFun;
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	90 93 a9 01 	sts	0x01A9, r25
    1376:	80 93 a8 01 	sts	0x01A8, r24
}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <M_Timer1_Void_InputCapture>:
u16 M_Timer1_Void_InputCapture(void)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	return ICR_REG ;
    138c:	e6 e4       	ldi	r30, 0x46	; 70
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	91 81       	ldd	r25, Z+1	; 0x01
}
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    139a:	1f 92       	push	r1
    139c:	0f 92       	push	r0
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	0f 92       	push	r0
    13a2:	11 24       	eor	r1, r1
    13a4:	2f 93       	push	r18
    13a6:	3f 93       	push	r19
    13a8:	4f 93       	push	r20
    13aa:	5f 93       	push	r21
    13ac:	6f 93       	push	r22
    13ae:	7f 93       	push	r23
    13b0:	8f 93       	push	r24
    13b2:	9f 93       	push	r25
    13b4:	af 93       	push	r26
    13b6:	bf 93       	push	r27
    13b8:	ef 93       	push	r30
    13ba:	ff 93       	push	r31
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	if(PV_ICU_CallBack != NULL )
    13c4:	80 91 a8 01 	lds	r24, 0x01A8
    13c8:	90 91 a9 01 	lds	r25, 0x01A9
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	29 f0       	breq	.+10     	; 0x13da <__vector_6+0x40>
		PV_ICU_CallBack();
    13d0:	e0 91 a8 01 	lds	r30, 0x01A8
    13d4:	f0 91 a9 01 	lds	r31, 0x01A9
    13d8:	09 95       	icall
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	ff 91       	pop	r31
    13e0:	ef 91       	pop	r30
    13e2:	bf 91       	pop	r27
    13e4:	af 91       	pop	r26
    13e6:	9f 91       	pop	r25
    13e8:	8f 91       	pop	r24
    13ea:	7f 91       	pop	r23
    13ec:	6f 91       	pop	r22
    13ee:	5f 91       	pop	r21
    13f0:	4f 91       	pop	r20
    13f2:	3f 91       	pop	r19
    13f4:	2f 91       	pop	r18
    13f6:	0f 90       	pop	r0
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	0f 90       	pop	r0
    13fc:	1f 90       	pop	r1
    13fe:	18 95       	reti

00001400 <M_GIE_Void_Enable>:
#include "GIE_Private.h"
#include "GIE_Config.h"
#include "GIE_Interface.h"

void M_GIE_Void_Enable(void)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
	//SetBit(SREG_REG,7);
	asm("SEI");		//accessing registers not on the address bus by assembly
    1408:	78 94       	sei
}
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <M_GIE_Void_Disable>:
void M_GIE_Void_Disable(void)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
	//ClrBit(SREG_REG,7);
	asm("CLI");		//accessing registers not on the address bus by assembly
    1418:	f8 94       	cli
}
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <M_ExtInt_Void_ExtInt0Init>:
#include"ExtInt.h"


void (*ExtInt_CallBack)(void) = NULL;				//global pointer to function for ISR
void M_ExtInt_Void_ExtInt0Init()
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
#if SENSE_CONTROL == FALLING_EDGE
	//to select falling edge
	ClrBit(MCUCR_REG,0);
    1428:	a5 e5       	ldi	r26, 0x55	; 85
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e5 e5       	ldi	r30, 0x55	; 85
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8e 7f       	andi	r24, 0xFE	; 254
    1434:	8c 93       	st	X, r24
	SetBit(MCUCR_REG,1);
    1436:	a5 e5       	ldi	r26, 0x55	; 85
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e5 e5       	ldi	r30, 0x55	; 85
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	82 60       	ori	r24, 0x02	; 2
    1442:	8c 93       	st	X, r24
	ClrBit(MCUCR_REG,0);
	ClrBit(MCUCR_REG,1);
#endif

	//to enable local interrupt for int0
	SetBit(GICR_REG,6);
    1444:	ab e5       	ldi	r26, 0x5B	; 91
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	eb e5       	ldi	r30, 0x5B	; 91
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	80 64       	ori	r24, 0x40	; 64
    1450:	8c 93       	st	X, r24
	//to enable global interrupt
	SetBit(SREG_REG,7);
    1452:	af e5       	ldi	r26, 0x5F	; 95
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ef e5       	ldi	r30, 0x5F	; 95
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	80 68       	ori	r24, 0x80	; 128
    145e:	8c 93       	st	X, r24
}
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <M_ExtInt_Void_ExtInt0SetCallBack>:

void M_ExtInt_Void_ExtInt0SetCallBack(void (*Local_ptr)(void))      //this is a callback function to avoid accessing the ISR by user
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	00 d0       	rcall	.+0      	; 0x146c <M_ExtInt_Void_ExtInt0SetCallBack+0x6>
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	9a 83       	std	Y+2, r25	; 0x02
    1472:	89 83       	std	Y+1, r24	; 0x01
	ExtInt_CallBack = Local_ptr;
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	9a 81       	ldd	r25, Y+2	; 0x02
    1478:	90 93 ab 01 	sts	0x01AB, r25
    147c:	80 93 aa 01 	sts	0x01AA, r24
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <__vector_1>:

ISR(INT0_vect)
{
    148a:	1f 92       	push	r1
    148c:	0f 92       	push	r0
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	0f 92       	push	r0
    1492:	11 24       	eor	r1, r1
    1494:	2f 93       	push	r18
    1496:	3f 93       	push	r19
    1498:	4f 93       	push	r20
    149a:	5f 93       	push	r21
    149c:	6f 93       	push	r22
    149e:	7f 93       	push	r23
    14a0:	8f 93       	push	r24
    14a2:	9f 93       	push	r25
    14a4:	af 93       	push	r26
    14a6:	bf 93       	push	r27
    14a8:	ef 93       	push	r30
    14aa:	ff 93       	push	r31
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
	ExtInt_CallBack();
    14b4:	e0 91 aa 01 	lds	r30, 0x01AA
    14b8:	f0 91 ab 01 	lds	r31, 0x01AB
    14bc:	09 95       	icall
}
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	ff 91       	pop	r31
    14c4:	ef 91       	pop	r30
    14c6:	bf 91       	pop	r27
    14c8:	af 91       	pop	r26
    14ca:	9f 91       	pop	r25
    14cc:	8f 91       	pop	r24
    14ce:	7f 91       	pop	r23
    14d0:	6f 91       	pop	r22
    14d2:	5f 91       	pop	r21
    14d4:	4f 91       	pop	r20
    14d6:	3f 91       	pop	r19
    14d8:	2f 91       	pop	r18
    14da:	0f 90       	pop	r0
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	0f 90       	pop	r0
    14e0:	1f 90       	pop	r1
    14e2:	18 95       	reti

000014e4 <M_Dio_Void_PinMode>:
 */

#include"Dio.h"

void M_Dio_Void_PinMode(u8 Local_u8_Num,u8 Local_u8_Mode)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	2a 97       	sbiw	r28, 0x0a	; 10
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	8b 83       	std	Y+3, r24	; 0x03
    14fa:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8_Pin = Local_u8_Num % 10;
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9a e0       	ldi	r25, 0x0A	; 10
    1500:	69 2f       	mov	r22, r25
    1502:	0e 94 16 29 	call	0x522c	; 0x522c <__udivmodqi4>
    1506:	89 2f       	mov	r24, r25
    1508:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Port = Local_u8_Num / 10;
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9a e0       	ldi	r25, 0x0A	; 10
    150e:	69 2f       	mov	r22, r25
    1510:	0e 94 16 29 	call	0x522c	; 0x522c <__udivmodqi4>
    1514:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Mode)
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	3a 87       	std	Y+10, r19	; 0x0a
    151e:	29 87       	std	Y+9, r18	; 0x09
    1520:	89 85       	ldd	r24, Y+9	; 0x09
    1522:	9a 85       	ldd	r25, Y+10	; 0x0a
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	39 f0       	breq	.+14     	; 0x1536 <M_Dio_Void_PinMode+0x52>
    1528:	29 85       	ldd	r18, Y+9	; 0x09
    152a:	3a 85       	ldd	r19, Y+10	; 0x0a
    152c:	21 30       	cpi	r18, 0x01	; 1
    152e:	31 05       	cpc	r19, r1
    1530:	09 f4       	brne	.+2      	; 0x1534 <M_Dio_Void_PinMode+0x50>
    1532:	76 c0       	rjmp	.+236    	; 0x1620 <M_Dio_Void_PinMode+0x13c>
    1534:	e4 c0       	rjmp	.+456    	; 0x16fe <M_Dio_Void_PinMode+0x21a>
	{
	case INPUT:
		switch(Local_u8_Port)
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	38 87       	std	Y+8, r19	; 0x08
    153e:	2f 83       	std	Y+7, r18	; 0x07
    1540:	8f 81       	ldd	r24, Y+7	; 0x07
    1542:	98 85       	ldd	r25, Y+8	; 0x08
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	91 05       	cpc	r25, r1
    1548:	61 f1       	breq	.+88     	; 0x15a2 <M_Dio_Void_PinMode+0xbe>
    154a:	2f 81       	ldd	r18, Y+7	; 0x07
    154c:	38 85       	ldd	r19, Y+8	; 0x08
    154e:	23 30       	cpi	r18, 0x03	; 3
    1550:	31 05       	cpc	r19, r1
    1552:	34 f4       	brge	.+12     	; 0x1560 <M_Dio_Void_PinMode+0x7c>
    1554:	8f 81       	ldd	r24, Y+7	; 0x07
    1556:	98 85       	ldd	r25, Y+8	; 0x08
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	91 05       	cpc	r25, r1
    155c:	69 f0       	breq	.+26     	; 0x1578 <M_Dio_Void_PinMode+0x94>
    155e:	cf c0       	rjmp	.+414    	; 0x16fe <M_Dio_Void_PinMode+0x21a>
    1560:	2f 81       	ldd	r18, Y+7	; 0x07
    1562:	38 85       	ldd	r19, Y+8	; 0x08
    1564:	23 30       	cpi	r18, 0x03	; 3
    1566:	31 05       	cpc	r19, r1
    1568:	89 f1       	breq	.+98     	; 0x15cc <M_Dio_Void_PinMode+0xe8>
    156a:	8f 81       	ldd	r24, Y+7	; 0x07
    156c:	98 85       	ldd	r25, Y+8	; 0x08
    156e:	84 30       	cpi	r24, 0x04	; 4
    1570:	91 05       	cpc	r25, r1
    1572:	09 f4       	brne	.+2      	; 0x1576 <M_Dio_Void_PinMode+0x92>
    1574:	40 c0       	rjmp	.+128    	; 0x15f6 <M_Dio_Void_PinMode+0x112>
    1576:	c3 c0       	rjmp	.+390    	; 0x16fe <M_Dio_Void_PinMode+0x21a>
		{
			case 1:ClrBit(DDRA_REG,Local_u8_Pin); break;
    1578:	aa e3       	ldi	r26, 0x3A	; 58
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	ea e3       	ldi	r30, 0x3A	; 58
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <M_Dio_Void_PinMode+0xb2>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <M_Dio_Void_PinMode+0xae>
    159a:	80 95       	com	r24
    159c:	84 23       	and	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	ae c0       	rjmp	.+348    	; 0x16fe <M_Dio_Void_PinMode+0x21a>
			case 2:ClrBit(DDRB_REG,Local_u8_Pin); break;
    15a2:	a7 e3       	ldi	r26, 0x37	; 55
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e7 e3       	ldi	r30, 0x37	; 55
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <M_Dio_Void_PinMode+0xdc>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <M_Dio_Void_PinMode+0xd8>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	99 c0       	rjmp	.+306    	; 0x16fe <M_Dio_Void_PinMode+0x21a>
			case 3:ClrBit(DDRC_REG,Local_u8_Pin); break;
    15cc:	a4 e3       	ldi	r26, 0x34	; 52
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e4 e3       	ldi	r30, 0x34	; 52
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <M_Dio_Void_PinMode+0x106>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <M_Dio_Void_PinMode+0x102>
    15ee:	80 95       	com	r24
    15f0:	84 23       	and	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	84 c0       	rjmp	.+264    	; 0x16fe <M_Dio_Void_PinMode+0x21a>
			case 4:ClrBit(DDRD_REG,Local_u8_Pin); break;
    15f6:	a0 e3       	ldi	r26, 0x30	; 48
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e0 e3       	ldi	r30, 0x30	; 48
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <M_Dio_Void_PinMode+0x130>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <M_Dio_Void_PinMode+0x12c>
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	6f c0       	rjmp	.+222    	; 0x16fe <M_Dio_Void_PinMode+0x21a>
			default:						  break;
		}
		break;
	case OUTPUT:
		switch(Local_u8_Port)
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	3e 83       	std	Y+6, r19	; 0x06
    1628:	2d 83       	std	Y+5, r18	; 0x05
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	82 30       	cpi	r24, 0x02	; 2
    1630:	91 05       	cpc	r25, r1
    1632:	51 f1       	breq	.+84     	; 0x1688 <M_Dio_Void_PinMode+0x1a4>
    1634:	2d 81       	ldd	r18, Y+5	; 0x05
    1636:	3e 81       	ldd	r19, Y+6	; 0x06
    1638:	23 30       	cpi	r18, 0x03	; 3
    163a:	31 05       	cpc	r19, r1
    163c:	34 f4       	brge	.+12     	; 0x164a <M_Dio_Void_PinMode+0x166>
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	91 05       	cpc	r25, r1
    1646:	61 f0       	breq	.+24     	; 0x1660 <M_Dio_Void_PinMode+0x17c>
    1648:	5a c0       	rjmp	.+180    	; 0x16fe <M_Dio_Void_PinMode+0x21a>
    164a:	2d 81       	ldd	r18, Y+5	; 0x05
    164c:	3e 81       	ldd	r19, Y+6	; 0x06
    164e:	23 30       	cpi	r18, 0x03	; 3
    1650:	31 05       	cpc	r19, r1
    1652:	71 f1       	breq	.+92     	; 0x16b0 <M_Dio_Void_PinMode+0x1cc>
    1654:	8d 81       	ldd	r24, Y+5	; 0x05
    1656:	9e 81       	ldd	r25, Y+6	; 0x06
    1658:	84 30       	cpi	r24, 0x04	; 4
    165a:	91 05       	cpc	r25, r1
    165c:	e9 f1       	breq	.+122    	; 0x16d8 <M_Dio_Void_PinMode+0x1f4>
    165e:	4f c0       	rjmp	.+158    	; 0x16fe <M_Dio_Void_PinMode+0x21a>
		{
			case 1:SetBit(DDRA_REG,Local_u8_Pin); break;
    1660:	aa e3       	ldi	r26, 0x3A	; 58
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	ea e3       	ldi	r30, 0x3A	; 58
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	48 2f       	mov	r20, r24
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 2e       	mov	r0, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <M_Dio_Void_PinMode+0x19a>
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	0a 94       	dec	r0
    1680:	e2 f7       	brpl	.-8      	; 0x167a <M_Dio_Void_PinMode+0x196>
    1682:	84 2b       	or	r24, r20
    1684:	8c 93       	st	X, r24
    1686:	3b c0       	rjmp	.+118    	; 0x16fe <M_Dio_Void_PinMode+0x21a>
			case 2:SetBit(DDRB_REG,Local_u8_Pin); break;
    1688:	a7 e3       	ldi	r26, 0x37	; 55
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e7 e3       	ldi	r30, 0x37	; 55
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <M_Dio_Void_PinMode+0x1c2>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <M_Dio_Void_PinMode+0x1be>
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	27 c0       	rjmp	.+78     	; 0x16fe <M_Dio_Void_PinMode+0x21a>
			case 3:SetBit(DDRC_REG,Local_u8_Pin); break;
    16b0:	a4 e3       	ldi	r26, 0x34	; 52
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e4 e3       	ldi	r30, 0x34	; 52
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <M_Dio_Void_PinMode+0x1ea>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <M_Dio_Void_PinMode+0x1e6>
    16d2:	84 2b       	or	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	13 c0       	rjmp	.+38     	; 0x16fe <M_Dio_Void_PinMode+0x21a>
			case 4:SetBit(DDRD_REG,Local_u8_Pin); break;
    16d8:	a0 e3       	ldi	r26, 0x30	; 48
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e0 e3       	ldi	r30, 0x30	; 48
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <M_Dio_Void_PinMode+0x212>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <M_Dio_Void_PinMode+0x20e>
    16fa:	84 2b       	or	r24, r20
    16fc:	8c 93       	st	X, r24
			default:						  break;
		}
		break;
	}
}
    16fe:	2a 96       	adiw	r28, 0x0a	; 10
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <M_Dio_Void_PinWrite>:

void M_Dio_Void_PinWrite(u8 Local_u8_Num,u8 Local_u8_Mode)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	2a 97       	sbiw	r28, 0x0a	; 10
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	8b 83       	std	Y+3, r24	; 0x03
    1726:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8_Pin = Local_u8_Num % 10;
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9a e0       	ldi	r25, 0x0A	; 10
    172c:	69 2f       	mov	r22, r25
    172e:	0e 94 16 29 	call	0x522c	; 0x522c <__udivmodqi4>
    1732:	89 2f       	mov	r24, r25
    1734:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Port = Local_u8_Num / 10;
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9a e0       	ldi	r25, 0x0A	; 10
    173a:	69 2f       	mov	r22, r25
    173c:	0e 94 16 29 	call	0x522c	; 0x522c <__udivmodqi4>
    1740:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Mode)
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	3a 87       	std	Y+10, r19	; 0x0a
    174a:	29 87       	std	Y+9, r18	; 0x09
    174c:	89 85       	ldd	r24, Y+9	; 0x09
    174e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	39 f0       	breq	.+14     	; 0x1762 <M_Dio_Void_PinWrite+0x52>
    1754:	29 85       	ldd	r18, Y+9	; 0x09
    1756:	3a 85       	ldd	r19, Y+10	; 0x0a
    1758:	21 30       	cpi	r18, 0x01	; 1
    175a:	31 05       	cpc	r19, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <M_Dio_Void_PinWrite+0x50>
    175e:	76 c0       	rjmp	.+236    	; 0x184c <M_Dio_Void_PinWrite+0x13c>
    1760:	e4 c0       	rjmp	.+456    	; 0x192a <M_Dio_Void_PinWrite+0x21a>
	{
	case LOW:
		switch(Local_u8_Port)
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	38 87       	std	Y+8, r19	; 0x08
    176a:	2f 83       	std	Y+7, r18	; 0x07
    176c:	8f 81       	ldd	r24, Y+7	; 0x07
    176e:	98 85       	ldd	r25, Y+8	; 0x08
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	91 05       	cpc	r25, r1
    1774:	61 f1       	breq	.+88     	; 0x17ce <M_Dio_Void_PinWrite+0xbe>
    1776:	2f 81       	ldd	r18, Y+7	; 0x07
    1778:	38 85       	ldd	r19, Y+8	; 0x08
    177a:	23 30       	cpi	r18, 0x03	; 3
    177c:	31 05       	cpc	r19, r1
    177e:	34 f4       	brge	.+12     	; 0x178c <M_Dio_Void_PinWrite+0x7c>
    1780:	8f 81       	ldd	r24, Y+7	; 0x07
    1782:	98 85       	ldd	r25, Y+8	; 0x08
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	91 05       	cpc	r25, r1
    1788:	69 f0       	breq	.+26     	; 0x17a4 <M_Dio_Void_PinWrite+0x94>
    178a:	cf c0       	rjmp	.+414    	; 0x192a <M_Dio_Void_PinWrite+0x21a>
    178c:	2f 81       	ldd	r18, Y+7	; 0x07
    178e:	38 85       	ldd	r19, Y+8	; 0x08
    1790:	23 30       	cpi	r18, 0x03	; 3
    1792:	31 05       	cpc	r19, r1
    1794:	89 f1       	breq	.+98     	; 0x17f8 <M_Dio_Void_PinWrite+0xe8>
    1796:	8f 81       	ldd	r24, Y+7	; 0x07
    1798:	98 85       	ldd	r25, Y+8	; 0x08
    179a:	84 30       	cpi	r24, 0x04	; 4
    179c:	91 05       	cpc	r25, r1
    179e:	09 f4       	brne	.+2      	; 0x17a2 <M_Dio_Void_PinWrite+0x92>
    17a0:	40 c0       	rjmp	.+128    	; 0x1822 <M_Dio_Void_PinWrite+0x112>
    17a2:	c3 c0       	rjmp	.+390    	; 0x192a <M_Dio_Void_PinWrite+0x21a>
		{
			case 1:ClrBit(PORTA_REG,Local_u8_Pin); break;
    17a4:	ab e3       	ldi	r26, 0x3B	; 59
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	eb e3       	ldi	r30, 0x3B	; 59
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	48 2f       	mov	r20, r24
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 2e       	mov	r0, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <M_Dio_Void_PinWrite+0xb2>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	0a 94       	dec	r0
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <M_Dio_Void_PinWrite+0xae>
    17c6:	80 95       	com	r24
    17c8:	84 23       	and	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	ae c0       	rjmp	.+348    	; 0x192a <M_Dio_Void_PinWrite+0x21a>
			case 2:ClrBit(PORTB_REG,Local_u8_Pin); break;
    17ce:	a8 e3       	ldi	r26, 0x38	; 56
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e8 e3       	ldi	r30, 0x38	; 56
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	02 2e       	mov	r0, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <M_Dio_Void_PinWrite+0xdc>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <M_Dio_Void_PinWrite+0xd8>
    17f0:	80 95       	com	r24
    17f2:	84 23       	and	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	99 c0       	rjmp	.+306    	; 0x192a <M_Dio_Void_PinWrite+0x21a>
			case 3:ClrBit(PORTC_REG,Local_u8_Pin); break;
    17f8:	a5 e3       	ldi	r26, 0x35	; 53
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e5 e3       	ldi	r30, 0x35	; 53
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	48 2f       	mov	r20, r24
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <M_Dio_Void_PinWrite+0x106>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <M_Dio_Void_PinWrite+0x102>
    181a:	80 95       	com	r24
    181c:	84 23       	and	r24, r20
    181e:	8c 93       	st	X, r24
    1820:	84 c0       	rjmp	.+264    	; 0x192a <M_Dio_Void_PinWrite+0x21a>
			case 4:ClrBit(PORTD_REG,Local_u8_Pin); break;
    1822:	a1 e3       	ldi	r26, 0x31	; 49
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e1 e3       	ldi	r30, 0x31	; 49
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <M_Dio_Void_PinWrite+0x130>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <M_Dio_Void_PinWrite+0x12c>
    1844:	80 95       	com	r24
    1846:	84 23       	and	r24, r20
    1848:	8c 93       	st	X, r24
    184a:	6f c0       	rjmp	.+222    	; 0x192a <M_Dio_Void_PinWrite+0x21a>
			default:						   break;
		}
		break;
	case HIGH:
		switch(Local_u8_Port)
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	3e 83       	std	Y+6, r19	; 0x06
    1854:	2d 83       	std	Y+5, r18	; 0x05
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	82 30       	cpi	r24, 0x02	; 2
    185c:	91 05       	cpc	r25, r1
    185e:	51 f1       	breq	.+84     	; 0x18b4 <M_Dio_Void_PinWrite+0x1a4>
    1860:	2d 81       	ldd	r18, Y+5	; 0x05
    1862:	3e 81       	ldd	r19, Y+6	; 0x06
    1864:	23 30       	cpi	r18, 0x03	; 3
    1866:	31 05       	cpc	r19, r1
    1868:	34 f4       	brge	.+12     	; 0x1876 <M_Dio_Void_PinWrite+0x166>
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	91 05       	cpc	r25, r1
    1872:	61 f0       	breq	.+24     	; 0x188c <M_Dio_Void_PinWrite+0x17c>
    1874:	5a c0       	rjmp	.+180    	; 0x192a <M_Dio_Void_PinWrite+0x21a>
    1876:	2d 81       	ldd	r18, Y+5	; 0x05
    1878:	3e 81       	ldd	r19, Y+6	; 0x06
    187a:	23 30       	cpi	r18, 0x03	; 3
    187c:	31 05       	cpc	r19, r1
    187e:	71 f1       	breq	.+92     	; 0x18dc <M_Dio_Void_PinWrite+0x1cc>
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	84 30       	cpi	r24, 0x04	; 4
    1886:	91 05       	cpc	r25, r1
    1888:	e9 f1       	breq	.+122    	; 0x1904 <M_Dio_Void_PinWrite+0x1f4>
    188a:	4f c0       	rjmp	.+158    	; 0x192a <M_Dio_Void_PinWrite+0x21a>
		{
			case 1:SetBit(PORTA_REG,Local_u8_Pin); break;
    188c:	ab e3       	ldi	r26, 0x3B	; 59
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	eb e3       	ldi	r30, 0x3B	; 59
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 2e       	mov	r0, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <M_Dio_Void_PinWrite+0x19a>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <M_Dio_Void_PinWrite+0x196>
    18ae:	84 2b       	or	r24, r20
    18b0:	8c 93       	st	X, r24
    18b2:	3b c0       	rjmp	.+118    	; 0x192a <M_Dio_Void_PinWrite+0x21a>
			case 2:SetBit(PORTB_REG,Local_u8_Pin); break;
    18b4:	a8 e3       	ldi	r26, 0x38	; 56
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e8 e3       	ldi	r30, 0x38	; 56
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	48 2f       	mov	r20, r24
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 2e       	mov	r0, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <M_Dio_Void_PinWrite+0x1c2>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	0a 94       	dec	r0
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <M_Dio_Void_PinWrite+0x1be>
    18d6:	84 2b       	or	r24, r20
    18d8:	8c 93       	st	X, r24
    18da:	27 c0       	rjmp	.+78     	; 0x192a <M_Dio_Void_PinWrite+0x21a>
			case 3:SetBit(PORTC_REG,Local_u8_Pin); break;
    18dc:	a5 e3       	ldi	r26, 0x35	; 53
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e5 e3       	ldi	r30, 0x35	; 53
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	48 2f       	mov	r20, r24
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	02 2e       	mov	r0, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <M_Dio_Void_PinWrite+0x1ea>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	0a 94       	dec	r0
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <M_Dio_Void_PinWrite+0x1e6>
    18fe:	84 2b       	or	r24, r20
    1900:	8c 93       	st	X, r24
    1902:	13 c0       	rjmp	.+38     	; 0x192a <M_Dio_Void_PinWrite+0x21a>
			case 4:SetBit(PORTD_REG,Local_u8_Pin); break;
    1904:	a1 e3       	ldi	r26, 0x31	; 49
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e1 e3       	ldi	r30, 0x31	; 49
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	48 2f       	mov	r20, r24
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	02 2e       	mov	r0, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <M_Dio_Void_PinWrite+0x212>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	0a 94       	dec	r0
    1924:	e2 f7       	brpl	.-8      	; 0x191e <M_Dio_Void_PinWrite+0x20e>
    1926:	84 2b       	or	r24, r20
    1928:	8c 93       	st	X, r24
			default:						   break;
		}
		break;
	}
}
    192a:	2a 96       	adiw	r28, 0x0a	; 10
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <M_Dio_Void_PinTog>:


void M_Dio_Void_PinTog(u8 Local_u8_Num)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <M_Dio_Void_PinTog+0x6>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <M_Dio_Void_PinTog+0x8>
    1944:	0f 92       	push	r0
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8_Pin = Local_u8_Num % 10;
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9a e0       	ldi	r25, 0x0A	; 10
    1950:	69 2f       	mov	r22, r25
    1952:	0e 94 16 29 	call	0x522c	; 0x522c <__udivmodqi4>
    1956:	89 2f       	mov	r24, r25
    1958:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Port = Local_u8_Num / 10;
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9a e0       	ldi	r25, 0x0A	; 10
    195e:	69 2f       	mov	r22, r25
    1960:	0e 94 16 29 	call	0x522c	; 0x522c <__udivmodqi4>
    1964:	89 83       	std	Y+1, r24	; 0x01
		switch(Local_u8_Port)
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	3d 83       	std	Y+5, r19	; 0x05
    196e:	2c 83       	std	Y+4, r18	; 0x04
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	9d 81       	ldd	r25, Y+5	; 0x05
    1974:	82 30       	cpi	r24, 0x02	; 2
    1976:	91 05       	cpc	r25, r1
    1978:	51 f1       	breq	.+84     	; 0x19ce <M_Dio_Void_PinTog+0x92>
    197a:	2c 81       	ldd	r18, Y+4	; 0x04
    197c:	3d 81       	ldd	r19, Y+5	; 0x05
    197e:	23 30       	cpi	r18, 0x03	; 3
    1980:	31 05       	cpc	r19, r1
    1982:	34 f4       	brge	.+12     	; 0x1990 <M_Dio_Void_PinTog+0x54>
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	9d 81       	ldd	r25, Y+5	; 0x05
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	91 05       	cpc	r25, r1
    198c:	61 f0       	breq	.+24     	; 0x19a6 <M_Dio_Void_PinTog+0x6a>
    198e:	5a c0       	rjmp	.+180    	; 0x1a44 <M_Dio_Void_PinTog+0x108>
    1990:	2c 81       	ldd	r18, Y+4	; 0x04
    1992:	3d 81       	ldd	r19, Y+5	; 0x05
    1994:	23 30       	cpi	r18, 0x03	; 3
    1996:	31 05       	cpc	r19, r1
    1998:	71 f1       	breq	.+92     	; 0x19f6 <M_Dio_Void_PinTog+0xba>
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	9d 81       	ldd	r25, Y+5	; 0x05
    199e:	84 30       	cpi	r24, 0x04	; 4
    19a0:	91 05       	cpc	r25, r1
    19a2:	e9 f1       	breq	.+122    	; 0x1a1e <M_Dio_Void_PinTog+0xe2>
    19a4:	4f c0       	rjmp	.+158    	; 0x1a44 <M_Dio_Void_PinTog+0x108>
		{
			case 1:TogBit(PORTA_REG,Local_u8_Pin); break;
    19a6:	ab e3       	ldi	r26, 0x3B	; 59
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	eb e3       	ldi	r30, 0x3B	; 59
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	48 2f       	mov	r20, r24
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	02 2e       	mov	r0, r18
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <M_Dio_Void_PinTog+0x88>
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	0a 94       	dec	r0
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <M_Dio_Void_PinTog+0x84>
    19c8:	84 27       	eor	r24, r20
    19ca:	8c 93       	st	X, r24
    19cc:	3b c0       	rjmp	.+118    	; 0x1a44 <M_Dio_Void_PinTog+0x108>
			case 2:TogBit(PORTB_REG,Local_u8_Pin); break;
    19ce:	a8 e3       	ldi	r26, 0x38	; 56
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e8 e3       	ldi	r30, 0x38	; 56
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	48 2f       	mov	r20, r24
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	02 2e       	mov	r0, r18
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <M_Dio_Void_PinTog+0xb0>
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	0a 94       	dec	r0
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <M_Dio_Void_PinTog+0xac>
    19f0:	84 27       	eor	r24, r20
    19f2:	8c 93       	st	X, r24
    19f4:	27 c0       	rjmp	.+78     	; 0x1a44 <M_Dio_Void_PinTog+0x108>
			case 3:TogBit(PORTC_REG,Local_u8_Pin); break;
    19f6:	a5 e3       	ldi	r26, 0x35	; 53
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e5 e3       	ldi	r30, 0x35	; 53
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	48 2f       	mov	r20, r24
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 2e       	mov	r0, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <M_Dio_Void_PinTog+0xd8>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	0a 94       	dec	r0
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <M_Dio_Void_PinTog+0xd4>
    1a18:	84 27       	eor	r24, r20
    1a1a:	8c 93       	st	X, r24
    1a1c:	13 c0       	rjmp	.+38     	; 0x1a44 <M_Dio_Void_PinTog+0x108>
			case 4:TogBit(PORTD_REG,Local_u8_Pin); break;
    1a1e:	a1 e3       	ldi	r26, 0x31	; 49
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e1 e3       	ldi	r30, 0x31	; 49
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <M_Dio_Void_PinTog+0x100>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <M_Dio_Void_PinTog+0xfc>
    1a40:	84 27       	eor	r24, r20
    1a42:	8c 93       	st	X, r24
			default:						   break;
		}
}
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <M_Dio_U8_PinRead>:


u8 M_Dio_U8_PinRead(u8 Local_u8_Num)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <M_Dio_U8_PinRead+0x6>
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <M_Dio_U8_PinRead+0x8>
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <M_Dio_U8_PinRead+0xa>
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8_Pin = Local_u8_Num % 10;
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	9a e0       	ldi	r25, 0x0A	; 10
    1a68:	69 2f       	mov	r22, r25
    1a6a:	0e 94 16 29 	call	0x522c	; 0x522c <__udivmodqi4>
    1a6e:	89 2f       	mov	r24, r25
    1a70:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8_Port = Local_u8_Num / 10;
    1a72:	8c 81       	ldd	r24, Y+4	; 0x04
    1a74:	9a e0       	ldi	r25, 0x0A	; 10
    1a76:	69 2f       	mov	r22, r25
    1a78:	0e 94 16 29 	call	0x522c	; 0x522c <__udivmodqi4>
    1a7c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Reading = 0;
    1a7e:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_u8_Port)
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	3e 83       	std	Y+6, r19	; 0x06
    1a88:	2d 83       	std	Y+5, r18	; 0x05
    1a8a:	4d 81       	ldd	r20, Y+5	; 0x05
    1a8c:	5e 81       	ldd	r21, Y+6	; 0x06
    1a8e:	42 30       	cpi	r20, 0x02	; 2
    1a90:	51 05       	cpc	r21, r1
    1a92:	41 f1       	breq	.+80     	; 0x1ae4 <M_Dio_U8_PinRead+0x90>
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	83 30       	cpi	r24, 0x03	; 3
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	34 f4       	brge	.+12     	; 0x1aaa <M_Dio_U8_PinRead+0x56>
    1a9e:	2d 81       	ldd	r18, Y+5	; 0x05
    1aa0:	3e 81       	ldd	r19, Y+6	; 0x06
    1aa2:	21 30       	cpi	r18, 0x01	; 1
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	61 f0       	breq	.+24     	; 0x1ac0 <M_Dio_U8_PinRead+0x6c>
    1aa8:	52 c0       	rjmp	.+164    	; 0x1b4e <M_Dio_U8_PinRead+0xfa>
    1aaa:	4d 81       	ldd	r20, Y+5	; 0x05
    1aac:	5e 81       	ldd	r21, Y+6	; 0x06
    1aae:	43 30       	cpi	r20, 0x03	; 3
    1ab0:	51 05       	cpc	r21, r1
    1ab2:	51 f1       	breq	.+84     	; 0x1b08 <M_Dio_U8_PinRead+0xb4>
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	84 30       	cpi	r24, 0x04	; 4
    1aba:	91 05       	cpc	r25, r1
    1abc:	b9 f1       	breq	.+110    	; 0x1b2c <M_Dio_U8_PinRead+0xd8>
    1abe:	47 c0       	rjmp	.+142    	; 0x1b4e <M_Dio_U8_PinRead+0xfa>
	{
		case 1:Local_u8_Reading = GetBit(PINA_REG,Local_u8_Pin); break;
    1ac0:	e9 e3       	ldi	r30, 0x39	; 57
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	88 2f       	mov	r24, r24
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a9 01       	movw	r20, r18
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <M_Dio_U8_PinRead+0x84>
    1ad4:	55 95       	asr	r21
    1ad6:	47 95       	ror	r20
    1ad8:	8a 95       	dec	r24
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <M_Dio_U8_PinRead+0x80>
    1adc:	ca 01       	movw	r24, r20
    1ade:	81 70       	andi	r24, 0x01	; 1
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	35 c0       	rjmp	.+106    	; 0x1b4e <M_Dio_U8_PinRead+0xfa>
		case 2:Local_u8_Reading = GetBit(PINB_REG,Local_u8_Pin); break;
    1ae4:	e6 e3       	ldi	r30, 0x36	; 54
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	88 2f       	mov	r24, r24
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a9 01       	movw	r20, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <M_Dio_U8_PinRead+0xa8>
    1af8:	55 95       	asr	r21
    1afa:	47 95       	ror	r20
    1afc:	8a 95       	dec	r24
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <M_Dio_U8_PinRead+0xa4>
    1b00:	ca 01       	movw	r24, r20
    1b02:	81 70       	andi	r24, 0x01	; 1
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	23 c0       	rjmp	.+70     	; 0x1b4e <M_Dio_U8_PinRead+0xfa>
		case 3:Local_u8_Reading = GetBit(PINC_REG,Local_u8_Pin); break;
    1b08:	e3 e3       	ldi	r30, 0x33	; 51
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	a9 01       	movw	r20, r18
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <M_Dio_U8_PinRead+0xcc>
    1b1c:	55 95       	asr	r21
    1b1e:	47 95       	ror	r20
    1b20:	8a 95       	dec	r24
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <M_Dio_U8_PinRead+0xc8>
    1b24:	ca 01       	movw	r24, r20
    1b26:	81 70       	andi	r24, 0x01	; 1
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	11 c0       	rjmp	.+34     	; 0x1b4e <M_Dio_U8_PinRead+0xfa>
		case 4:Local_u8_Reading = GetBit(PIND_REG,Local_u8_Pin); break;
    1b2c:	e0 e3       	ldi	r30, 0x30	; 48
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a9 01       	movw	r20, r18
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <M_Dio_U8_PinRead+0xf0>
    1b40:	55 95       	asr	r21
    1b42:	47 95       	ror	r20
    1b44:	8a 95       	dec	r24
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <M_Dio_U8_PinRead+0xec>
    1b48:	ca 01       	movw	r24, r20
    1b4a:	81 70       	andi	r24, 0x01	; 1
    1b4c:	89 83       	std	Y+1, r24	; 0x01
		default:						  					 break;
		}
	return Local_u8_Reading;
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b50:	26 96       	adiw	r28, 0x06	; 6
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <M_ADC_Void_ADCInit>:

#include"ADC.h"
#include"LED.h"
u16 x=0;
void M_ADC_Void_ADCInit(void)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
	//to select Vref
#if V_REF == AVCC
	SetBit(ADMUX_REG,6);
    1b6a:	a7 e2       	ldi	r26, 0x27	; 39
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e7 e2       	ldi	r30, 0x27	; 39
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	80 64       	ori	r24, 0x40	; 64
    1b76:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG,7);
    1b78:	a7 e2       	ldi	r26, 0x27	; 39
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e7 e2       	ldi	r30, 0x27	; 39
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	8f 77       	andi	r24, 0x7F	; 127
    1b84:	8c 93       	st	X, r24
#elif V_REF == _2V_PIN
	SetBit(ADMUX_REG,6);
	ClrBit(ADMUX_REG,7);
#endif
	//to select right adjust
	ClrBit(ADMUX_REG,5);
    1b86:	a7 e2       	ldi	r26, 0x27	; 39
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e7 e2       	ldi	r30, 0x27	; 39
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	8f 7d       	andi	r24, 0xDF	; 223
    1b92:	8c 93       	st	X, r24
	//to select ADC channel (ADC0)
	ClrBit(ADMUX_REG,4);
    1b94:	a7 e2       	ldi	r26, 0x27	; 39
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e7 e2       	ldi	r30, 0x27	; 39
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	8f 7e       	andi	r24, 0xEF	; 239
    1ba0:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG,3);
    1ba2:	a7 e2       	ldi	r26, 0x27	; 39
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e7 e2       	ldi	r30, 0x27	; 39
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	87 7f       	andi	r24, 0xF7	; 247
    1bae:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG,2);
    1bb0:	a7 e2       	ldi	r26, 0x27	; 39
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e7 e2       	ldi	r30, 0x27	; 39
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	8b 7f       	andi	r24, 0xFB	; 251
    1bbc:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG,1);
    1bbe:	a7 e2       	ldi	r26, 0x27	; 39
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e7 e2       	ldi	r30, 0x27	; 39
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8d 7f       	andi	r24, 0xFD	; 253
    1bca:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG,0);
    1bcc:	a7 e2       	ldi	r26, 0x27	; 39
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e7 e2       	ldi	r30, 0x27	; 39
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8e 7f       	andi	r24, 0xFE	; 254
    1bd8:	8c 93       	st	X, r24
	//to select prescaler (128)
	SetBit(ADCSRA_REG,2);
    1bda:	a6 e2       	ldi	r26, 0x26	; 38
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e6 e2       	ldi	r30, 0x26	; 38
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	84 60       	ori	r24, 0x04	; 4
    1be6:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG,1);
    1be8:	a6 e2       	ldi	r26, 0x26	; 38
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e6 e2       	ldi	r30, 0x26	; 38
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	82 60       	ori	r24, 0x02	; 2
    1bf4:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG,0);
    1bf6:	a6 e2       	ldi	r26, 0x26	; 38
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e6 e2       	ldi	r30, 0x26	; 38
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	81 60       	ori	r24, 0x01	; 1
    1c02:	8c 93       	st	X, r24
	// To Enable auto trigger mode -> free running
	SetBit(ADCSRA_REG,5);
    1c04:	a6 e2       	ldi	r26, 0x26	; 38
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e6 e2       	ldi	r30, 0x26	; 38
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 62       	ori	r24, 0x20	; 32
    1c10:	8c 93       	st	X, r24
	//to enable ADC circuit
	SetBit(ADCSRA_REG,7);
    1c12:	a6 e2       	ldi	r26, 0x26	; 38
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e6 e2       	ldi	r30, 0x26	; 38
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	80 68       	ori	r24, 0x80	; 128
    1c1e:	8c 93       	st	X, r24
#if  ADC_MODE	==	ADC_INT
	//to enable interrupt
	SetBit(ADCSRA_REG,6);
#endif
}
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <M_ADC_U16_ADCRead>:

#if ADC_MODE	==	ADC_POL
u16 M_ADC_U16_ADCRead(void)
{
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
	// to start conversion
	SetBit(ADCSRA_REG,6);
    1c2e:	a6 e2       	ldi	r26, 0x26	; 38
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e6 e2       	ldi	r30, 0x26	; 38
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	80 64       	ori	r24, 0x40	; 64
    1c3a:	8c 93       	st	X, r24
	while (GetBit(ADCSRA_REG,4) == 0);
    1c3c:	e6 e2       	ldi	r30, 0x26	; 38
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	82 95       	swap	r24
    1c44:	8f 70       	andi	r24, 0x0F	; 15
    1c46:	88 2f       	mov	r24, r24
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	81 70       	andi	r24, 0x01	; 1
    1c4c:	90 70       	andi	r25, 0x00	; 0
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	a9 f3       	breq	.-22     	; 0x1c3c <M_ADC_U16_ADCRead+0x16>
	return ADC_REG;
    1c52:	e4 e2       	ldi	r30, 0x24	; 36
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <H_TempSensor_Void_TempSensorInit>:

#include"TempSensor.h"


void H_TempSensor_Void_TempSensorInit(void)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
	M_ADC_Void_ADCInit();
    1c68:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <M_ADC_Void_ADCInit>
}
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <H_TempSensor_U8_TempSensorRead>:
u8 H_TempSensor_U8_TempSensorRead(void)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <H_TempSensor_U8_TempSensorRead+0x6>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16_ADCReading = M_ADC_U16_ADCRead();
    1c7c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <M_ADC_U16_ADCRead>
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
	return ((f32)Local_u16_ADCReading*500) / 1023 ;
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	cc 01       	movw	r24, r24
    1c8a:	a0 e0       	ldi	r26, 0x00	; 0
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	4a ef       	ldi	r20, 0xFA	; 250
    1ca4:	53 e4       	ldi	r21, 0x43	; 67
    1ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	bc 01       	movw	r22, r24
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 ec       	ldi	r19, 0xC0	; 192
    1cb6:	4f e7       	ldi	r20, 0x7F	; 127
    1cb8:	54 e4       	ldi	r21, 0x44	; 68
    1cba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
}
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <H_SSD_Void_SSDInit>:
 *      Author: musta
 */
#include"SSd.h"

void H_SSD_Void_SSDInit(void)
{
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
	M_Dio_Void_PinMode(SSD_LED_A,OUTPUT);
    1ce0:	8b e0       	ldi	r24, 0x0B	; 11
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_B,OUTPUT);
    1ce8:	8c e0       	ldi	r24, 0x0C	; 12
    1cea:	61 e0       	ldi	r22, 0x01	; 1
    1cec:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_C,OUTPUT);
    1cf0:	8d e0       	ldi	r24, 0x0D	; 13
    1cf2:	61 e0       	ldi	r22, 0x01	; 1
    1cf4:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_D,OUTPUT);
    1cf8:	8e e0       	ldi	r24, 0x0E	; 14
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_E,OUTPUT);
    1d00:	8f e0       	ldi	r24, 0x0F	; 15
    1d02:	61 e0       	ldi	r22, 0x01	; 1
    1d04:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_F,OUTPUT);
    1d08:	80 e1       	ldi	r24, 0x10	; 16
    1d0a:	61 e0       	ldi	r22, 0x01	; 1
    1d0c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_G,OUTPUT);
    1d10:	81 e1       	ldi	r24, 0x11	; 17
    1d12:	61 e0       	ldi	r22, 0x01	; 1
    1d14:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_LED_DOT,OUTPUT);
    1d18:	84 e1       	ldi	r24, 0x14	; 20
    1d1a:	61 e0       	ldi	r22, 0x01	; 1
    1d1c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_EN_1,OUTPUT);
    1d20:	84 e2       	ldi	r24, 0x24	; 36
    1d22:	61 e0       	ldi	r22, 0x01	; 1
    1d24:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(SSD_EN_2,OUTPUT);
    1d28:	85 e2       	ldi	r24, 0x25	; 37
    1d2a:	61 e0       	ldi	r22, 0x01	; 1
    1d2c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
}
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <H_SSD_Void_SSDDisplay>:
void H_SSD_Void_SSDDisplay(u8 Local_u8_Num)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	a3 97       	sbiw	r28, 0x23	; 35
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 Local_u8_Units = Local_u8_Num % 10;
    1d4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d4e:	9a e0       	ldi	r25, 0x0A	; 10
    1d50:	69 2f       	mov	r22, r25
    1d52:	0e 94 16 29 	call	0x522c	; 0x522c <__udivmodqi4>
    1d56:	89 2f       	mov	r24, r25
    1d58:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 Local_u8_Tens = Local_u8_Num / 10;
    1d5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d5c:	9a e0       	ldi	r25, 0x0A	; 10
    1d5e:	69 2f       	mov	r22, r25
    1d60:	0e 94 16 29 	call	0x522c	; 0x522c <__udivmodqi4>
    1d64:	8d 8f       	std	Y+29, r24	; 0x1d

	switch(Local_u8_Units)
    1d66:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	3b a3       	std	Y+35, r19	; 0x23
    1d6e:	2a a3       	std	Y+34, r18	; 0x22
    1d70:	8a a1       	ldd	r24, Y+34	; 0x22
    1d72:	9b a1       	ldd	r25, Y+35	; 0x23
    1d74:	84 30       	cpi	r24, 0x04	; 4
    1d76:	91 05       	cpc	r25, r1
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <H_SSD_Void_SSDDisplay+0x46>
    1d7a:	bb c0       	rjmp	.+374    	; 0x1ef2 <H_SSD_Void_SSDDisplay+0x1bc>
    1d7c:	2a a1       	ldd	r18, Y+34	; 0x22
    1d7e:	3b a1       	ldd	r19, Y+35	; 0x23
    1d80:	25 30       	cpi	r18, 0x05	; 5
    1d82:	31 05       	cpc	r19, r1
    1d84:	ec f4       	brge	.+58     	; 0x1dc0 <H_SSD_Void_SSDDisplay+0x8a>
    1d86:	8a a1       	ldd	r24, Y+34	; 0x22
    1d88:	9b a1       	ldd	r25, Y+35	; 0x23
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <H_SSD_Void_SSDDisplay+0x5c>
    1d90:	59 c0       	rjmp	.+178    	; 0x1e44 <H_SSD_Void_SSDDisplay+0x10e>
    1d92:	2a a1       	ldd	r18, Y+34	; 0x22
    1d94:	3b a1       	ldd	r19, Y+35	; 0x23
    1d96:	22 30       	cpi	r18, 0x02	; 2
    1d98:	31 05       	cpc	r19, r1
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <H_SSD_Void_SSDDisplay+0x70>
    1d9c:	8a a1       	ldd	r24, Y+34	; 0x22
    1d9e:	9b a1       	ldd	r25, Y+35	; 0x23
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	99 f1       	breq	.+102    	; 0x1e0a <H_SSD_Void_SSDDisplay+0xd4>
    1da4:	53 c1       	rjmp	.+678    	; 0x204c <H_SSD_Void_SSDDisplay+0x316>
    1da6:	2a a1       	ldd	r18, Y+34	; 0x22
    1da8:	3b a1       	ldd	r19, Y+35	; 0x23
    1daa:	22 30       	cpi	r18, 0x02	; 2
    1dac:	31 05       	cpc	r19, r1
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <H_SSD_Void_SSDDisplay+0x7c>
    1db0:	66 c0       	rjmp	.+204    	; 0x1e7e <H_SSD_Void_SSDDisplay+0x148>
    1db2:	8a a1       	ldd	r24, Y+34	; 0x22
    1db4:	9b a1       	ldd	r25, Y+35	; 0x23
    1db6:	83 30       	cpi	r24, 0x03	; 3
    1db8:	91 05       	cpc	r25, r1
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <H_SSD_Void_SSDDisplay+0x88>
    1dbc:	7d c0       	rjmp	.+250    	; 0x1eb8 <H_SSD_Void_SSDDisplay+0x182>
    1dbe:	46 c1       	rjmp	.+652    	; 0x204c <H_SSD_Void_SSDDisplay+0x316>
    1dc0:	2a a1       	ldd	r18, Y+34	; 0x22
    1dc2:	3b a1       	ldd	r19, Y+35	; 0x23
    1dc4:	27 30       	cpi	r18, 0x07	; 7
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <H_SSD_Void_SSDDisplay+0x96>
    1dca:	ea c0       	rjmp	.+468    	; 0x1fa0 <H_SSD_Void_SSDDisplay+0x26a>
    1dcc:	8a a1       	ldd	r24, Y+34	; 0x22
    1dce:	9b a1       	ldd	r25, Y+35	; 0x23
    1dd0:	88 30       	cpi	r24, 0x08	; 8
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	6c f4       	brge	.+26     	; 0x1df0 <H_SSD_Void_SSDDisplay+0xba>
    1dd6:	2a a1       	ldd	r18, Y+34	; 0x22
    1dd8:	3b a1       	ldd	r19, Y+35	; 0x23
    1dda:	25 30       	cpi	r18, 0x05	; 5
    1ddc:	31 05       	cpc	r19, r1
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <H_SSD_Void_SSDDisplay+0xac>
    1de0:	a5 c0       	rjmp	.+330    	; 0x1f2c <H_SSD_Void_SSDDisplay+0x1f6>
    1de2:	8a a1       	ldd	r24, Y+34	; 0x22
    1de4:	9b a1       	ldd	r25, Y+35	; 0x23
    1de6:	86 30       	cpi	r24, 0x06	; 6
    1de8:	91 05       	cpc	r25, r1
    1dea:	09 f4       	brne	.+2      	; 0x1dee <H_SSD_Void_SSDDisplay+0xb8>
    1dec:	bc c0       	rjmp	.+376    	; 0x1f66 <H_SSD_Void_SSDDisplay+0x230>
    1dee:	2e c1       	rjmp	.+604    	; 0x204c <H_SSD_Void_SSDDisplay+0x316>
    1df0:	2a a1       	ldd	r18, Y+34	; 0x22
    1df2:	3b a1       	ldd	r19, Y+35	; 0x23
    1df4:	28 30       	cpi	r18, 0x08	; 8
    1df6:	31 05       	cpc	r19, r1
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <H_SSD_Void_SSDDisplay+0xc6>
    1dfa:	ef c0       	rjmp	.+478    	; 0x1fda <H_SSD_Void_SSDDisplay+0x2a4>
    1dfc:	8a a1       	ldd	r24, Y+34	; 0x22
    1dfe:	9b a1       	ldd	r25, Y+35	; 0x23
    1e00:	89 30       	cpi	r24, 0x09	; 9
    1e02:	91 05       	cpc	r25, r1
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <H_SSD_Void_SSDDisplay+0xd2>
    1e06:	06 c1       	rjmp	.+524    	; 0x2014 <H_SSD_Void_SSDDisplay+0x2de>
    1e08:	21 c1       	rjmp	.+578    	; 0x204c <H_SSD_Void_SSDDisplay+0x316>
	{
	case 0:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1e0a:	8b e0       	ldi	r24, 0x0B	; 11
    1e0c:	61 e0       	ldi	r22, 0x01	; 1
    1e0e:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1e12:	8c e0       	ldi	r24, 0x0C	; 12
    1e14:	61 e0       	ldi	r22, 0x01	; 1
    1e16:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1e1a:	8d e0       	ldi	r24, 0x0D	; 13
    1e1c:	61 e0       	ldi	r22, 0x01	; 1
    1e1e:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1e22:	8e e0       	ldi	r24, 0x0E	; 14
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1e2a:	8f e0       	ldi	r24, 0x0F	; 15
    1e2c:	61 e0       	ldi	r22, 0x01	; 1
    1e2e:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1e32:	80 e1       	ldi	r24, 0x10	; 16
    1e34:	61 e0       	ldi	r22, 0x01	; 1
    1e36:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    1e3a:	81 e1       	ldi	r24, 0x11	; 17
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    1e42:	04 c1       	rjmp	.+520    	; 0x204c <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 1:
		M_Dio_Void_PinWrite(SSD_LED_A,LOW);
    1e44:	8b e0       	ldi	r24, 0x0B	; 11
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1e4c:	8c e0       	ldi	r24, 0x0C	; 12
    1e4e:	61 e0       	ldi	r22, 0x01	; 1
    1e50:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1e54:	8d e0       	ldi	r24, 0x0D	; 13
    1e56:	61 e0       	ldi	r22, 0x01	; 1
    1e58:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    1e5c:	8e e0       	ldi	r24, 0x0E	; 14
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1e64:	80 e1       	ldi	r24, 0x10	; 16
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1e6c:	8f e0       	ldi	r24, 0x0F	; 15
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    1e74:	81 e1       	ldi	r24, 0x11	; 17
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    1e7c:	e7 c0       	rjmp	.+462    	; 0x204c <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 2:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1e7e:	8b e0       	ldi	r24, 0x0B	; 11
    1e80:	61 e0       	ldi	r22, 0x01	; 1
    1e82:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1e86:	8c e0       	ldi	r24, 0x0C	; 12
    1e88:	61 e0       	ldi	r22, 0x01	; 1
    1e8a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,LOW);
    1e8e:	8d e0       	ldi	r24, 0x0D	; 13
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1e96:	8e e0       	ldi	r24, 0x0E	; 14
    1e98:	61 e0       	ldi	r22, 0x01	; 1
    1e9a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1e9e:	8f e0       	ldi	r24, 0x0F	; 15
    1ea0:	61 e0       	ldi	r22, 0x01	; 1
    1ea2:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1ea6:	80 e1       	ldi	r24, 0x10	; 16
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1eae:	81 e1       	ldi	r24, 0x11	; 17
    1eb0:	61 e0       	ldi	r22, 0x01	; 1
    1eb2:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    1eb6:	ca c0       	rjmp	.+404    	; 0x204c <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 3:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1eb8:	8b e0       	ldi	r24, 0x0B	; 11
    1eba:	61 e0       	ldi	r22, 0x01	; 1
    1ebc:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1ec0:	8c e0       	ldi	r24, 0x0C	; 12
    1ec2:	61 e0       	ldi	r22, 0x01	; 1
    1ec4:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1ec8:	8d e0       	ldi	r24, 0x0D	; 13
    1eca:	61 e0       	ldi	r22, 0x01	; 1
    1ecc:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1ed0:	8e e0       	ldi	r24, 0x0E	; 14
    1ed2:	61 e0       	ldi	r22, 0x01	; 1
    1ed4:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1ed8:	8f e0       	ldi	r24, 0x0F	; 15
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1ee0:	80 e1       	ldi	r24, 0x10	; 16
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1ee8:	81 e1       	ldi	r24, 0x11	; 17
    1eea:	61 e0       	ldi	r22, 0x01	; 1
    1eec:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    1ef0:	ad c0       	rjmp	.+346    	; 0x204c <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 4:
		M_Dio_Void_PinWrite(SSD_LED_A,LOW);
    1ef2:	8b e0       	ldi	r24, 0x0B	; 11
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1efa:	8c e0       	ldi	r24, 0x0C	; 12
    1efc:	61 e0       	ldi	r22, 0x01	; 1
    1efe:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1f02:	8d e0       	ldi	r24, 0x0D	; 13
    1f04:	61 e0       	ldi	r22, 0x01	; 1
    1f06:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    1f0a:	8e e0       	ldi	r24, 0x0E	; 14
    1f0c:	60 e0       	ldi	r22, 0x00	; 0
    1f0e:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1f12:	8f e0       	ldi	r24, 0x0F	; 15
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1f1a:	80 e1       	ldi	r24, 0x10	; 16
    1f1c:	61 e0       	ldi	r22, 0x01	; 1
    1f1e:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1f22:	81 e1       	ldi	r24, 0x11	; 17
    1f24:	61 e0       	ldi	r22, 0x01	; 1
    1f26:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    1f2a:	90 c0       	rjmp	.+288    	; 0x204c <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 5:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1f2c:	8b e0       	ldi	r24, 0x0B	; 11
    1f2e:	61 e0       	ldi	r22, 0x01	; 1
    1f30:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,LOW);
    1f34:	8c e0       	ldi	r24, 0x0C	; 12
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1f3c:	8d e0       	ldi	r24, 0x0D	; 13
    1f3e:	61 e0       	ldi	r22, 0x01	; 1
    1f40:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1f44:	8e e0       	ldi	r24, 0x0E	; 14
    1f46:	61 e0       	ldi	r22, 0x01	; 1
    1f48:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1f4c:	8f e0       	ldi	r24, 0x0F	; 15
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1f54:	80 e1       	ldi	r24, 0x10	; 16
    1f56:	61 e0       	ldi	r22, 0x01	; 1
    1f58:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1f5c:	81 e1       	ldi	r24, 0x11	; 17
    1f5e:	61 e0       	ldi	r22, 0x01	; 1
    1f60:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    1f64:	73 c0       	rjmp	.+230    	; 0x204c <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 6:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1f66:	8b e0       	ldi	r24, 0x0B	; 11
    1f68:	61 e0       	ldi	r22, 0x01	; 1
    1f6a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,LOW);
    1f6e:	8c e0       	ldi	r24, 0x0C	; 12
    1f70:	60 e0       	ldi	r22, 0x00	; 0
    1f72:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1f76:	8d e0       	ldi	r24, 0x0D	; 13
    1f78:	61 e0       	ldi	r22, 0x01	; 1
    1f7a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1f7e:	8e e0       	ldi	r24, 0x0E	; 14
    1f80:	61 e0       	ldi	r22, 0x01	; 1
    1f82:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1f86:	8f e0       	ldi	r24, 0x0F	; 15
    1f88:	61 e0       	ldi	r22, 0x01	; 1
    1f8a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    1f8e:	80 e1       	ldi	r24, 0x10	; 16
    1f90:	61 e0       	ldi	r22, 0x01	; 1
    1f92:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    1f96:	81 e1       	ldi	r24, 0x11	; 17
    1f98:	61 e0       	ldi	r22, 0x01	; 1
    1f9a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    1f9e:	56 c0       	rjmp	.+172    	; 0x204c <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 7:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1fa0:	8b e0       	ldi	r24, 0x0B	; 11
    1fa2:	61 e0       	ldi	r22, 0x01	; 1
    1fa4:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1fa8:	8c e0       	ldi	r24, 0x0C	; 12
    1faa:	61 e0       	ldi	r22, 0x01	; 1
    1fac:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1fb0:	8d e0       	ldi	r24, 0x0D	; 13
    1fb2:	61 e0       	ldi	r22, 0x01	; 1
    1fb4:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    1fb8:	8e e0       	ldi	r24, 0x0E	; 14
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    1fc0:	8f e0       	ldi	r24, 0x0F	; 15
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    1fc8:	80 e1       	ldi	r24, 0x10	; 16
    1fca:	60 e0       	ldi	r22, 0x00	; 0
    1fcc:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    1fd0:	81 e1       	ldi	r24, 0x11	; 17
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    1fd8:	39 c0       	rjmp	.+114    	; 0x204c <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 8:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    1fda:	8b e0       	ldi	r24, 0x0B	; 11
    1fdc:	61 e0       	ldi	r22, 0x01	; 1
    1fde:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    1fe2:	8c e0       	ldi	r24, 0x0C	; 12
    1fe4:	61 e0       	ldi	r22, 0x01	; 1
    1fe6:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    1fea:	8d e0       	ldi	r24, 0x0D	; 13
    1fec:	61 e0       	ldi	r22, 0x01	; 1
    1fee:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    1ff2:	8e e0       	ldi	r24, 0x0E	; 14
    1ff4:	61 e0       	ldi	r22, 0x01	; 1
    1ff6:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    1ffa:	8f e0       	ldi	r24, 0x0F	; 15
    1ffc:	61 e0       	ldi	r22, 0x01	; 1
    1ffe:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    2002:	80 e1       	ldi	r24, 0x10	; 16
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    200a:	81 e1       	ldi	r24, 0x11	; 17
    200c:	61 e0       	ldi	r22, 0x01	; 1
    200e:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    2012:	1c c0       	rjmp	.+56     	; 0x204c <H_SSD_Void_SSDDisplay+0x316>
		break;
	case 9:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    2014:	8b e0       	ldi	r24, 0x0B	; 11
    2016:	61 e0       	ldi	r22, 0x01	; 1
    2018:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    201c:	8c e0       	ldi	r24, 0x0C	; 12
    201e:	61 e0       	ldi	r22, 0x01	; 1
    2020:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    2024:	8d e0       	ldi	r24, 0x0D	; 13
    2026:	61 e0       	ldi	r22, 0x01	; 1
    2028:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    202c:	8e e0       	ldi	r24, 0x0E	; 14
    202e:	61 e0       	ldi	r22, 0x01	; 1
    2030:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    2034:	8f e0       	ldi	r24, 0x0F	; 15
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    203c:	80 e1       	ldi	r24, 0x10	; 16
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    2044:	81 e1       	ldi	r24, 0x11	; 17
    2046:	61 e0       	ldi	r22, 0x01	; 1
    2048:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		break;

	}

	M_Dio_Void_PinWrite(SSD_EN_1,HIGH);
    204c:	84 e2       	ldi	r24, 0x24	; 36
    204e:	61 e0       	ldi	r22, 0x01	; 1
    2050:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(SSD_EN_2,LOW);
    2054:	85 e2       	ldi	r24, 0x25	; 37
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 e8       	ldi	r26, 0x80	; 128
    2062:	bf e3       	ldi	r27, 0x3F	; 63
    2064:	89 8f       	std	Y+25, r24	; 0x19
    2066:	9a 8f       	std	Y+26, r25	; 0x1a
    2068:	ab 8f       	std	Y+27, r26	; 0x1b
    206a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206c:	69 8d       	ldd	r22, Y+25	; 0x19
    206e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2070:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2072:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	4a e7       	ldi	r20, 0x7A	; 122
    207a:	55 e4       	ldi	r21, 0x45	; 69
    207c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	8d 8b       	std	Y+21, r24	; 0x15
    2086:	9e 8b       	std	Y+22, r25	; 0x16
    2088:	af 8b       	std	Y+23, r26	; 0x17
    208a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    208c:	6d 89       	ldd	r22, Y+21	; 0x15
    208e:	7e 89       	ldd	r23, Y+22	; 0x16
    2090:	8f 89       	ldd	r24, Y+23	; 0x17
    2092:	98 8d       	ldd	r25, Y+24	; 0x18
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e8       	ldi	r20, 0x80	; 128
    209a:	5f e3       	ldi	r21, 0x3F	; 63
    209c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    20a0:	88 23       	and	r24, r24
    20a2:	2c f4       	brge	.+10     	; 0x20ae <H_SSD_Void_SSDDisplay+0x378>
		__ticks = 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9c 8b       	std	Y+20, r25	; 0x14
    20aa:	8b 8b       	std	Y+19, r24	; 0x13
    20ac:	3f c0       	rjmp	.+126    	; 0x212c <H_SSD_Void_SSDDisplay+0x3f6>
	else if (__tmp > 65535)
    20ae:	6d 89       	ldd	r22, Y+21	; 0x15
    20b0:	7e 89       	ldd	r23, Y+22	; 0x16
    20b2:	8f 89       	ldd	r24, Y+23	; 0x17
    20b4:	98 8d       	ldd	r25, Y+24	; 0x18
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	3f ef       	ldi	r19, 0xFF	; 255
    20ba:	4f e7       	ldi	r20, 0x7F	; 127
    20bc:	57 e4       	ldi	r21, 0x47	; 71
    20be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    20c2:	18 16       	cp	r1, r24
    20c4:	4c f5       	brge	.+82     	; 0x2118 <H_SSD_Void_SSDDisplay+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c6:	69 8d       	ldd	r22, Y+25	; 0x19
    20c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e2       	ldi	r20, 0x20	; 32
    20d4:	51 e4       	ldi	r21, 0x41	; 65
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	9c 8b       	std	Y+20, r25	; 0x14
    20ec:	8b 8b       	std	Y+19, r24	; 0x13
    20ee:	0f c0       	rjmp	.+30     	; 0x210e <H_SSD_Void_SSDDisplay+0x3d8>
    20f0:	80 e9       	ldi	r24, 0x90	; 144
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	9a 8b       	std	Y+18, r25	; 0x12
    20f6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20f8:	89 89       	ldd	r24, Y+17	; 0x11
    20fa:	9a 89       	ldd	r25, Y+18	; 0x12
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <H_SSD_Void_SSDDisplay+0x3c6>
    2100:	9a 8b       	std	Y+18, r25	; 0x12
    2102:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2104:	8b 89       	ldd	r24, Y+19	; 0x13
    2106:	9c 89       	ldd	r25, Y+20	; 0x14
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	9c 8b       	std	Y+20, r25	; 0x14
    210c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210e:	8b 89       	ldd	r24, Y+19	; 0x13
    2110:	9c 89       	ldd	r25, Y+20	; 0x14
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	69 f7       	brne	.-38     	; 0x20f0 <H_SSD_Void_SSDDisplay+0x3ba>
    2116:	14 c0       	rjmp	.+40     	; 0x2140 <H_SSD_Void_SSDDisplay+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2118:	6d 89       	ldd	r22, Y+21	; 0x15
    211a:	7e 89       	ldd	r23, Y+22	; 0x16
    211c:	8f 89       	ldd	r24, Y+23	; 0x17
    211e:	98 8d       	ldd	r25, Y+24	; 0x18
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	9c 8b       	std	Y+20, r25	; 0x14
    212a:	8b 8b       	std	Y+19, r24	; 0x13
    212c:	8b 89       	ldd	r24, Y+19	; 0x13
    212e:	9c 89       	ldd	r25, Y+20	; 0x14
    2130:	98 8b       	std	Y+16, r25	; 0x10
    2132:	8f 87       	std	Y+15, r24	; 0x0f
    2134:	8f 85       	ldd	r24, Y+15	; 0x0f
    2136:	98 89       	ldd	r25, Y+16	; 0x10
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <H_SSD_Void_SSDDisplay+0x402>
    213c:	98 8b       	std	Y+16, r25	; 0x10
    213e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_Void_PinWrite(SSD_EN_1,LOW);
    2140:	84 e2       	ldi	r24, 0x24	; 36
    2142:	60 e0       	ldi	r22, 0x00	; 0
    2144:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>

	switch(Local_u8_Tens)
    2148:	8d 8d       	ldd	r24, Y+29	; 0x1d
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	39 a3       	std	Y+33, r19	; 0x21
    2150:	28 a3       	std	Y+32, r18	; 0x20
    2152:	88 a1       	ldd	r24, Y+32	; 0x20
    2154:	99 a1       	ldd	r25, Y+33	; 0x21
    2156:	84 30       	cpi	r24, 0x04	; 4
    2158:	91 05       	cpc	r25, r1
    215a:	09 f4       	brne	.+2      	; 0x215e <H_SSD_Void_SSDDisplay+0x428>
    215c:	bb c0       	rjmp	.+374    	; 0x22d4 <H_SSD_Void_SSDDisplay+0x59e>
    215e:	28 a1       	ldd	r18, Y+32	; 0x20
    2160:	39 a1       	ldd	r19, Y+33	; 0x21
    2162:	25 30       	cpi	r18, 0x05	; 5
    2164:	31 05       	cpc	r19, r1
    2166:	ec f4       	brge	.+58     	; 0x21a2 <H_SSD_Void_SSDDisplay+0x46c>
    2168:	88 a1       	ldd	r24, Y+32	; 0x20
    216a:	99 a1       	ldd	r25, Y+33	; 0x21
    216c:	81 30       	cpi	r24, 0x01	; 1
    216e:	91 05       	cpc	r25, r1
    2170:	09 f4       	brne	.+2      	; 0x2174 <H_SSD_Void_SSDDisplay+0x43e>
    2172:	59 c0       	rjmp	.+178    	; 0x2226 <H_SSD_Void_SSDDisplay+0x4f0>
    2174:	28 a1       	ldd	r18, Y+32	; 0x20
    2176:	39 a1       	ldd	r19, Y+33	; 0x21
    2178:	22 30       	cpi	r18, 0x02	; 2
    217a:	31 05       	cpc	r19, r1
    217c:	2c f4       	brge	.+10     	; 0x2188 <H_SSD_Void_SSDDisplay+0x452>
    217e:	88 a1       	ldd	r24, Y+32	; 0x20
    2180:	99 a1       	ldd	r25, Y+33	; 0x21
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	99 f1       	breq	.+102    	; 0x21ec <H_SSD_Void_SSDDisplay+0x4b6>
    2186:	53 c1       	rjmp	.+678    	; 0x242e <H_SSD_Void_SSDDisplay+0x6f8>
    2188:	28 a1       	ldd	r18, Y+32	; 0x20
    218a:	39 a1       	ldd	r19, Y+33	; 0x21
    218c:	22 30       	cpi	r18, 0x02	; 2
    218e:	31 05       	cpc	r19, r1
    2190:	09 f4       	brne	.+2      	; 0x2194 <H_SSD_Void_SSDDisplay+0x45e>
    2192:	66 c0       	rjmp	.+204    	; 0x2260 <H_SSD_Void_SSDDisplay+0x52a>
    2194:	88 a1       	ldd	r24, Y+32	; 0x20
    2196:	99 a1       	ldd	r25, Y+33	; 0x21
    2198:	83 30       	cpi	r24, 0x03	; 3
    219a:	91 05       	cpc	r25, r1
    219c:	09 f4       	brne	.+2      	; 0x21a0 <H_SSD_Void_SSDDisplay+0x46a>
    219e:	7d c0       	rjmp	.+250    	; 0x229a <H_SSD_Void_SSDDisplay+0x564>
    21a0:	46 c1       	rjmp	.+652    	; 0x242e <H_SSD_Void_SSDDisplay+0x6f8>
    21a2:	28 a1       	ldd	r18, Y+32	; 0x20
    21a4:	39 a1       	ldd	r19, Y+33	; 0x21
    21a6:	27 30       	cpi	r18, 0x07	; 7
    21a8:	31 05       	cpc	r19, r1
    21aa:	09 f4       	brne	.+2      	; 0x21ae <H_SSD_Void_SSDDisplay+0x478>
    21ac:	ea c0       	rjmp	.+468    	; 0x2382 <H_SSD_Void_SSDDisplay+0x64c>
    21ae:	88 a1       	ldd	r24, Y+32	; 0x20
    21b0:	99 a1       	ldd	r25, Y+33	; 0x21
    21b2:	88 30       	cpi	r24, 0x08	; 8
    21b4:	91 05       	cpc	r25, r1
    21b6:	6c f4       	brge	.+26     	; 0x21d2 <H_SSD_Void_SSDDisplay+0x49c>
    21b8:	28 a1       	ldd	r18, Y+32	; 0x20
    21ba:	39 a1       	ldd	r19, Y+33	; 0x21
    21bc:	25 30       	cpi	r18, 0x05	; 5
    21be:	31 05       	cpc	r19, r1
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <H_SSD_Void_SSDDisplay+0x48e>
    21c2:	a5 c0       	rjmp	.+330    	; 0x230e <H_SSD_Void_SSDDisplay+0x5d8>
    21c4:	88 a1       	ldd	r24, Y+32	; 0x20
    21c6:	99 a1       	ldd	r25, Y+33	; 0x21
    21c8:	86 30       	cpi	r24, 0x06	; 6
    21ca:	91 05       	cpc	r25, r1
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <H_SSD_Void_SSDDisplay+0x49a>
    21ce:	bc c0       	rjmp	.+376    	; 0x2348 <H_SSD_Void_SSDDisplay+0x612>
    21d0:	2e c1       	rjmp	.+604    	; 0x242e <H_SSD_Void_SSDDisplay+0x6f8>
    21d2:	28 a1       	ldd	r18, Y+32	; 0x20
    21d4:	39 a1       	ldd	r19, Y+33	; 0x21
    21d6:	28 30       	cpi	r18, 0x08	; 8
    21d8:	31 05       	cpc	r19, r1
    21da:	09 f4       	brne	.+2      	; 0x21de <H_SSD_Void_SSDDisplay+0x4a8>
    21dc:	ef c0       	rjmp	.+478    	; 0x23bc <H_SSD_Void_SSDDisplay+0x686>
    21de:	88 a1       	ldd	r24, Y+32	; 0x20
    21e0:	99 a1       	ldd	r25, Y+33	; 0x21
    21e2:	89 30       	cpi	r24, 0x09	; 9
    21e4:	91 05       	cpc	r25, r1
    21e6:	09 f4       	brne	.+2      	; 0x21ea <H_SSD_Void_SSDDisplay+0x4b4>
    21e8:	06 c1       	rjmp	.+524    	; 0x23f6 <H_SSD_Void_SSDDisplay+0x6c0>
    21ea:	21 c1       	rjmp	.+578    	; 0x242e <H_SSD_Void_SSDDisplay+0x6f8>
	{
	case 0:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    21ec:	8b e0       	ldi	r24, 0x0B	; 11
    21ee:	61 e0       	ldi	r22, 0x01	; 1
    21f0:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    21f4:	8c e0       	ldi	r24, 0x0C	; 12
    21f6:	61 e0       	ldi	r22, 0x01	; 1
    21f8:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    21fc:	8d e0       	ldi	r24, 0x0D	; 13
    21fe:	61 e0       	ldi	r22, 0x01	; 1
    2200:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    2204:	8e e0       	ldi	r24, 0x0E	; 14
    2206:	61 e0       	ldi	r22, 0x01	; 1
    2208:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    220c:	8f e0       	ldi	r24, 0x0F	; 15
    220e:	61 e0       	ldi	r22, 0x01	; 1
    2210:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    2214:	80 e1       	ldi	r24, 0x10	; 16
    2216:	61 e0       	ldi	r22, 0x01	; 1
    2218:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    221c:	81 e1       	ldi	r24, 0x11	; 17
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    2224:	04 c1       	rjmp	.+520    	; 0x242e <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 1:
		M_Dio_Void_PinWrite(SSD_LED_A,LOW);
    2226:	8b e0       	ldi	r24, 0x0B	; 11
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    222e:	8c e0       	ldi	r24, 0x0C	; 12
    2230:	61 e0       	ldi	r22, 0x01	; 1
    2232:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    2236:	8d e0       	ldi	r24, 0x0D	; 13
    2238:	61 e0       	ldi	r22, 0x01	; 1
    223a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    223e:	8e e0       	ldi	r24, 0x0E	; 14
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    2246:	80 e1       	ldi	r24, 0x10	; 16
    2248:	60 e0       	ldi	r22, 0x00	; 0
    224a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    224e:	8f e0       	ldi	r24, 0x0F	; 15
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    2256:	81 e1       	ldi	r24, 0x11	; 17
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    225e:	e7 c0       	rjmp	.+462    	; 0x242e <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 2:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    2260:	8b e0       	ldi	r24, 0x0B	; 11
    2262:	61 e0       	ldi	r22, 0x01	; 1
    2264:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    2268:	8c e0       	ldi	r24, 0x0C	; 12
    226a:	61 e0       	ldi	r22, 0x01	; 1
    226c:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,LOW);
    2270:	8d e0       	ldi	r24, 0x0D	; 13
    2272:	60 e0       	ldi	r22, 0x00	; 0
    2274:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    2278:	8e e0       	ldi	r24, 0x0E	; 14
    227a:	61 e0       	ldi	r22, 0x01	; 1
    227c:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    2280:	8f e0       	ldi	r24, 0x0F	; 15
    2282:	61 e0       	ldi	r22, 0x01	; 1
    2284:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    2288:	80 e1       	ldi	r24, 0x10	; 16
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    2290:	81 e1       	ldi	r24, 0x11	; 17
    2292:	61 e0       	ldi	r22, 0x01	; 1
    2294:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    2298:	ca c0       	rjmp	.+404    	; 0x242e <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 3:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    229a:	8b e0       	ldi	r24, 0x0B	; 11
    229c:	61 e0       	ldi	r22, 0x01	; 1
    229e:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    22a2:	8c e0       	ldi	r24, 0x0C	; 12
    22a4:	61 e0       	ldi	r22, 0x01	; 1
    22a6:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    22aa:	8d e0       	ldi	r24, 0x0D	; 13
    22ac:	61 e0       	ldi	r22, 0x01	; 1
    22ae:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    22b2:	8e e0       	ldi	r24, 0x0E	; 14
    22b4:	61 e0       	ldi	r22, 0x01	; 1
    22b6:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    22ba:	8f e0       	ldi	r24, 0x0F	; 15
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    22c2:	80 e1       	ldi	r24, 0x10	; 16
    22c4:	60 e0       	ldi	r22, 0x00	; 0
    22c6:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    22ca:	81 e1       	ldi	r24, 0x11	; 17
    22cc:	61 e0       	ldi	r22, 0x01	; 1
    22ce:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    22d2:	ad c0       	rjmp	.+346    	; 0x242e <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 4:
		M_Dio_Void_PinWrite(SSD_LED_A,LOW);
    22d4:	8b e0       	ldi	r24, 0x0B	; 11
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    22dc:	8c e0       	ldi	r24, 0x0C	; 12
    22de:	61 e0       	ldi	r22, 0x01	; 1
    22e0:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    22e4:	8d e0       	ldi	r24, 0x0D	; 13
    22e6:	61 e0       	ldi	r22, 0x01	; 1
    22e8:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    22ec:	8e e0       	ldi	r24, 0x0E	; 14
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    22f4:	8f e0       	ldi	r24, 0x0F	; 15
    22f6:	60 e0       	ldi	r22, 0x00	; 0
    22f8:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    22fc:	80 e1       	ldi	r24, 0x10	; 16
    22fe:	61 e0       	ldi	r22, 0x01	; 1
    2300:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    2304:	81 e1       	ldi	r24, 0x11	; 17
    2306:	61 e0       	ldi	r22, 0x01	; 1
    2308:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    230c:	90 c0       	rjmp	.+288    	; 0x242e <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 5:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    230e:	8b e0       	ldi	r24, 0x0B	; 11
    2310:	61 e0       	ldi	r22, 0x01	; 1
    2312:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,LOW);
    2316:	8c e0       	ldi	r24, 0x0C	; 12
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    231e:	8d e0       	ldi	r24, 0x0D	; 13
    2320:	61 e0       	ldi	r22, 0x01	; 1
    2322:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    2326:	8e e0       	ldi	r24, 0x0E	; 14
    2328:	61 e0       	ldi	r22, 0x01	; 1
    232a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    232e:	8f e0       	ldi	r24, 0x0F	; 15
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    2336:	80 e1       	ldi	r24, 0x10	; 16
    2338:	61 e0       	ldi	r22, 0x01	; 1
    233a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    233e:	81 e1       	ldi	r24, 0x11	; 17
    2340:	61 e0       	ldi	r22, 0x01	; 1
    2342:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    2346:	73 c0       	rjmp	.+230    	; 0x242e <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 6:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    2348:	8b e0       	ldi	r24, 0x0B	; 11
    234a:	61 e0       	ldi	r22, 0x01	; 1
    234c:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,LOW);
    2350:	8c e0       	ldi	r24, 0x0C	; 12
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    2358:	8d e0       	ldi	r24, 0x0D	; 13
    235a:	61 e0       	ldi	r22, 0x01	; 1
    235c:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    2360:	8e e0       	ldi	r24, 0x0E	; 14
    2362:	61 e0       	ldi	r22, 0x01	; 1
    2364:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    2368:	8f e0       	ldi	r24, 0x0F	; 15
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    2370:	80 e1       	ldi	r24, 0x10	; 16
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    2378:	81 e1       	ldi	r24, 0x11	; 17
    237a:	61 e0       	ldi	r22, 0x01	; 1
    237c:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    2380:	56 c0       	rjmp	.+172    	; 0x242e <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 7:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    2382:	8b e0       	ldi	r24, 0x0B	; 11
    2384:	61 e0       	ldi	r22, 0x01	; 1
    2386:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    238a:	8c e0       	ldi	r24, 0x0C	; 12
    238c:	61 e0       	ldi	r22, 0x01	; 1
    238e:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    2392:	8d e0       	ldi	r24, 0x0D	; 13
    2394:	61 e0       	ldi	r22, 0x01	; 1
    2396:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,LOW);
    239a:	8e e0       	ldi	r24, 0x0E	; 14
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    23a2:	8f e0       	ldi	r24, 0x0F	; 15
    23a4:	60 e0       	ldi	r22, 0x00	; 0
    23a6:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,LOW);
    23aa:	80 e1       	ldi	r24, 0x10	; 16
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,LOW);
    23b2:	81 e1       	ldi	r24, 0x11	; 17
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    23ba:	39 c0       	rjmp	.+114    	; 0x242e <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 8:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    23bc:	8b e0       	ldi	r24, 0x0B	; 11
    23be:	61 e0       	ldi	r22, 0x01	; 1
    23c0:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    23c4:	8c e0       	ldi	r24, 0x0C	; 12
    23c6:	61 e0       	ldi	r22, 0x01	; 1
    23c8:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    23cc:	8d e0       	ldi	r24, 0x0D	; 13
    23ce:	61 e0       	ldi	r22, 0x01	; 1
    23d0:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    23d4:	8e e0       	ldi	r24, 0x0E	; 14
    23d6:	61 e0       	ldi	r22, 0x01	; 1
    23d8:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,HIGH);
    23dc:	8f e0       	ldi	r24, 0x0F	; 15
    23de:	61 e0       	ldi	r22, 0x01	; 1
    23e0:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    23e4:	80 e1       	ldi	r24, 0x10	; 16
    23e6:	61 e0       	ldi	r22, 0x01	; 1
    23e8:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    23ec:	81 e1       	ldi	r24, 0x11	; 17
    23ee:	61 e0       	ldi	r22, 0x01	; 1
    23f0:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    23f4:	1c c0       	rjmp	.+56     	; 0x242e <H_SSD_Void_SSDDisplay+0x6f8>
		break;
	case 9:
		M_Dio_Void_PinWrite(SSD_LED_A,HIGH);
    23f6:	8b e0       	ldi	r24, 0x0B	; 11
    23f8:	61 e0       	ldi	r22, 0x01	; 1
    23fa:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_B,HIGH);
    23fe:	8c e0       	ldi	r24, 0x0C	; 12
    2400:	61 e0       	ldi	r22, 0x01	; 1
    2402:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_C,HIGH);
    2406:	8d e0       	ldi	r24, 0x0D	; 13
    2408:	61 e0       	ldi	r22, 0x01	; 1
    240a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_D,HIGH);
    240e:	8e e0       	ldi	r24, 0x0E	; 14
    2410:	61 e0       	ldi	r22, 0x01	; 1
    2412:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_E,LOW);
    2416:	8f e0       	ldi	r24, 0x0F	; 15
    2418:	60 e0       	ldi	r22, 0x00	; 0
    241a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_F,HIGH);
    241e:	80 e1       	ldi	r24, 0x10	; 16
    2420:	61 e0       	ldi	r22, 0x01	; 1
    2422:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		M_Dio_Void_PinWrite(SSD_LED_G,HIGH);
    2426:	81 e1       	ldi	r24, 0x11	; 17
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		break;

	}

	M_Dio_Void_PinWrite(SSD_EN_1,LOW);
    242e:	84 e2       	ldi	r24, 0x24	; 36
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(SSD_EN_2,HIGH);
    2436:	85 e2       	ldi	r24, 0x25	; 37
    2438:	61 e0       	ldi	r22, 0x01	; 1
    243a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a0 e8       	ldi	r26, 0x80	; 128
    2444:	bf e3       	ldi	r27, 0x3F	; 63
    2446:	8b 87       	std	Y+11, r24	; 0x0b
    2448:	9c 87       	std	Y+12, r25	; 0x0c
    244a:	ad 87       	std	Y+13, r26	; 0x0d
    244c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2450:	7c 85       	ldd	r23, Y+12	; 0x0c
    2452:	8d 85       	ldd	r24, Y+13	; 0x0d
    2454:	9e 85       	ldd	r25, Y+14	; 0x0e
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	4a e7       	ldi	r20, 0x7A	; 122
    245c:	55 e4       	ldi	r21, 0x45	; 69
    245e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	8f 83       	std	Y+7, r24	; 0x07
    2468:	98 87       	std	Y+8, r25	; 0x08
    246a:	a9 87       	std	Y+9, r26	; 0x09
    246c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    246e:	6f 81       	ldd	r22, Y+7	; 0x07
    2470:	78 85       	ldd	r23, Y+8	; 0x08
    2472:	89 85       	ldd	r24, Y+9	; 0x09
    2474:	9a 85       	ldd	r25, Y+10	; 0x0a
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e8       	ldi	r20, 0x80	; 128
    247c:	5f e3       	ldi	r21, 0x3F	; 63
    247e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2482:	88 23       	and	r24, r24
    2484:	2c f4       	brge	.+10     	; 0x2490 <H_SSD_Void_SSDDisplay+0x75a>
		__ticks = 1;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9e 83       	std	Y+6, r25	; 0x06
    248c:	8d 83       	std	Y+5, r24	; 0x05
    248e:	3f c0       	rjmp	.+126    	; 0x250e <H_SSD_Void_SSDDisplay+0x7d8>
	else if (__tmp > 65535)
    2490:	6f 81       	ldd	r22, Y+7	; 0x07
    2492:	78 85       	ldd	r23, Y+8	; 0x08
    2494:	89 85       	ldd	r24, Y+9	; 0x09
    2496:	9a 85       	ldd	r25, Y+10	; 0x0a
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	3f ef       	ldi	r19, 0xFF	; 255
    249c:	4f e7       	ldi	r20, 0x7F	; 127
    249e:	57 e4       	ldi	r21, 0x47	; 71
    24a0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    24a4:	18 16       	cp	r1, r24
    24a6:	4c f5       	brge	.+82     	; 0x24fa <H_SSD_Void_SSDDisplay+0x7c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e2       	ldi	r20, 0x20	; 32
    24b6:	51 e4       	ldi	r21, 0x41	; 65
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	0f c0       	rjmp	.+30     	; 0x24f0 <H_SSD_Void_SSDDisplay+0x7ba>
    24d2:	80 e9       	ldi	r24, 0x90	; 144
    24d4:	91 e0       	ldi	r25, 0x01	; 1
    24d6:	9c 83       	std	Y+4, r25	; 0x04
    24d8:	8b 83       	std	Y+3, r24	; 0x03
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	9c 81       	ldd	r25, Y+4	; 0x04
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <H_SSD_Void_SSDDisplay+0x7a8>
    24e2:	9c 83       	std	Y+4, r25	; 0x04
    24e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e6:	8d 81       	ldd	r24, Y+5	; 0x05
    24e8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	9e 83       	std	Y+6, r25	; 0x06
    24ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	69 f7       	brne	.-38     	; 0x24d2 <H_SSD_Void_SSDDisplay+0x79c>
    24f8:	14 c0       	rjmp	.+40     	; 0x2522 <H_SSD_Void_SSDDisplay+0x7ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fa:	6f 81       	ldd	r22, Y+7	; 0x07
    24fc:	78 85       	ldd	r23, Y+8	; 0x08
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9e 83       	std	Y+6, r25	; 0x06
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	8d 81       	ldd	r24, Y+5	; 0x05
    2510:	9e 81       	ldd	r25, Y+6	; 0x06
    2512:	9a 83       	std	Y+2, r25	; 0x02
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	9a 81       	ldd	r25, Y+2	; 0x02
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <H_SSD_Void_SSDDisplay+0x7e4>
    251e:	9a 83       	std	Y+2, r25	; 0x02
    2520:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	M_Dio_Void_PinWrite(SSD_EN_2,LOW);
    2522:	85 e2       	ldi	r24, 0x25	; 37
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
}
    252a:	a3 96       	adiw	r28, 0x23	; 35
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <H_SSD_Void_SSDCountUp>:

void H_SSD_Void_SSDCountUp(u8 Local_u8_Num)
{
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	60 97       	sbiw	r28, 0x10	; 16
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8_Count = 0;
    2552:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_u8_Count = 0 ; Local_u8_Count <= Local_u8_Num ; Local_u8_Count++)
    2554:	1f 86       	std	Y+15, r1	; 0x0f
    2556:	78 c0       	rjmp	.+240    	; 0x2648 <H_SSD_Void_SSDCountUp+0x10c>
	{
		H_SSD_Void_SSDDisplay(Local_u8_Count);
    2558:	8f 85       	ldd	r24, Y+15	; 0x0f
    255a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <H_SSD_Void_SSDDisplay>
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	a0 ea       	ldi	r26, 0xA0	; 160
    2564:	b0 e4       	ldi	r27, 0x40	; 64
    2566:	8b 87       	std	Y+11, r24	; 0x0b
    2568:	9c 87       	std	Y+12, r25	; 0x0c
    256a:	ad 87       	std	Y+13, r26	; 0x0d
    256c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2570:	7c 85       	ldd	r23, Y+12	; 0x0c
    2572:	8d 85       	ldd	r24, Y+13	; 0x0d
    2574:	9e 85       	ldd	r25, Y+14	; 0x0e
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	4a e7       	ldi	r20, 0x7A	; 122
    257c:	55 e4       	ldi	r21, 0x45	; 69
    257e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	8f 83       	std	Y+7, r24	; 0x07
    2588:	98 87       	std	Y+8, r25	; 0x08
    258a:	a9 87       	std	Y+9, r26	; 0x09
    258c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    258e:	6f 81       	ldd	r22, Y+7	; 0x07
    2590:	78 85       	ldd	r23, Y+8	; 0x08
    2592:	89 85       	ldd	r24, Y+9	; 0x09
    2594:	9a 85       	ldd	r25, Y+10	; 0x0a
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e8       	ldi	r20, 0x80	; 128
    259c:	5f e3       	ldi	r21, 0x3F	; 63
    259e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    25a2:	88 23       	and	r24, r24
    25a4:	2c f4       	brge	.+10     	; 0x25b0 <H_SSD_Void_SSDCountUp+0x74>
		__ticks = 1;
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	8d 83       	std	Y+5, r24	; 0x05
    25ae:	3f c0       	rjmp	.+126    	; 0x262e <H_SSD_Void_SSDCountUp+0xf2>
	else if (__tmp > 65535)
    25b0:	6f 81       	ldd	r22, Y+7	; 0x07
    25b2:	78 85       	ldd	r23, Y+8	; 0x08
    25b4:	89 85       	ldd	r24, Y+9	; 0x09
    25b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	3f ef       	ldi	r19, 0xFF	; 255
    25bc:	4f e7       	ldi	r20, 0x7F	; 127
    25be:	57 e4       	ldi	r21, 0x47	; 71
    25c0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    25c4:	18 16       	cp	r1, r24
    25c6:	4c f5       	brge	.+82     	; 0x261a <H_SSD_Void_SSDCountUp+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    25cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e2       	ldi	r20, 0x20	; 32
    25d6:	51 e4       	ldi	r21, 0x41	; 65
    25d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9e 83       	std	Y+6, r25	; 0x06
    25ee:	8d 83       	std	Y+5, r24	; 0x05
    25f0:	0f c0       	rjmp	.+30     	; 0x2610 <H_SSD_Void_SSDCountUp+0xd4>
    25f2:	80 e9       	ldi	r24, 0x90	; 144
    25f4:	91 e0       	ldi	r25, 0x01	; 1
    25f6:	9c 83       	std	Y+4, r25	; 0x04
    25f8:	8b 83       	std	Y+3, r24	; 0x03
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <H_SSD_Void_SSDCountUp+0xc2>
    2602:	9c 83       	std	Y+4, r25	; 0x04
    2604:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2610:	8d 81       	ldd	r24, Y+5	; 0x05
    2612:	9e 81       	ldd	r25, Y+6	; 0x06
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	69 f7       	brne	.-38     	; 0x25f2 <H_SSD_Void_SSDCountUp+0xb6>
    2618:	14 c0       	rjmp	.+40     	; 0x2642 <H_SSD_Void_SSDCountUp+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261a:	6f 81       	ldd	r22, Y+7	; 0x07
    261c:	78 85       	ldd	r23, Y+8	; 0x08
    261e:	89 85       	ldd	r24, Y+9	; 0x09
    2620:	9a 85       	ldd	r25, Y+10	; 0x0a
    2622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9e 83       	std	Y+6, r25	; 0x06
    262c:	8d 83       	std	Y+5, r24	; 0x05
    262e:	8d 81       	ldd	r24, Y+5	; 0x05
    2630:	9e 81       	ldd	r25, Y+6	; 0x06
    2632:	9a 83       	std	Y+2, r25	; 0x02
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <H_SSD_Void_SSDCountUp+0xfe>
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01
}

void H_SSD_Void_SSDCountUp(u8 Local_u8_Num)
{
	u8 Local_u8_Count = 0;
	for(Local_u8_Count = 0 ; Local_u8_Count <= Local_u8_Num ; Local_u8_Count++)
    2642:	8f 85       	ldd	r24, Y+15	; 0x0f
    2644:	8f 5f       	subi	r24, 0xFF	; 255
    2646:	8f 87       	std	Y+15, r24	; 0x0f
    2648:	9f 85       	ldd	r25, Y+15	; 0x0f
    264a:	88 89       	ldd	r24, Y+16	; 0x10
    264c:	89 17       	cp	r24, r25
    264e:	08 f0       	brcs	.+2      	; 0x2652 <H_SSD_Void_SSDCountUp+0x116>
    2650:	83 cf       	rjmp	.-250    	; 0x2558 <H_SSD_Void_SSDCountUp+0x1c>
	{
		H_SSD_Void_SSDDisplay(Local_u8_Count);
		_delay_ms(5);
	}
}
    2652:	60 96       	adiw	r28, 0x10	; 16
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <H_SSD_Void_SSDCountDown>:

void H_SSD_Void_SSDCountDown(u8 Local_u8_Num)
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	60 97       	sbiw	r28, 0x10	; 16
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	88 8b       	std	Y+16, r24	; 0x10
	s8 Local_u8_Count = Local_u8_Num;
    267a:	88 89       	ldd	r24, Y+16	; 0x10
    267c:	8f 87       	std	Y+15, r24	; 0x0f
	for(Local_u8_Count = Local_u8_Num ; Local_u8_Count > Local_u8_Num ; Local_u8_Count--)
    267e:	88 89       	ldd	r24, Y+16	; 0x10
    2680:	8f 87       	std	Y+15, r24	; 0x0f
    2682:	78 c0       	rjmp	.+240    	; 0x2774 <H_SSD_Void_SSDCountDown+0x110>
	{
		H_SSD_Void_SSDDisplay(Local_u8_Count);
    2684:	8f 85       	ldd	r24, Y+15	; 0x0f
    2686:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <H_SSD_Void_SSDDisplay>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	a0 ea       	ldi	r26, 0xA0	; 160
    2690:	b0 e4       	ldi	r27, 0x40	; 64
    2692:	8b 87       	std	Y+11, r24	; 0x0b
    2694:	9c 87       	std	Y+12, r25	; 0x0c
    2696:	ad 87       	std	Y+13, r26	; 0x0d
    2698:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269a:	6b 85       	ldd	r22, Y+11	; 0x0b
    269c:	7c 85       	ldd	r23, Y+12	; 0x0c
    269e:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	4a e7       	ldi	r20, 0x7A	; 122
    26a8:	55 e4       	ldi	r21, 0x45	; 69
    26aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	8f 83       	std	Y+7, r24	; 0x07
    26b4:	98 87       	std	Y+8, r25	; 0x08
    26b6:	a9 87       	std	Y+9, r26	; 0x09
    26b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ba:	6f 81       	ldd	r22, Y+7	; 0x07
    26bc:	78 85       	ldd	r23, Y+8	; 0x08
    26be:	89 85       	ldd	r24, Y+9	; 0x09
    26c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e8       	ldi	r20, 0x80	; 128
    26c8:	5f e3       	ldi	r21, 0x3F	; 63
    26ca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    26ce:	88 23       	and	r24, r24
    26d0:	2c f4       	brge	.+10     	; 0x26dc <H_SSD_Void_SSDCountDown+0x78>
		__ticks = 1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
    26da:	3f c0       	rjmp	.+126    	; 0x275a <H_SSD_Void_SSDCountDown+0xf6>
	else if (__tmp > 65535)
    26dc:	6f 81       	ldd	r22, Y+7	; 0x07
    26de:	78 85       	ldd	r23, Y+8	; 0x08
    26e0:	89 85       	ldd	r24, Y+9	; 0x09
    26e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	3f ef       	ldi	r19, 0xFF	; 255
    26e8:	4f e7       	ldi	r20, 0x7F	; 127
    26ea:	57 e4       	ldi	r21, 0x47	; 71
    26ec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    26f0:	18 16       	cp	r1, r24
    26f2:	4c f5       	brge	.+82     	; 0x2746 <H_SSD_Void_SSDCountDown+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e2       	ldi	r20, 0x20	; 32
    2702:	51 e4       	ldi	r21, 0x41	; 65
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	bc 01       	movw	r22, r24
    270e:	cd 01       	movw	r24, r26
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
    271c:	0f c0       	rjmp	.+30     	; 0x273c <H_SSD_Void_SSDCountDown+0xd8>
    271e:	80 e9       	ldi	r24, 0x90	; 144
    2720:	91 e0       	ldi	r25, 0x01	; 1
    2722:	9c 83       	std	Y+4, r25	; 0x04
    2724:	8b 83       	std	Y+3, r24	; 0x03
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	9c 81       	ldd	r25, Y+4	; 0x04
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <H_SSD_Void_SSDCountDown+0xc6>
    272e:	9c 83       	std	Y+4, r25	; 0x04
    2730:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2732:	8d 81       	ldd	r24, Y+5	; 0x05
    2734:	9e 81       	ldd	r25, Y+6	; 0x06
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	9e 83       	std	Y+6, r25	; 0x06
    273a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273c:	8d 81       	ldd	r24, Y+5	; 0x05
    273e:	9e 81       	ldd	r25, Y+6	; 0x06
    2740:	00 97       	sbiw	r24, 0x00	; 0
    2742:	69 f7       	brne	.-38     	; 0x271e <H_SSD_Void_SSDCountDown+0xba>
    2744:	14 c0       	rjmp	.+40     	; 0x276e <H_SSD_Void_SSDCountDown+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	9e 83       	std	Y+6, r25	; 0x06
    2758:	8d 83       	std	Y+5, r24	; 0x05
    275a:	8d 81       	ldd	r24, Y+5	; 0x05
    275c:	9e 81       	ldd	r25, Y+6	; 0x06
    275e:	9a 83       	std	Y+2, r25	; 0x02
    2760:	89 83       	std	Y+1, r24	; 0x01
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	9a 81       	ldd	r25, Y+2	; 0x02
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <H_SSD_Void_SSDCountDown+0x102>
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	89 83       	std	Y+1, r24	; 0x01
}

void H_SSD_Void_SSDCountDown(u8 Local_u8_Num)
{
	s8 Local_u8_Count = Local_u8_Num;
	for(Local_u8_Count = Local_u8_Num ; Local_u8_Count > Local_u8_Num ; Local_u8_Count--)
    276e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2770:	81 50       	subi	r24, 0x01	; 1
    2772:	8f 87       	std	Y+15, r24	; 0x0f
    2774:	8f 85       	ldd	r24, Y+15	; 0x0f
    2776:	28 2f       	mov	r18, r24
    2778:	33 27       	eor	r19, r19
    277a:	27 fd       	sbrc	r18, 7
    277c:	30 95       	com	r19
    277e:	88 89       	ldd	r24, Y+16	; 0x10
    2780:	88 2f       	mov	r24, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	82 17       	cp	r24, r18
    2786:	93 07       	cpc	r25, r19
    2788:	0c f4       	brge	.+2      	; 0x278c <H_SSD_Void_SSDCountDown+0x128>
    278a:	7c cf       	rjmp	.-264    	; 0x2684 <H_SSD_Void_SSDCountDown+0x20>
	{
		H_SSD_Void_SSDDisplay(Local_u8_Count);
		_delay_ms(5);
	}
}
    278c:	60 96       	adiw	r28, 0x10	; 16
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <H_Relay_Void_RelayInit>:
 */

#include"Relay.h"

void H_Relay_Void_RelayInit(u8 Local_u8_RelayNum)
{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <H_Relay_Void_RelayInit+0x6>
    27a4:	0f 92       	push	r0
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_RelayNum)
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	3b 83       	std	Y+3, r19	; 0x03
    27b4:	2a 83       	std	Y+2, r18	; 0x02
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	91 05       	cpc	r25, r1
    27be:	31 f0       	breq	.+12     	; 0x27cc <H_Relay_Void_RelayInit+0x2e>
    27c0:	2a 81       	ldd	r18, Y+2	; 0x02
    27c2:	3b 81       	ldd	r19, Y+3	; 0x03
    27c4:	22 30       	cpi	r18, 0x02	; 2
    27c6:	31 05       	cpc	r19, r1
    27c8:	31 f0       	breq	.+12     	; 0x27d6 <H_Relay_Void_RelayInit+0x38>
    27ca:	09 c0       	rjmp	.+18     	; 0x27de <H_Relay_Void_RelayInit+0x40>
	{
		case RELAY1:
			M_Dio_Void_PinMode(Relay1_Pin,OUTPUT);		break;
    27cc:	82 e2       	ldi	r24, 0x22	; 34
    27ce:	61 e0       	ldi	r22, 0x01	; 1
    27d0:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
    27d4:	04 c0       	rjmp	.+8      	; 0x27de <H_Relay_Void_RelayInit+0x40>
		case RELAY2:
			M_Dio_Void_PinMode(Relay2_Pin,OUTPUT);		break;
    27d6:	81 e2       	ldi	r24, 0x21	; 33
    27d8:	61 e0       	ldi	r22, 0x01	; 1
    27da:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
		default:									break;
	}
}
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <H_Relay_Void_RelayOn>:
void H_Relay_Void_RelayOn(u8 Local_u8_RelayNum)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <H_Relay_Void_RelayOn+0x6>
    27f0:	0f 92       	push	r0
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_RelayNum)
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	28 2f       	mov	r18, r24
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	3b 83       	std	Y+3, r19	; 0x03
    2800:	2a 83       	std	Y+2, r18	; 0x02
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	9b 81       	ldd	r25, Y+3	; 0x03
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	91 05       	cpc	r25, r1
    280a:	31 f0       	breq	.+12     	; 0x2818 <H_Relay_Void_RelayOn+0x2e>
    280c:	2a 81       	ldd	r18, Y+2	; 0x02
    280e:	3b 81       	ldd	r19, Y+3	; 0x03
    2810:	22 30       	cpi	r18, 0x02	; 2
    2812:	31 05       	cpc	r19, r1
    2814:	31 f0       	breq	.+12     	; 0x2822 <H_Relay_Void_RelayOn+0x38>
    2816:	09 c0       	rjmp	.+18     	; 0x282a <H_Relay_Void_RelayOn+0x40>
	{
		case RELAY1:
			M_Dio_Void_PinWrite(Relay1_Pin,HIGH);		break;
    2818:	82 e2       	ldi	r24, 0x22	; 34
    281a:	61 e0       	ldi	r22, 0x01	; 1
    281c:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    2820:	04 c0       	rjmp	.+8      	; 0x282a <H_Relay_Void_RelayOn+0x40>
		case RELAY2:
			M_Dio_Void_PinWrite(Relay2_Pin,HIGH);		break;
    2822:	81 e2       	ldi	r24, 0x21	; 33
    2824:	61 e0       	ldi	r22, 0x01	; 1
    2826:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		default:									break;
	}
}
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <H_Relay_Void_RelayOff>:
void H_Relay_Void_RelayOff(u8 Local_u8_RelayNum)
{
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	00 d0       	rcall	.+0      	; 0x283c <H_Relay_Void_RelayOff+0x6>
    283c:	0f 92       	push	r0
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_RelayNum)
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	28 2f       	mov	r18, r24
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	3b 83       	std	Y+3, r19	; 0x03
    284c:	2a 83       	std	Y+2, r18	; 0x02
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	9b 81       	ldd	r25, Y+3	; 0x03
    2852:	81 30       	cpi	r24, 0x01	; 1
    2854:	91 05       	cpc	r25, r1
    2856:	31 f0       	breq	.+12     	; 0x2864 <H_Relay_Void_RelayOff+0x2e>
    2858:	2a 81       	ldd	r18, Y+2	; 0x02
    285a:	3b 81       	ldd	r19, Y+3	; 0x03
    285c:	22 30       	cpi	r18, 0x02	; 2
    285e:	31 05       	cpc	r19, r1
    2860:	31 f0       	breq	.+12     	; 0x286e <H_Relay_Void_RelayOff+0x38>
    2862:	09 c0       	rjmp	.+18     	; 0x2876 <H_Relay_Void_RelayOff+0x40>
	{
		case RELAY1:
			M_Dio_Void_PinWrite(Relay1_Pin,LOW);		break;
    2864:	82 e2       	ldi	r24, 0x22	; 34
    2866:	60 e0       	ldi	r22, 0x00	; 0
    2868:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    286c:	04 c0       	rjmp	.+8      	; 0x2876 <H_Relay_Void_RelayOff+0x40>
		case RELAY2:
			M_Dio_Void_PinWrite(Relay2_Pin,LOW);		break;
    286e:	81 e2       	ldi	r24, 0x21	; 33
    2870:	60 e0       	ldi	r22, 0x00	; 0
    2872:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		default:									break;
	}
}
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <H_Relay_Void_RelayTog>:
void H_Relay_Void_RelayTog(u8 Local_u8_RelayNum)
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	00 d0       	rcall	.+0      	; 0x2888 <H_Relay_Void_RelayTog+0x6>
    2888:	0f 92       	push	r0
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_RelayNum)
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	28 2f       	mov	r18, r24
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	3b 83       	std	Y+3, r19	; 0x03
    2898:	2a 83       	std	Y+2, r18	; 0x02
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	9b 81       	ldd	r25, Y+3	; 0x03
    289e:	81 30       	cpi	r24, 0x01	; 1
    28a0:	91 05       	cpc	r25, r1
    28a2:	31 f0       	breq	.+12     	; 0x28b0 <H_Relay_Void_RelayTog+0x2e>
    28a4:	2a 81       	ldd	r18, Y+2	; 0x02
    28a6:	3b 81       	ldd	r19, Y+3	; 0x03
    28a8:	22 30       	cpi	r18, 0x02	; 2
    28aa:	31 05       	cpc	r19, r1
    28ac:	29 f0       	breq	.+10     	; 0x28b8 <H_Relay_Void_RelayTog+0x36>
    28ae:	07 c0       	rjmp	.+14     	; 0x28be <H_Relay_Void_RelayTog+0x3c>
	{
		case RELAY1:
			M_Dio_Void_PinTog(Relay1_Pin);		break;
    28b0:	82 e2       	ldi	r24, 0x22	; 34
    28b2:	0e 94 9e 0c 	call	0x193c	; 0x193c <M_Dio_Void_PinTog>
    28b6:	03 c0       	rjmp	.+6      	; 0x28be <H_Relay_Void_RelayTog+0x3c>
		case RELAY2:
			M_Dio_Void_PinTog(Relay2_Pin );		break;
    28b8:	81 e2       	ldi	r24, 0x21	; 33
    28ba:	0e 94 9e 0c 	call	0x193c	; 0x193c <M_Dio_Void_PinTog>
		default:							break;
	}
}
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <H_PushButton_Void_PushButtonInit>:

#include"PushButton.h"
#include"util/delay.h"

void H_PushButton_Void_PushButtonInit(u8 Local_u8_PushButton)
{
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <H_PushButton_Void_PushButtonInit+0x6>
    28d0:	0f 92       	push	r0
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_PushButton)
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	3b 83       	std	Y+3, r19	; 0x03
    28e0:	2a 83       	std	Y+2, r18	; 0x02
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	9b 81       	ldd	r25, Y+3	; 0x03
    28e6:	82 30       	cpi	r24, 0x02	; 2
    28e8:	91 05       	cpc	r25, r1
    28ea:	d9 f0       	breq	.+54     	; 0x2922 <H_PushButton_Void_PushButtonInit+0x58>
    28ec:	2a 81       	ldd	r18, Y+2	; 0x02
    28ee:	3b 81       	ldd	r19, Y+3	; 0x03
    28f0:	23 30       	cpi	r18, 0x03	; 3
    28f2:	31 05       	cpc	r19, r1
    28f4:	34 f4       	brge	.+12     	; 0x2902 <H_PushButton_Void_PushButtonInit+0x38>
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	9b 81       	ldd	r25, Y+3	; 0x03
    28fa:	81 30       	cpi	r24, 0x01	; 1
    28fc:	91 05       	cpc	r25, r1
    28fe:	61 f0       	breq	.+24     	; 0x2918 <H_PushButton_Void_PushButtonInit+0x4e>
    2900:	1e c0       	rjmp	.+60     	; 0x293e <H_PushButton_Void_PushButtonInit+0x74>
    2902:	2a 81       	ldd	r18, Y+2	; 0x02
    2904:	3b 81       	ldd	r19, Y+3	; 0x03
    2906:	23 30       	cpi	r18, 0x03	; 3
    2908:	31 05       	cpc	r19, r1
    290a:	81 f0       	breq	.+32     	; 0x292c <H_PushButton_Void_PushButtonInit+0x62>
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	9b 81       	ldd	r25, Y+3	; 0x03
    2910:	84 30       	cpi	r24, 0x04	; 4
    2912:	91 05       	cpc	r25, r1
    2914:	81 f0       	breq	.+32     	; 0x2936 <H_PushButton_Void_PushButtonInit+0x6c>
    2916:	13 c0       	rjmp	.+38     	; 0x293e <H_PushButton_Void_PushButtonInit+0x74>
	{
	case PUSHBUTTON1: M_Dio_Void_PinMode(PUSHBUTTON1_PIN,INPUT);	break;
    2918:	8a e2       	ldi	r24, 0x2A	; 42
    291a:	60 e0       	ldi	r22, 0x00	; 0
    291c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
    2920:	0e c0       	rjmp	.+28     	; 0x293e <H_PushButton_Void_PushButtonInit+0x74>
	case PUSHBUTTON2: M_Dio_Void_PinMode(PUSHBUTTON2_PIN,INPUT);	break;
    2922:	8b e2       	ldi	r24, 0x2B	; 43
    2924:	60 e0       	ldi	r22, 0x00	; 0
    2926:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
    292a:	09 c0       	rjmp	.+18     	; 0x293e <H_PushButton_Void_PushButtonInit+0x74>
	case PUSHBUTTON3: M_Dio_Void_PinMode(PUSHBUTTON3_PIN,INPUT);	break;
    292c:	8c e2       	ldi	r24, 0x2C	; 44
    292e:	60 e0       	ldi	r22, 0x00	; 0
    2930:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
    2934:	04 c0       	rjmp	.+8      	; 0x293e <H_PushButton_Void_PushButtonInit+0x74>
	case PUSHBUTTON4: M_Dio_Void_PinMode(PUSHBUTTON4_PIN,INPUT);	break;
    2936:	8d e2       	ldi	r24, 0x2D	; 45
    2938:	60 e0       	ldi	r22, 0x00	; 0
    293a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	default:														break;
	}
}
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <H_PushButton_Void_PushButtonRead>:
u8 H_PushButton_Void_PushButtonRead(u8 Local_u8_PushButton)
{
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	ec 97       	sbiw	r28, 0x3c	; 60
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_u8_Reading = RELEASED;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	89 af       	std	Y+57, r24	; 0x39
	switch(Local_u8_PushButton)
    2964:	8a ad       	ldd	r24, Y+58	; 0x3a
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	3c af       	std	Y+60, r19	; 0x3c
    296c:	2b af       	std	Y+59, r18	; 0x3b
    296e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2970:	9c ad       	ldd	r25, Y+60	; 0x3c
    2972:	82 30       	cpi	r24, 0x02	; 2
    2974:	91 05       	cpc	r25, r1
    2976:	09 f4       	brne	.+2      	; 0x297a <H_PushButton_Void_PushButtonRead+0x30>
    2978:	9f c0       	rjmp	.+318    	; 0x2ab8 <H_PushButton_Void_PushButtonRead+0x16e>
    297a:	2b ad       	ldd	r18, Y+59	; 0x3b
    297c:	3c ad       	ldd	r19, Y+60	; 0x3c
    297e:	23 30       	cpi	r18, 0x03	; 3
    2980:	31 05       	cpc	r19, r1
    2982:	34 f4       	brge	.+12     	; 0x2990 <H_PushButton_Void_PushButtonRead+0x46>
    2984:	8b ad       	ldd	r24, Y+59	; 0x3b
    2986:	9c ad       	ldd	r25, Y+60	; 0x3c
    2988:	81 30       	cpi	r24, 0x01	; 1
    298a:	91 05       	cpc	r25, r1
    298c:	71 f0       	breq	.+28     	; 0x29aa <H_PushButton_Void_PushButtonRead+0x60>
    298e:	27 c2       	rjmp	.+1102   	; 0x2dde <H_PushButton_Void_PushButtonRead+0x494>
    2990:	2b ad       	ldd	r18, Y+59	; 0x3b
    2992:	3c ad       	ldd	r19, Y+60	; 0x3c
    2994:	23 30       	cpi	r18, 0x03	; 3
    2996:	31 05       	cpc	r19, r1
    2998:	09 f4       	brne	.+2      	; 0x299c <H_PushButton_Void_PushButtonRead+0x52>
    299a:	15 c1       	rjmp	.+554    	; 0x2bc6 <H_PushButton_Void_PushButtonRead+0x27c>
    299c:	8b ad       	ldd	r24, Y+59	; 0x3b
    299e:	9c ad       	ldd	r25, Y+60	; 0x3c
    29a0:	84 30       	cpi	r24, 0x04	; 4
    29a2:	91 05       	cpc	r25, r1
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <H_PushButton_Void_PushButtonRead+0x5e>
    29a6:	96 c1       	rjmp	.+812    	; 0x2cd4 <H_PushButton_Void_PushButtonRead+0x38a>
    29a8:	1a c2       	rjmp	.+1076   	; 0x2dde <H_PushButton_Void_PushButtonRead+0x494>
	{
	case PUSHBUTTON1:
		Local_u8_Reading = M_Dio_U8_PinRead(PUSHBUTTON1_PIN) ;
    29aa:	8a e2       	ldi	r24, 0x2A	; 42
    29ac:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    29b0:	89 af       	std	Y+57, r24	; 0x39
		if(Local_u8_Reading == PRESSED)
    29b2:	89 ad       	ldd	r24, Y+57	; 0x39
    29b4:	88 23       	and	r24, r24
    29b6:	09 f0       	breq	.+2      	; 0x29ba <H_PushButton_Void_PushButtonRead+0x70>
    29b8:	12 c2       	rjmp	.+1060   	; 0x2dde <H_PushButton_Void_PushButtonRead+0x494>
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	a8 ec       	ldi	r26, 0xC8	; 200
    29c0:	b2 e4       	ldi	r27, 0x42	; 66
    29c2:	8d ab       	std	Y+53, r24	; 0x35
    29c4:	9e ab       	std	Y+54, r25	; 0x36
    29c6:	af ab       	std	Y+55, r26	; 0x37
    29c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ca:	6d a9       	ldd	r22, Y+53	; 0x35
    29cc:	7e a9       	ldd	r23, Y+54	; 0x36
    29ce:	8f a9       	ldd	r24, Y+55	; 0x37
    29d0:	98 ad       	ldd	r25, Y+56	; 0x38
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	4a e7       	ldi	r20, 0x7A	; 122
    29d8:	55 e4       	ldi	r21, 0x45	; 69
    29da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	89 ab       	std	Y+49, r24	; 0x31
    29e4:	9a ab       	std	Y+50, r25	; 0x32
    29e6:	ab ab       	std	Y+51, r26	; 0x33
    29e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29ea:	69 a9       	ldd	r22, Y+49	; 0x31
    29ec:	7a a9       	ldd	r23, Y+50	; 0x32
    29ee:	8b a9       	ldd	r24, Y+51	; 0x33
    29f0:	9c a9       	ldd	r25, Y+52	; 0x34
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e8       	ldi	r20, 0x80	; 128
    29f8:	5f e3       	ldi	r21, 0x3F	; 63
    29fa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    29fe:	88 23       	and	r24, r24
    2a00:	2c f4       	brge	.+10     	; 0x2a0c <H_PushButton_Void_PushButtonRead+0xc2>
		__ticks = 1;
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	98 ab       	std	Y+48, r25	; 0x30
    2a08:	8f a7       	std	Y+47, r24	; 0x2f
    2a0a:	3f c0       	rjmp	.+126    	; 0x2a8a <H_PushButton_Void_PushButtonRead+0x140>
	else if (__tmp > 65535)
    2a0c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a0e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a10:	8b a9       	ldd	r24, Y+51	; 0x33
    2a12:	9c a9       	ldd	r25, Y+52	; 0x34
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	3f ef       	ldi	r19, 0xFF	; 255
    2a18:	4f e7       	ldi	r20, 0x7F	; 127
    2a1a:	57 e4       	ldi	r21, 0x47	; 71
    2a1c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2a20:	18 16       	cp	r1, r24
    2a22:	4c f5       	brge	.+82     	; 0x2a76 <H_PushButton_Void_PushButtonRead+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a24:	6d a9       	ldd	r22, Y+53	; 0x35
    2a26:	7e a9       	ldd	r23, Y+54	; 0x36
    2a28:	8f a9       	ldd	r24, Y+55	; 0x37
    2a2a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	40 e2       	ldi	r20, 0x20	; 32
    2a32:	51 e4       	ldi	r21, 0x41	; 65
    2a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	bc 01       	movw	r22, r24
    2a3e:	cd 01       	movw	r24, r26
    2a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	98 ab       	std	Y+48, r25	; 0x30
    2a4a:	8f a7       	std	Y+47, r24	; 0x2f
    2a4c:	0f c0       	rjmp	.+30     	; 0x2a6c <H_PushButton_Void_PushButtonRead+0x122>
    2a4e:	80 e9       	ldi	r24, 0x90	; 144
    2a50:	91 e0       	ldi	r25, 0x01	; 1
    2a52:	9e a7       	std	Y+46, r25	; 0x2e
    2a54:	8d a7       	std	Y+45, r24	; 0x2d
    2a56:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a58:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <H_PushButton_Void_PushButtonRead+0x110>
    2a5e:	9e a7       	std	Y+46, r25	; 0x2e
    2a60:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a62:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a64:	98 a9       	ldd	r25, Y+48	; 0x30
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	98 ab       	std	Y+48, r25	; 0x30
    2a6a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a6e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	69 f7       	brne	.-38     	; 0x2a4e <H_PushButton_Void_PushButtonRead+0x104>
    2a74:	14 c0       	rjmp	.+40     	; 0x2a9e <H_PushButton_Void_PushButtonRead+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a76:	69 a9       	ldd	r22, Y+49	; 0x31
    2a78:	7a a9       	ldd	r23, Y+50	; 0x32
    2a7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	98 ab       	std	Y+48, r25	; 0x30
    2a88:	8f a7       	std	Y+47, r24	; 0x2f
    2a8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a8c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a8e:	9c a7       	std	Y+44, r25	; 0x2c
    2a90:	8b a7       	std	Y+43, r24	; 0x2b
    2a92:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a94:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <H_PushButton_Void_PushButtonRead+0x14c>
    2a9a:	9c a7       	std	Y+44, r25	; 0x2c
    2a9c:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_U8_PinRead(PUSHBUTTON1_PIN) == PRESSED)
    2a9e:	8a e2       	ldi	r24, 0x2A	; 42
    2aa0:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    2aa4:	88 23       	and	r24, r24
    2aa6:	09 f0       	breq	.+2      	; 0x2aaa <H_PushButton_Void_PushButtonRead+0x160>
    2aa8:	9a c1       	rjmp	.+820    	; 0x2dde <H_PushButton_Void_PushButtonRead+0x494>
			{
				while(M_Dio_U8_PinRead(PUSHBUTTON1_PIN) == PRESSED);
    2aaa:	8a e2       	ldi	r24, 0x2A	; 42
    2aac:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    2ab0:	88 23       	and	r24, r24
    2ab2:	d9 f3       	breq	.-10     	; 0x2aaa <H_PushButton_Void_PushButtonRead+0x160>
				Local_u8_Reading = PRESSED;
    2ab4:	19 ae       	std	Y+57, r1	; 0x39
    2ab6:	93 c1       	rjmp	.+806    	; 0x2dde <H_PushButton_Void_PushButtonRead+0x494>
			}
		}
		break;
	case PUSHBUTTON2:
		Local_u8_Reading = M_Dio_U8_PinRead(PUSHBUTTON2_PIN) ;
    2ab8:	8b e2       	ldi	r24, 0x2B	; 43
    2aba:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    2abe:	89 af       	std	Y+57, r24	; 0x39
		if(Local_u8_Reading == PRESSED)
    2ac0:	89 ad       	ldd	r24, Y+57	; 0x39
    2ac2:	88 23       	and	r24, r24
    2ac4:	09 f0       	breq	.+2      	; 0x2ac8 <H_PushButton_Void_PushButtonRead+0x17e>
    2ac6:	8b c1       	rjmp	.+790    	; 0x2dde <H_PushButton_Void_PushButtonRead+0x494>
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	a8 ec       	ldi	r26, 0xC8	; 200
    2ace:	b2 e4       	ldi	r27, 0x42	; 66
    2ad0:	8f a3       	std	Y+39, r24	; 0x27
    2ad2:	98 a7       	std	Y+40, r25	; 0x28
    2ad4:	a9 a7       	std	Y+41, r26	; 0x29
    2ad6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad8:	6f a1       	ldd	r22, Y+39	; 0x27
    2ada:	78 a5       	ldd	r23, Y+40	; 0x28
    2adc:	89 a5       	ldd	r24, Y+41	; 0x29
    2ade:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	4a e7       	ldi	r20, 0x7A	; 122
    2ae6:	55 e4       	ldi	r21, 0x45	; 69
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	8b a3       	std	Y+35, r24	; 0x23
    2af2:	9c a3       	std	Y+36, r25	; 0x24
    2af4:	ad a3       	std	Y+37, r26	; 0x25
    2af6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2af8:	6b a1       	ldd	r22, Y+35	; 0x23
    2afa:	7c a1       	ldd	r23, Y+36	; 0x24
    2afc:	8d a1       	ldd	r24, Y+37	; 0x25
    2afe:	9e a1       	ldd	r25, Y+38	; 0x26
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 e8       	ldi	r20, 0x80	; 128
    2b06:	5f e3       	ldi	r21, 0x3F	; 63
    2b08:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b0c:	88 23       	and	r24, r24
    2b0e:	2c f4       	brge	.+10     	; 0x2b1a <H_PushButton_Void_PushButtonRead+0x1d0>
		__ticks = 1;
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	9a a3       	std	Y+34, r25	; 0x22
    2b16:	89 a3       	std	Y+33, r24	; 0x21
    2b18:	3f c0       	rjmp	.+126    	; 0x2b98 <H_PushButton_Void_PushButtonRead+0x24e>
	else if (__tmp > 65535)
    2b1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b20:	9e a1       	ldd	r25, Y+38	; 0x26
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	3f ef       	ldi	r19, 0xFF	; 255
    2b26:	4f e7       	ldi	r20, 0x7F	; 127
    2b28:	57 e4       	ldi	r21, 0x47	; 71
    2b2a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b2e:	18 16       	cp	r1, r24
    2b30:	4c f5       	brge	.+82     	; 0x2b84 <H_PushButton_Void_PushButtonRead+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b32:	6f a1       	ldd	r22, Y+39	; 0x27
    2b34:	78 a5       	ldd	r23, Y+40	; 0x28
    2b36:	89 a5       	ldd	r24, Y+41	; 0x29
    2b38:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e2       	ldi	r20, 0x20	; 32
    2b40:	51 e4       	ldi	r21, 0x41	; 65
    2b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	bc 01       	movw	r22, r24
    2b4c:	cd 01       	movw	r24, r26
    2b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	9a a3       	std	Y+34, r25	; 0x22
    2b58:	89 a3       	std	Y+33, r24	; 0x21
    2b5a:	0f c0       	rjmp	.+30     	; 0x2b7a <H_PushButton_Void_PushButtonRead+0x230>
    2b5c:	80 e9       	ldi	r24, 0x90	; 144
    2b5e:	91 e0       	ldi	r25, 0x01	; 1
    2b60:	98 a3       	std	Y+32, r25	; 0x20
    2b62:	8f 8f       	std	Y+31, r24	; 0x1f
    2b64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b66:	98 a1       	ldd	r25, Y+32	; 0x20
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <H_PushButton_Void_PushButtonRead+0x21e>
    2b6c:	98 a3       	std	Y+32, r25	; 0x20
    2b6e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b70:	89 a1       	ldd	r24, Y+33	; 0x21
    2b72:	9a a1       	ldd	r25, Y+34	; 0x22
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	9a a3       	std	Y+34, r25	; 0x22
    2b78:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b7c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	69 f7       	brne	.-38     	; 0x2b5c <H_PushButton_Void_PushButtonRead+0x212>
    2b82:	14 c0       	rjmp	.+40     	; 0x2bac <H_PushButton_Void_PushButtonRead+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b84:	6b a1       	ldd	r22, Y+35	; 0x23
    2b86:	7c a1       	ldd	r23, Y+36	; 0x24
    2b88:	8d a1       	ldd	r24, Y+37	; 0x25
    2b8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	9a a3       	std	Y+34, r25	; 0x22
    2b96:	89 a3       	std	Y+33, r24	; 0x21
    2b98:	89 a1       	ldd	r24, Y+33	; 0x21
    2b9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b9c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b9e:	8d 8f       	std	Y+29, r24	; 0x1d
    2ba0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ba2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <H_PushButton_Void_PushButtonRead+0x25a>
    2ba8:	9e 8f       	std	Y+30, r25	; 0x1e
    2baa:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_U8_PinRead(PUSHBUTTON2_PIN) == PRESSED)
    2bac:	8b e2       	ldi	r24, 0x2B	; 43
    2bae:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    2bb2:	88 23       	and	r24, r24
    2bb4:	09 f0       	breq	.+2      	; 0x2bb8 <H_PushButton_Void_PushButtonRead+0x26e>
    2bb6:	13 c1       	rjmp	.+550    	; 0x2dde <H_PushButton_Void_PushButtonRead+0x494>
			{
				while(M_Dio_U8_PinRead(PUSHBUTTON2_PIN) == PRESSED);
    2bb8:	8b e2       	ldi	r24, 0x2B	; 43
    2bba:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    2bbe:	88 23       	and	r24, r24
    2bc0:	d9 f3       	breq	.-10     	; 0x2bb8 <H_PushButton_Void_PushButtonRead+0x26e>
				Local_u8_Reading = PRESSED;
    2bc2:	19 ae       	std	Y+57, r1	; 0x39
    2bc4:	0c c1       	rjmp	.+536    	; 0x2dde <H_PushButton_Void_PushButtonRead+0x494>
			}
		}
		break;
	case PUSHBUTTON3:
		Local_u8_Reading = M_Dio_U8_PinRead(PUSHBUTTON3_PIN) ;
    2bc6:	8c e2       	ldi	r24, 0x2C	; 44
    2bc8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    2bcc:	89 af       	std	Y+57, r24	; 0x39
		if(Local_u8_Reading == PRESSED)
    2bce:	89 ad       	ldd	r24, Y+57	; 0x39
    2bd0:	88 23       	and	r24, r24
    2bd2:	09 f0       	breq	.+2      	; 0x2bd6 <H_PushButton_Void_PushButtonRead+0x28c>
    2bd4:	04 c1       	rjmp	.+520    	; 0x2dde <H_PushButton_Void_PushButtonRead+0x494>
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	a8 ec       	ldi	r26, 0xC8	; 200
    2bdc:	b2 e4       	ldi	r27, 0x42	; 66
    2bde:	89 8f       	std	Y+25, r24	; 0x19
    2be0:	9a 8f       	std	Y+26, r25	; 0x1a
    2be2:	ab 8f       	std	Y+27, r26	; 0x1b
    2be4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be6:	69 8d       	ldd	r22, Y+25	; 0x19
    2be8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	4a e7       	ldi	r20, 0x7A	; 122
    2bf4:	55 e4       	ldi	r21, 0x45	; 69
    2bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	8d 8b       	std	Y+21, r24	; 0x15
    2c00:	9e 8b       	std	Y+22, r25	; 0x16
    2c02:	af 8b       	std	Y+23, r26	; 0x17
    2c04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c06:	6d 89       	ldd	r22, Y+21	; 0x15
    2c08:	7e 89       	ldd	r23, Y+22	; 0x16
    2c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e8       	ldi	r20, 0x80	; 128
    2c14:	5f e3       	ldi	r21, 0x3F	; 63
    2c16:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c1a:	88 23       	and	r24, r24
    2c1c:	2c f4       	brge	.+10     	; 0x2c28 <H_PushButton_Void_PushButtonRead+0x2de>
		__ticks = 1;
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	9c 8b       	std	Y+20, r25	; 0x14
    2c24:	8b 8b       	std	Y+19, r24	; 0x13
    2c26:	3f c0       	rjmp	.+126    	; 0x2ca6 <H_PushButton_Void_PushButtonRead+0x35c>
	else if (__tmp > 65535)
    2c28:	6d 89       	ldd	r22, Y+21	; 0x15
    2c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	3f ef       	ldi	r19, 0xFF	; 255
    2c34:	4f e7       	ldi	r20, 0x7F	; 127
    2c36:	57 e4       	ldi	r21, 0x47	; 71
    2c38:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c3c:	18 16       	cp	r1, r24
    2c3e:	4c f5       	brge	.+82     	; 0x2c92 <H_PushButton_Void_PushButtonRead+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c40:	69 8d       	ldd	r22, Y+25	; 0x19
    2c42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e2       	ldi	r20, 0x20	; 32
    2c4e:	51 e4       	ldi	r21, 0x41	; 65
    2c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	bc 01       	movw	r22, r24
    2c5a:	cd 01       	movw	r24, r26
    2c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	9c 8b       	std	Y+20, r25	; 0x14
    2c66:	8b 8b       	std	Y+19, r24	; 0x13
    2c68:	0f c0       	rjmp	.+30     	; 0x2c88 <H_PushButton_Void_PushButtonRead+0x33e>
    2c6a:	80 e9       	ldi	r24, 0x90	; 144
    2c6c:	91 e0       	ldi	r25, 0x01	; 1
    2c6e:	9a 8b       	std	Y+18, r25	; 0x12
    2c70:	89 8b       	std	Y+17, r24	; 0x11
    2c72:	89 89       	ldd	r24, Y+17	; 0x11
    2c74:	9a 89       	ldd	r25, Y+18	; 0x12
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <H_PushButton_Void_PushButtonRead+0x32c>
    2c7a:	9a 8b       	std	Y+18, r25	; 0x12
    2c7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c80:	9c 89       	ldd	r25, Y+20	; 0x14
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	9c 8b       	std	Y+20, r25	; 0x14
    2c86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c88:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	69 f7       	brne	.-38     	; 0x2c6a <H_PushButton_Void_PushButtonRead+0x320>
    2c90:	14 c0       	rjmp	.+40     	; 0x2cba <H_PushButton_Void_PushButtonRead+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c92:	6d 89       	ldd	r22, Y+21	; 0x15
    2c94:	7e 89       	ldd	r23, Y+22	; 0x16
    2c96:	8f 89       	ldd	r24, Y+23	; 0x17
    2c98:	98 8d       	ldd	r25, Y+24	; 0x18
    2c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	9c 8b       	std	Y+20, r25	; 0x14
    2ca4:	8b 8b       	std	Y+19, r24	; 0x13
    2ca6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca8:	9c 89       	ldd	r25, Y+20	; 0x14
    2caa:	98 8b       	std	Y+16, r25	; 0x10
    2cac:	8f 87       	std	Y+15, r24	; 0x0f
    2cae:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cb0:	98 89       	ldd	r25, Y+16	; 0x10
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	f1 f7       	brne	.-4      	; 0x2cb2 <H_PushButton_Void_PushButtonRead+0x368>
    2cb6:	98 8b       	std	Y+16, r25	; 0x10
    2cb8:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_U8_PinRead(PUSHBUTTON3_PIN) == PRESSED)
    2cba:	8c e2       	ldi	r24, 0x2C	; 44
    2cbc:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    2cc0:	88 23       	and	r24, r24
    2cc2:	09 f0       	breq	.+2      	; 0x2cc6 <H_PushButton_Void_PushButtonRead+0x37c>
    2cc4:	8c c0       	rjmp	.+280    	; 0x2dde <H_PushButton_Void_PushButtonRead+0x494>
			{
				while(M_Dio_U8_PinRead(PUSHBUTTON3_PIN) == PRESSED);
    2cc6:	8c e2       	ldi	r24, 0x2C	; 44
    2cc8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    2ccc:	88 23       	and	r24, r24
    2cce:	d9 f3       	breq	.-10     	; 0x2cc6 <H_PushButton_Void_PushButtonRead+0x37c>
				Local_u8_Reading = PRESSED;
    2cd0:	19 ae       	std	Y+57, r1	; 0x39
    2cd2:	85 c0       	rjmp	.+266    	; 0x2dde <H_PushButton_Void_PushButtonRead+0x494>
			}
		}
		break;
	case PUSHBUTTON4:
		Local_u8_Reading = M_Dio_U8_PinRead(PUSHBUTTON4_PIN) ;
    2cd4:	8d e2       	ldi	r24, 0x2D	; 45
    2cd6:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    2cda:	89 af       	std	Y+57, r24	; 0x39
		if(Local_u8_Reading == PRESSED)
    2cdc:	89 ad       	ldd	r24, Y+57	; 0x39
    2cde:	88 23       	and	r24, r24
    2ce0:	09 f0       	breq	.+2      	; 0x2ce4 <H_PushButton_Void_PushButtonRead+0x39a>
    2ce2:	7d c0       	rjmp	.+250    	; 0x2dde <H_PushButton_Void_PushButtonRead+0x494>
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	a8 ec       	ldi	r26, 0xC8	; 200
    2cea:	b2 e4       	ldi	r27, 0x42	; 66
    2cec:	8b 87       	std	Y+11, r24	; 0x0b
    2cee:	9c 87       	std	Y+12, r25	; 0x0c
    2cf0:	ad 87       	std	Y+13, r26	; 0x0d
    2cf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	4a e7       	ldi	r20, 0x7A	; 122
    2d02:	55 e4       	ldi	r21, 0x45	; 69
    2d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	8f 83       	std	Y+7, r24	; 0x07
    2d0e:	98 87       	std	Y+8, r25	; 0x08
    2d10:	a9 87       	std	Y+9, r26	; 0x09
    2d12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d14:	6f 81       	ldd	r22, Y+7	; 0x07
    2d16:	78 85       	ldd	r23, Y+8	; 0x08
    2d18:	89 85       	ldd	r24, Y+9	; 0x09
    2d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e8       	ldi	r20, 0x80	; 128
    2d22:	5f e3       	ldi	r21, 0x3F	; 63
    2d24:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d28:	88 23       	and	r24, r24
    2d2a:	2c f4       	brge	.+10     	; 0x2d36 <H_PushButton_Void_PushButtonRead+0x3ec>
		__ticks = 1;
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	9e 83       	std	Y+6, r25	; 0x06
    2d32:	8d 83       	std	Y+5, r24	; 0x05
    2d34:	3f c0       	rjmp	.+126    	; 0x2db4 <H_PushButton_Void_PushButtonRead+0x46a>
	else if (__tmp > 65535)
    2d36:	6f 81       	ldd	r22, Y+7	; 0x07
    2d38:	78 85       	ldd	r23, Y+8	; 0x08
    2d3a:	89 85       	ldd	r24, Y+9	; 0x09
    2d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	3f ef       	ldi	r19, 0xFF	; 255
    2d42:	4f e7       	ldi	r20, 0x7F	; 127
    2d44:	57 e4       	ldi	r21, 0x47	; 71
    2d46:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d4a:	18 16       	cp	r1, r24
    2d4c:	4c f5       	brge	.+82     	; 0x2da0 <H_PushButton_Void_PushButtonRead+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e2       	ldi	r20, 0x20	; 32
    2d5c:	51 e4       	ldi	r21, 0x41	; 65
    2d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	9e 83       	std	Y+6, r25	; 0x06
    2d74:	8d 83       	std	Y+5, r24	; 0x05
    2d76:	0f c0       	rjmp	.+30     	; 0x2d96 <H_PushButton_Void_PushButtonRead+0x44c>
    2d78:	80 e9       	ldi	r24, 0x90	; 144
    2d7a:	91 e0       	ldi	r25, 0x01	; 1
    2d7c:	9c 83       	std	Y+4, r25	; 0x04
    2d7e:	8b 83       	std	Y+3, r24	; 0x03
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	9c 81       	ldd	r25, Y+4	; 0x04
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	f1 f7       	brne	.-4      	; 0x2d84 <H_PushButton_Void_PushButtonRead+0x43a>
    2d88:	9c 83       	std	Y+4, r25	; 0x04
    2d8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	9e 83       	std	Y+6, r25	; 0x06
    2d94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d96:	8d 81       	ldd	r24, Y+5	; 0x05
    2d98:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	69 f7       	brne	.-38     	; 0x2d78 <H_PushButton_Void_PushButtonRead+0x42e>
    2d9e:	14 c0       	rjmp	.+40     	; 0x2dc8 <H_PushButton_Void_PushButtonRead+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da0:	6f 81       	ldd	r22, Y+7	; 0x07
    2da2:	78 85       	ldd	r23, Y+8	; 0x08
    2da4:	89 85       	ldd	r24, Y+9	; 0x09
    2da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	9e 83       	std	Y+6, r25	; 0x06
    2db2:	8d 83       	std	Y+5, r24	; 0x05
    2db4:	8d 81       	ldd	r24, Y+5	; 0x05
    2db6:	9e 81       	ldd	r25, Y+6	; 0x06
    2db8:	9a 83       	std	Y+2, r25	; 0x02
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	f1 f7       	brne	.-4      	; 0x2dc0 <H_PushButton_Void_PushButtonRead+0x476>
    2dc4:	9a 83       	std	Y+2, r25	; 0x02
    2dc6:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_U8_PinRead(PUSHBUTTON4_PIN) == PRESSED)
    2dc8:	8d e2       	ldi	r24, 0x2D	; 45
    2dca:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    2dce:	88 23       	and	r24, r24
    2dd0:	31 f4       	brne	.+12     	; 0x2dde <H_PushButton_Void_PushButtonRead+0x494>
			{
				while(M_Dio_U8_PinRead(PUSHBUTTON4_PIN) == PRESSED);
    2dd2:	8d e2       	ldi	r24, 0x2D	; 45
    2dd4:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    2dd8:	88 23       	and	r24, r24
    2dda:	d9 f3       	breq	.-10     	; 0x2dd2 <H_PushButton_Void_PushButtonRead+0x488>
				Local_u8_Reading = PRESSED;
    2ddc:	19 ae       	std	Y+57, r1	; 0x39
			}
		}
		break;
	default:												break;
	}
	return Local_u8_Reading;
    2dde:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2de0:	ec 96       	adiw	r28, 0x3c	; 60
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <H_Led_Void_LedInit>:
#include"Led.h"



void H_Led_Void_LedInit(u8 Local_Led_Pin)
{
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	00 d0       	rcall	.+0      	; 0x2df8 <H_Led_Void_LedInit+0x6>
    2df8:	0f 92       	push	r0
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
    2dfe:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_Led_Pin)
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	28 2f       	mov	r18, r24
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	3b 83       	std	Y+3, r19	; 0x03
    2e08:	2a 83       	std	Y+2, r18	; 0x02
    2e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e0e:	82 30       	cpi	r24, 0x02	; 2
    2e10:	91 05       	cpc	r25, r1
    2e12:	79 f0       	breq	.+30     	; 0x2e32 <H_Led_Void_LedInit+0x40>
    2e14:	2a 81       	ldd	r18, Y+2	; 0x02
    2e16:	3b 81       	ldd	r19, Y+3	; 0x03
    2e18:	23 30       	cpi	r18, 0x03	; 3
    2e1a:	31 05       	cpc	r19, r1
    2e1c:	79 f0       	breq	.+30     	; 0x2e3c <H_Led_Void_LedInit+0x4a>
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	9b 81       	ldd	r25, Y+3	; 0x03
    2e22:	81 30       	cpi	r24, 0x01	; 1
    2e24:	91 05       	cpc	r25, r1
    2e26:	71 f4       	brne	.+28     	; 0x2e44 <H_Led_Void_LedInit+0x52>
	{
	case BLU_LED:M_Dio_Void_PinMode(Blu_Led_Pin,OUTPUT);	break;
    2e28:	80 e2       	ldi	r24, 0x20	; 32
    2e2a:	61 e0       	ldi	r22, 0x01	; 1
    2e2c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
    2e30:	09 c0       	rjmp	.+18     	; 0x2e44 <H_Led_Void_LedInit+0x52>
	case GRN_LED:M_Dio_Void_PinMode(Grn_Led_Pin,OUTPUT); 	break;
    2e32:	8f e1       	ldi	r24, 0x1F	; 31
    2e34:	61 e0       	ldi	r22, 0x01	; 1
    2e36:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
    2e3a:	04 c0       	rjmp	.+8      	; 0x2e44 <H_Led_Void_LedInit+0x52>
	case RED_LED:M_Dio_Void_PinMode(Red_Led_Pin,OUTPUT);	break;
    2e3c:	8e e1       	ldi	r24, 0x1E	; 30
    2e3e:	61 e0       	ldi	r22, 0x01	; 1
    2e40:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	default:												break;
	}
}
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	08 95       	ret

00002e50 <H_Led_Void_LedOn>:

void H_Led_Void_LedOn(u8 Local_Led_Pin)
{
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <H_Led_Void_LedOn+0x6>
    2e56:	0f 92       	push	r0
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_Led_Pin)
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	28 2f       	mov	r18, r24
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	3b 83       	std	Y+3, r19	; 0x03
    2e66:	2a 83       	std	Y+2, r18	; 0x02
    2e68:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6c:	82 30       	cpi	r24, 0x02	; 2
    2e6e:	91 05       	cpc	r25, r1
    2e70:	79 f0       	breq	.+30     	; 0x2e90 <H_Led_Void_LedOn+0x40>
    2e72:	2a 81       	ldd	r18, Y+2	; 0x02
    2e74:	3b 81       	ldd	r19, Y+3	; 0x03
    2e76:	23 30       	cpi	r18, 0x03	; 3
    2e78:	31 05       	cpc	r19, r1
    2e7a:	79 f0       	breq	.+30     	; 0x2e9a <H_Led_Void_LedOn+0x4a>
    2e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e80:	81 30       	cpi	r24, 0x01	; 1
    2e82:	91 05       	cpc	r25, r1
    2e84:	71 f4       	brne	.+28     	; 0x2ea2 <H_Led_Void_LedOn+0x52>
	{
	case BLU_LED:M_Dio_Void_PinWrite(Blu_Led_Pin,HIGH);	break;
    2e86:	80 e2       	ldi	r24, 0x20	; 32
    2e88:	61 e0       	ldi	r22, 0x01	; 1
    2e8a:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    2e8e:	09 c0       	rjmp	.+18     	; 0x2ea2 <H_Led_Void_LedOn+0x52>
	case GRN_LED:M_Dio_Void_PinWrite(Grn_Led_Pin,HIGH);	break;
    2e90:	8f e1       	ldi	r24, 0x1F	; 31
    2e92:	61 e0       	ldi	r22, 0x01	; 1
    2e94:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    2e98:	04 c0       	rjmp	.+8      	; 0x2ea2 <H_Led_Void_LedOn+0x52>
	case RED_LED:M_Dio_Void_PinWrite(Red_Led_Pin,HIGH);	break;
    2e9a:	8e e1       	ldi	r24, 0x1E	; 30
    2e9c:	61 e0       	ldi	r22, 0x01	; 1
    2e9e:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
	default:											break;
	}
}
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	08 95       	ret

00002eae <H_Led_Void_LedOff>:
void H_Led_Void_LedOff(u8 Local_Led_Pin)
{
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <H_Led_Void_LedOff+0x6>
    2eb4:	0f 92       	push	r0
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
    2eba:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_Led_Pin)
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	28 2f       	mov	r18, r24
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	3b 83       	std	Y+3, r19	; 0x03
    2ec4:	2a 83       	std	Y+2, r18	; 0x02
    2ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eca:	82 30       	cpi	r24, 0x02	; 2
    2ecc:	91 05       	cpc	r25, r1
    2ece:	79 f0       	breq	.+30     	; 0x2eee <H_Led_Void_LedOff+0x40>
    2ed0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ed2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ed4:	23 30       	cpi	r18, 0x03	; 3
    2ed6:	31 05       	cpc	r19, r1
    2ed8:	79 f0       	breq	.+30     	; 0x2ef8 <H_Led_Void_LedOff+0x4a>
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ede:	81 30       	cpi	r24, 0x01	; 1
    2ee0:	91 05       	cpc	r25, r1
    2ee2:	71 f4       	brne	.+28     	; 0x2f00 <H_Led_Void_LedOff+0x52>
	{
	case BLU_LED:M_Dio_Void_PinWrite(Blu_Led_Pin,LOW);	break;
    2ee4:	80 e2       	ldi	r24, 0x20	; 32
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    2eec:	09 c0       	rjmp	.+18     	; 0x2f00 <H_Led_Void_LedOff+0x52>
	case GRN_LED:M_Dio_Void_PinWrite(Grn_Led_Pin,LOW); 	break;
    2eee:	8f e1       	ldi	r24, 0x1F	; 31
    2ef0:	60 e0       	ldi	r22, 0x00	; 0
    2ef2:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    2ef6:	04 c0       	rjmp	.+8      	; 0x2f00 <H_Led_Void_LedOff+0x52>
	case RED_LED:M_Dio_Void_PinWrite(Red_Led_Pin,LOW);	break;
    2ef8:	8e e1       	ldi	r24, 0x1E	; 30
    2efa:	60 e0       	ldi	r22, 0x00	; 0
    2efc:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
	default:											break;
	}
}
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <H_Led_Void_LedBlink>:

void H_Led_Void_LedBlink(u8 Local_Led_Pin)
{
    2f0c:	df 93       	push	r29
    2f0e:	cf 93       	push	r28
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	6d 97       	sbiw	r28, 0x1d	; 29
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	f8 94       	cli
    2f1a:	de bf       	out	0x3e, r29	; 62
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	cd bf       	out	0x3d, r28	; 61
    2f20:	8d 8f       	std	Y+29, r24	; 0x1d
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	aa ef       	ldi	r26, 0xFA	; 250
    2f28:	b3 e4       	ldi	r27, 0x43	; 67
    2f2a:	89 8f       	std	Y+25, r24	; 0x19
    2f2c:	9a 8f       	std	Y+26, r25	; 0x1a
    2f2e:	ab 8f       	std	Y+27, r26	; 0x1b
    2f30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f32:	69 8d       	ldd	r22, Y+25	; 0x19
    2f34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	4a e7       	ldi	r20, 0x7A	; 122
    2f40:	55 e4       	ldi	r21, 0x45	; 69
    2f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	8d 8b       	std	Y+21, r24	; 0x15
    2f4c:	9e 8b       	std	Y+22, r25	; 0x16
    2f4e:	af 8b       	std	Y+23, r26	; 0x17
    2f50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f52:	6d 89       	ldd	r22, Y+21	; 0x15
    2f54:	7e 89       	ldd	r23, Y+22	; 0x16
    2f56:	8f 89       	ldd	r24, Y+23	; 0x17
    2f58:	98 8d       	ldd	r25, Y+24	; 0x18
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e8       	ldi	r20, 0x80	; 128
    2f60:	5f e3       	ldi	r21, 0x3F	; 63
    2f62:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f66:	88 23       	and	r24, r24
    2f68:	2c f4       	brge	.+10     	; 0x2f74 <H_Led_Void_LedBlink+0x68>
		__ticks = 1;
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	9c 8b       	std	Y+20, r25	; 0x14
    2f70:	8b 8b       	std	Y+19, r24	; 0x13
    2f72:	3f c0       	rjmp	.+126    	; 0x2ff2 <H_Led_Void_LedBlink+0xe6>
	else if (__tmp > 65535)
    2f74:	6d 89       	ldd	r22, Y+21	; 0x15
    2f76:	7e 89       	ldd	r23, Y+22	; 0x16
    2f78:	8f 89       	ldd	r24, Y+23	; 0x17
    2f7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	3f ef       	ldi	r19, 0xFF	; 255
    2f80:	4f e7       	ldi	r20, 0x7F	; 127
    2f82:	57 e4       	ldi	r21, 0x47	; 71
    2f84:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f88:	18 16       	cp	r1, r24
    2f8a:	4c f5       	brge	.+82     	; 0x2fde <H_Led_Void_LedBlink+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e2       	ldi	r20, 0x20	; 32
    2f9a:	51 e4       	ldi	r21, 0x41	; 65
    2f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	9c 8b       	std	Y+20, r25	; 0x14
    2fb2:	8b 8b       	std	Y+19, r24	; 0x13
    2fb4:	0f c0       	rjmp	.+30     	; 0x2fd4 <H_Led_Void_LedBlink+0xc8>
    2fb6:	80 e9       	ldi	r24, 0x90	; 144
    2fb8:	91 e0       	ldi	r25, 0x01	; 1
    2fba:	9a 8b       	std	Y+18, r25	; 0x12
    2fbc:	89 8b       	std	Y+17, r24	; 0x11
    2fbe:	89 89       	ldd	r24, Y+17	; 0x11
    2fc0:	9a 89       	ldd	r25, Y+18	; 0x12
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <H_Led_Void_LedBlink+0xb6>
    2fc6:	9a 8b       	std	Y+18, r25	; 0x12
    2fc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fca:	8b 89       	ldd	r24, Y+19	; 0x13
    2fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	9c 8b       	std	Y+20, r25	; 0x14
    2fd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd6:	9c 89       	ldd	r25, Y+20	; 0x14
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	69 f7       	brne	.-38     	; 0x2fb6 <H_Led_Void_LedBlink+0xaa>
    2fdc:	14 c0       	rjmp	.+40     	; 0x3006 <H_Led_Void_LedBlink+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fde:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9c 8b       	std	Y+20, r25	; 0x14
    2ff0:	8b 8b       	std	Y+19, r24	; 0x13
    2ff2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff6:	98 8b       	std	Y+16, r25	; 0x10
    2ff8:	8f 87       	std	Y+15, r24	; 0x0f
    2ffa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ffc:	98 89       	ldd	r25, Y+16	; 0x10
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <H_Led_Void_LedBlink+0xf2>
    3002:	98 8b       	std	Y+16, r25	; 0x10
    3004:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(LED_DELAY_TIME);
		H_Led_Void_LedOn(Local_Led_Pin);
    3006:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3008:	0e 94 28 17 	call	0x2e50	; 0x2e50 <H_Led_Void_LedOn>
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	aa ef       	ldi	r26, 0xFA	; 250
    3012:	b3 e4       	ldi	r27, 0x43	; 67
    3014:	8b 87       	std	Y+11, r24	; 0x0b
    3016:	9c 87       	std	Y+12, r25	; 0x0c
    3018:	ad 87       	std	Y+13, r26	; 0x0d
    301a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301c:	6b 85       	ldd	r22, Y+11	; 0x0b
    301e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3020:	8d 85       	ldd	r24, Y+13	; 0x0d
    3022:	9e 85       	ldd	r25, Y+14	; 0x0e
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	4a e7       	ldi	r20, 0x7A	; 122
    302a:	55 e4       	ldi	r21, 0x45	; 69
    302c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	8f 83       	std	Y+7, r24	; 0x07
    3036:	98 87       	std	Y+8, r25	; 0x08
    3038:	a9 87       	std	Y+9, r26	; 0x09
    303a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    303c:	6f 81       	ldd	r22, Y+7	; 0x07
    303e:	78 85       	ldd	r23, Y+8	; 0x08
    3040:	89 85       	ldd	r24, Y+9	; 0x09
    3042:	9a 85       	ldd	r25, Y+10	; 0x0a
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	40 e8       	ldi	r20, 0x80	; 128
    304a:	5f e3       	ldi	r21, 0x3F	; 63
    304c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3050:	88 23       	and	r24, r24
    3052:	2c f4       	brge	.+10     	; 0x305e <H_Led_Void_LedBlink+0x152>
		__ticks = 1;
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	9e 83       	std	Y+6, r25	; 0x06
    305a:	8d 83       	std	Y+5, r24	; 0x05
    305c:	3f c0       	rjmp	.+126    	; 0x30dc <H_Led_Void_LedBlink+0x1d0>
	else if (__tmp > 65535)
    305e:	6f 81       	ldd	r22, Y+7	; 0x07
    3060:	78 85       	ldd	r23, Y+8	; 0x08
    3062:	89 85       	ldd	r24, Y+9	; 0x09
    3064:	9a 85       	ldd	r25, Y+10	; 0x0a
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	3f ef       	ldi	r19, 0xFF	; 255
    306a:	4f e7       	ldi	r20, 0x7F	; 127
    306c:	57 e4       	ldi	r21, 0x47	; 71
    306e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3072:	18 16       	cp	r1, r24
    3074:	4c f5       	brge	.+82     	; 0x30c8 <H_Led_Void_LedBlink+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3076:	6b 85       	ldd	r22, Y+11	; 0x0b
    3078:	7c 85       	ldd	r23, Y+12	; 0x0c
    307a:	8d 85       	ldd	r24, Y+13	; 0x0d
    307c:	9e 85       	ldd	r25, Y+14	; 0x0e
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e2       	ldi	r20, 0x20	; 32
    3084:	51 e4       	ldi	r21, 0x41	; 65
    3086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	bc 01       	movw	r22, r24
    3090:	cd 01       	movw	r24, r26
    3092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	9e 83       	std	Y+6, r25	; 0x06
    309c:	8d 83       	std	Y+5, r24	; 0x05
    309e:	0f c0       	rjmp	.+30     	; 0x30be <H_Led_Void_LedBlink+0x1b2>
    30a0:	80 e9       	ldi	r24, 0x90	; 144
    30a2:	91 e0       	ldi	r25, 0x01	; 1
    30a4:	9c 83       	std	Y+4, r25	; 0x04
    30a6:	8b 83       	std	Y+3, r24	; 0x03
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	9c 81       	ldd	r25, Y+4	; 0x04
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	f1 f7       	brne	.-4      	; 0x30ac <H_Led_Void_LedBlink+0x1a0>
    30b0:	9c 83       	std	Y+4, r25	; 0x04
    30b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b4:	8d 81       	ldd	r24, Y+5	; 0x05
    30b6:	9e 81       	ldd	r25, Y+6	; 0x06
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	9e 83       	std	Y+6, r25	; 0x06
    30bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30be:	8d 81       	ldd	r24, Y+5	; 0x05
    30c0:	9e 81       	ldd	r25, Y+6	; 0x06
    30c2:	00 97       	sbiw	r24, 0x00	; 0
    30c4:	69 f7       	brne	.-38     	; 0x30a0 <H_Led_Void_LedBlink+0x194>
    30c6:	14 c0       	rjmp	.+40     	; 0x30f0 <H_Led_Void_LedBlink+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ca:	78 85       	ldd	r23, Y+8	; 0x08
    30cc:	89 85       	ldd	r24, Y+9	; 0x09
    30ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	9e 83       	std	Y+6, r25	; 0x06
    30da:	8d 83       	std	Y+5, r24	; 0x05
    30dc:	8d 81       	ldd	r24, Y+5	; 0x05
    30de:	9e 81       	ldd	r25, Y+6	; 0x06
    30e0:	9a 83       	std	Y+2, r25	; 0x02
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	9a 81       	ldd	r25, Y+2	; 0x02
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	f1 f7       	brne	.-4      	; 0x30e8 <H_Led_Void_LedBlink+0x1dc>
    30ec:	9a 83       	std	Y+2, r25	; 0x02
    30ee:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(LED_DELAY_TIME);
		H_Led_Void_LedOff(Local_Led_Pin);
    30f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30f2:	0e 94 57 17 	call	0x2eae	; 0x2eae <H_Led_Void_LedOff>
}
    30f6:	6d 96       	adiw	r28, 0x1d	; 29
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	cd bf       	out	0x3d, r28	; 61
    3102:	cf 91       	pop	r28
    3104:	df 91       	pop	r29
    3106:	08 95       	ret

00003108 <H_Led_Void_LedTog>:


void H_Led_Void_LedTog(u8 Local_Led_Pin)
{
    3108:	df 93       	push	r29
    310a:	cf 93       	push	r28
    310c:	00 d0       	rcall	.+0      	; 0x310e <H_Led_Void_LedTog+0x6>
    310e:	0f 92       	push	r0
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_Led_Pin)
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	28 2f       	mov	r18, r24
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	3b 83       	std	Y+3, r19	; 0x03
    311e:	2a 83       	std	Y+2, r18	; 0x02
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	9b 81       	ldd	r25, Y+3	; 0x03
    3124:	82 30       	cpi	r24, 0x02	; 2
    3126:	91 05       	cpc	r25, r1
    3128:	91 f0       	breq	.+36     	; 0x314e <H_Led_Void_LedTog+0x46>
    312a:	2a 81       	ldd	r18, Y+2	; 0x02
    312c:	3b 81       	ldd	r19, Y+3	; 0x03
    312e:	23 30       	cpi	r18, 0x03	; 3
    3130:	31 05       	cpc	r19, r1
    3132:	49 f0       	breq	.+18     	; 0x3146 <H_Led_Void_LedTog+0x3e>
    3134:	8a 81       	ldd	r24, Y+2	; 0x02
    3136:	9b 81       	ldd	r25, Y+3	; 0x03
    3138:	81 30       	cpi	r24, 0x01	; 1
    313a:	91 05       	cpc	r25, r1
    313c:	59 f4       	brne	.+22     	; 0x3154 <H_Led_Void_LedTog+0x4c>
	{
	case BLU_LED:M_Dio_Void_PinTog(Blu_Led_Pin);	break;
    313e:	80 e2       	ldi	r24, 0x20	; 32
    3140:	0e 94 9e 0c 	call	0x193c	; 0x193c <M_Dio_Void_PinTog>
    3144:	07 c0       	rjmp	.+14     	; 0x3154 <H_Led_Void_LedTog+0x4c>
	case RED_LED:M_Dio_Void_PinTog(Red_Led_Pin);	break;
    3146:	8e e1       	ldi	r24, 0x1E	; 30
    3148:	0e 94 9e 0c 	call	0x193c	; 0x193c <M_Dio_Void_PinTog>
    314c:	03 c0       	rjmp	.+6      	; 0x3154 <H_Led_Void_LedTog+0x4c>
	case GRN_LED:M_Dio_Void_PinTog(Grn_Led_Pin);	break;
    314e:	8f e1       	ldi	r24, 0x1F	; 31
    3150:	0e 94 9e 0c 	call	0x193c	; 0x193c <M_Dio_Void_PinTog>
	default:										break;
	}
}
    3154:	0f 90       	pop	r0
    3156:	0f 90       	pop	r0
    3158:	0f 90       	pop	r0
    315a:	cf 91       	pop	r28
    315c:	df 91       	pop	r29
    315e:	08 95       	ret

00003160 <H_LCD_Void_LCDInit>:

#include"LCD.h"


void H_LCD_Void_LCDInit(void)
{
    3160:	df 93       	push	r29
    3162:	cf 93       	push	r28
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
    3168:	6c 97       	sbiw	r28, 0x1c	; 28
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(1000);
	H_LCD_Void_LCDWriteCommand(_8_BIT_MODE_COMMAND);

#elif LCD_MODE == _4_BIT_MODE

	M_Dio_Void_PinMode(LCD_DATA4_PIN,OUTPUT);
    3174:	8d e0       	ldi	r24, 0x0D	; 13
    3176:	61 e0       	ldi	r22, 0x01	; 1
    3178:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_DATA5_PIN,OUTPUT);
    317c:	8e e0       	ldi	r24, 0x0E	; 14
    317e:	61 e0       	ldi	r22, 0x01	; 1
    3180:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_DATA6_PIN,OUTPUT);
    3184:	8f e0       	ldi	r24, 0x0F	; 15
    3186:	61 e0       	ldi	r22, 0x01	; 1
    3188:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_DATA7_PIN,OUTPUT);
    318c:	80 e1       	ldi	r24, 0x10	; 16
    318e:	61 e0       	ldi	r22, 0x01	; 1
    3190:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_EN_PIN,OUTPUT);
    3194:	8c e0       	ldi	r24, 0x0C	; 12
    3196:	61 e0       	ldi	r22, 0x01	; 1
    3198:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(LCD_RS_PIN,OUTPUT);
    319c:	8b e0       	ldi	r24, 0x0B	; 11
    319e:	61 e0       	ldi	r22, 0x01	; 1
    31a0:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	aa e7       	ldi	r26, 0x7A	; 122
    31aa:	b4 e4       	ldi	r27, 0x44	; 68
    31ac:	89 8f       	std	Y+25, r24	; 0x19
    31ae:	9a 8f       	std	Y+26, r25	; 0x1a
    31b0:	ab 8f       	std	Y+27, r26	; 0x1b
    31b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b4:	69 8d       	ldd	r22, Y+25	; 0x19
    31b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	4a e7       	ldi	r20, 0x7A	; 122
    31c2:	55 e4       	ldi	r21, 0x45	; 69
    31c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	8d 8b       	std	Y+21, r24	; 0x15
    31ce:	9e 8b       	std	Y+22, r25	; 0x16
    31d0:	af 8b       	std	Y+23, r26	; 0x17
    31d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31d4:	6d 89       	ldd	r22, Y+21	; 0x15
    31d6:	7e 89       	ldd	r23, Y+22	; 0x16
    31d8:	8f 89       	ldd	r24, Y+23	; 0x17
    31da:	98 8d       	ldd	r25, Y+24	; 0x18
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	40 e8       	ldi	r20, 0x80	; 128
    31e2:	5f e3       	ldi	r21, 0x3F	; 63
    31e4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    31e8:	88 23       	and	r24, r24
    31ea:	2c f4       	brge	.+10     	; 0x31f6 <H_LCD_Void_LCDInit+0x96>
		__ticks = 1;
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	9c 8b       	std	Y+20, r25	; 0x14
    31f2:	8b 8b       	std	Y+19, r24	; 0x13
    31f4:	3f c0       	rjmp	.+126    	; 0x3274 <H_LCD_Void_LCDInit+0x114>
	else if (__tmp > 65535)
    31f6:	6d 89       	ldd	r22, Y+21	; 0x15
    31f8:	7e 89       	ldd	r23, Y+22	; 0x16
    31fa:	8f 89       	ldd	r24, Y+23	; 0x17
    31fc:	98 8d       	ldd	r25, Y+24	; 0x18
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	3f ef       	ldi	r19, 0xFF	; 255
    3202:	4f e7       	ldi	r20, 0x7F	; 127
    3204:	57 e4       	ldi	r21, 0x47	; 71
    3206:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    320a:	18 16       	cp	r1, r24
    320c:	4c f5       	brge	.+82     	; 0x3260 <H_LCD_Void_LCDInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    320e:	69 8d       	ldd	r22, Y+25	; 0x19
    3210:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3212:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3214:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	40 e2       	ldi	r20, 0x20	; 32
    321c:	51 e4       	ldi	r21, 0x41	; 65
    321e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	9c 8b       	std	Y+20, r25	; 0x14
    3234:	8b 8b       	std	Y+19, r24	; 0x13
    3236:	0f c0       	rjmp	.+30     	; 0x3256 <H_LCD_Void_LCDInit+0xf6>
    3238:	80 e9       	ldi	r24, 0x90	; 144
    323a:	91 e0       	ldi	r25, 0x01	; 1
    323c:	9a 8b       	std	Y+18, r25	; 0x12
    323e:	89 8b       	std	Y+17, r24	; 0x11
    3240:	89 89       	ldd	r24, Y+17	; 0x11
    3242:	9a 89       	ldd	r25, Y+18	; 0x12
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	f1 f7       	brne	.-4      	; 0x3244 <H_LCD_Void_LCDInit+0xe4>
    3248:	9a 8b       	std	Y+18, r25	; 0x12
    324a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324c:	8b 89       	ldd	r24, Y+19	; 0x13
    324e:	9c 89       	ldd	r25, Y+20	; 0x14
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	9c 8b       	std	Y+20, r25	; 0x14
    3254:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3256:	8b 89       	ldd	r24, Y+19	; 0x13
    3258:	9c 89       	ldd	r25, Y+20	; 0x14
    325a:	00 97       	sbiw	r24, 0x00	; 0
    325c:	69 f7       	brne	.-38     	; 0x3238 <H_LCD_Void_LCDInit+0xd8>
    325e:	14 c0       	rjmp	.+40     	; 0x3288 <H_LCD_Void_LCDInit+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3260:	6d 89       	ldd	r22, Y+21	; 0x15
    3262:	7e 89       	ldd	r23, Y+22	; 0x16
    3264:	8f 89       	ldd	r24, Y+23	; 0x17
    3266:	98 8d       	ldd	r25, Y+24	; 0x18
    3268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	9c 8b       	std	Y+20, r25	; 0x14
    3272:	8b 8b       	std	Y+19, r24	; 0x13
    3274:	8b 89       	ldd	r24, Y+19	; 0x13
    3276:	9c 89       	ldd	r25, Y+20	; 0x14
    3278:	98 8b       	std	Y+16, r25	; 0x10
    327a:	8f 87       	std	Y+15, r24	; 0x0f
    327c:	8f 85       	ldd	r24, Y+15	; 0x0f
    327e:	98 89       	ldd	r25, Y+16	; 0x10
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <H_LCD_Void_LCDInit+0x120>
    3284:	98 8b       	std	Y+16, r25	; 0x10
    3286:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	H_LCD_Void_LCDWriteCommand(_4_BIT_MODE_COMMAND_1);
    3288:	83 e3       	ldi	r24, 0x33	; 51
    328a:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_BIT_MODE_COMMAND_2);
    328e:	82 e3       	ldi	r24, 0x32	; 50
    3290:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_BIT_MODE_COMMAND_3);
    3294:	88 e2       	ldi	r24, 0x28	; 40
    3296:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <H_LCD_Void_LCDWriteCommand>
#endif
	H_LCD_Void_LCDWriteCommand(DISPLAY_ON_CURSOR_OFF);
    329a:	8c e0       	ldi	r24, 0x0C	; 12
    329c:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
    32a0:	82 e0       	ldi	r24, 0x02	; 2
    32a2:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR_SCREEN);
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <H_LCD_Void_LCDWriteCommand>
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	a0 ea       	ldi	r26, 0xA0	; 160
    32b2:	b0 e4       	ldi	r27, 0x40	; 64
    32b4:	8b 87       	std	Y+11, r24	; 0x0b
    32b6:	9c 87       	std	Y+12, r25	; 0x0c
    32b8:	ad 87       	std	Y+13, r26	; 0x0d
    32ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    32be:	7c 85       	ldd	r23, Y+12	; 0x0c
    32c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	4a e7       	ldi	r20, 0x7A	; 122
    32ca:	55 e4       	ldi	r21, 0x45	; 69
    32cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	8f 83       	std	Y+7, r24	; 0x07
    32d6:	98 87       	std	Y+8, r25	; 0x08
    32d8:	a9 87       	std	Y+9, r26	; 0x09
    32da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32dc:	6f 81       	ldd	r22, Y+7	; 0x07
    32de:	78 85       	ldd	r23, Y+8	; 0x08
    32e0:	89 85       	ldd	r24, Y+9	; 0x09
    32e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	40 e8       	ldi	r20, 0x80	; 128
    32ea:	5f e3       	ldi	r21, 0x3F	; 63
    32ec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    32f0:	88 23       	and	r24, r24
    32f2:	2c f4       	brge	.+10     	; 0x32fe <H_LCD_Void_LCDInit+0x19e>
		__ticks = 1;
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	9e 83       	std	Y+6, r25	; 0x06
    32fa:	8d 83       	std	Y+5, r24	; 0x05
    32fc:	3f c0       	rjmp	.+126    	; 0x337c <H_LCD_Void_LCDInit+0x21c>
	else if (__tmp > 65535)
    32fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3300:	78 85       	ldd	r23, Y+8	; 0x08
    3302:	89 85       	ldd	r24, Y+9	; 0x09
    3304:	9a 85       	ldd	r25, Y+10	; 0x0a
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	3f ef       	ldi	r19, 0xFF	; 255
    330a:	4f e7       	ldi	r20, 0x7F	; 127
    330c:	57 e4       	ldi	r21, 0x47	; 71
    330e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3312:	18 16       	cp	r1, r24
    3314:	4c f5       	brge	.+82     	; 0x3368 <H_LCD_Void_LCDInit+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3316:	6b 85       	ldd	r22, Y+11	; 0x0b
    3318:	7c 85       	ldd	r23, Y+12	; 0x0c
    331a:	8d 85       	ldd	r24, Y+13	; 0x0d
    331c:	9e 85       	ldd	r25, Y+14	; 0x0e
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	40 e2       	ldi	r20, 0x20	; 32
    3324:	51 e4       	ldi	r21, 0x41	; 65
    3326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	bc 01       	movw	r22, r24
    3330:	cd 01       	movw	r24, r26
    3332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	9e 83       	std	Y+6, r25	; 0x06
    333c:	8d 83       	std	Y+5, r24	; 0x05
    333e:	0f c0       	rjmp	.+30     	; 0x335e <H_LCD_Void_LCDInit+0x1fe>
    3340:	80 e9       	ldi	r24, 0x90	; 144
    3342:	91 e0       	ldi	r25, 0x01	; 1
    3344:	9c 83       	std	Y+4, r25	; 0x04
    3346:	8b 83       	std	Y+3, r24	; 0x03
    3348:	8b 81       	ldd	r24, Y+3	; 0x03
    334a:	9c 81       	ldd	r25, Y+4	; 0x04
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	f1 f7       	brne	.-4      	; 0x334c <H_LCD_Void_LCDInit+0x1ec>
    3350:	9c 83       	std	Y+4, r25	; 0x04
    3352:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3354:	8d 81       	ldd	r24, Y+5	; 0x05
    3356:	9e 81       	ldd	r25, Y+6	; 0x06
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	9e 83       	std	Y+6, r25	; 0x06
    335c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    335e:	8d 81       	ldd	r24, Y+5	; 0x05
    3360:	9e 81       	ldd	r25, Y+6	; 0x06
    3362:	00 97       	sbiw	r24, 0x00	; 0
    3364:	69 f7       	brne	.-38     	; 0x3340 <H_LCD_Void_LCDInit+0x1e0>
    3366:	14 c0       	rjmp	.+40     	; 0x3390 <H_LCD_Void_LCDInit+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3368:	6f 81       	ldd	r22, Y+7	; 0x07
    336a:	78 85       	ldd	r23, Y+8	; 0x08
    336c:	89 85       	ldd	r24, Y+9	; 0x09
    336e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	9e 83       	std	Y+6, r25	; 0x06
    337a:	8d 83       	std	Y+5, r24	; 0x05
    337c:	8d 81       	ldd	r24, Y+5	; 0x05
    337e:	9e 81       	ldd	r25, Y+6	; 0x06
    3380:	9a 83       	std	Y+2, r25	; 0x02
    3382:	89 83       	std	Y+1, r24	; 0x01
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	9a 81       	ldd	r25, Y+2	; 0x02
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	f1 f7       	brne	.-4      	; 0x3388 <H_LCD_Void_LCDInit+0x228>
    338c:	9a 83       	std	Y+2, r25	; 0x02
    338e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    3390:	6c 96       	adiw	r28, 0x1c	; 28
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	f8 94       	cli
    3396:	de bf       	out	0x3e, r29	; 62
    3398:	0f be       	out	0x3f, r0	; 63
    339a:	cd bf       	out	0x3d, r28	; 61
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <H_LCD_Void_LCDWriteCharacter>:
void H_LCD_Void_LCDWriteCharacter(u8 Local_u8_Character)
{
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
    33aa:	e9 97       	sbiw	r28, 0x39	; 57
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);

#elif LCD_MODE == _4_BIT_MODE

	M_Dio_Void_PinWrite(LCD_RS_PIN,HIGH);
    33b8:	8b e0       	ldi	r24, 0x0B	; 11
    33ba:	61 e0       	ldi	r22, 0x01	; 1
    33bc:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
	LCD_DATA_PORT = ((Local_u8_Character >> 1) & 0b01111000 ) | (LCD_DATA_PORT & 0b10000111);
    33c0:	ab e3       	ldi	r26, 0x3B	; 59
    33c2:	b0 e0       	ldi	r27, 0x00	; 0
    33c4:	89 ad       	ldd	r24, Y+57	; 0x39
    33c6:	86 95       	lsr	r24
    33c8:	98 2f       	mov	r25, r24
    33ca:	98 77       	andi	r25, 0x78	; 120
    33cc:	eb e3       	ldi	r30, 0x3B	; 59
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	80 81       	ld	r24, Z
    33d2:	87 78       	andi	r24, 0x87	; 135
    33d4:	89 2b       	or	r24, r25
    33d6:	8c 93       	st	X, r24
	M_Dio_Void_PinWrite(LCD_EN_PIN,HIGH);
    33d8:	8c e0       	ldi	r24, 0x0C	; 12
    33da:	61 e0       	ldi	r22, 0x01	; 1
    33dc:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	a0 e8       	ldi	r26, 0x80	; 128
    33e6:	bf e3       	ldi	r27, 0x3F	; 63
    33e8:	8d ab       	std	Y+53, r24	; 0x35
    33ea:	9e ab       	std	Y+54, r25	; 0x36
    33ec:	af ab       	std	Y+55, r26	; 0x37
    33ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f0:	6d a9       	ldd	r22, Y+53	; 0x35
    33f2:	7e a9       	ldd	r23, Y+54	; 0x36
    33f4:	8f a9       	ldd	r24, Y+55	; 0x37
    33f6:	98 ad       	ldd	r25, Y+56	; 0x38
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	4a e7       	ldi	r20, 0x7A	; 122
    33fe:	55 e4       	ldi	r21, 0x45	; 69
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	89 ab       	std	Y+49, r24	; 0x31
    340a:	9a ab       	std	Y+50, r25	; 0x32
    340c:	ab ab       	std	Y+51, r26	; 0x33
    340e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3410:	69 a9       	ldd	r22, Y+49	; 0x31
    3412:	7a a9       	ldd	r23, Y+50	; 0x32
    3414:	8b a9       	ldd	r24, Y+51	; 0x33
    3416:	9c a9       	ldd	r25, Y+52	; 0x34
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	40 e8       	ldi	r20, 0x80	; 128
    341e:	5f e3       	ldi	r21, 0x3F	; 63
    3420:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3424:	88 23       	and	r24, r24
    3426:	2c f4       	brge	.+10     	; 0x3432 <H_LCD_Void_LCDWriteCharacter+0x90>
		__ticks = 1;
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	98 ab       	std	Y+48, r25	; 0x30
    342e:	8f a7       	std	Y+47, r24	; 0x2f
    3430:	3f c0       	rjmp	.+126    	; 0x34b0 <H_LCD_Void_LCDWriteCharacter+0x10e>
	else if (__tmp > 65535)
    3432:	69 a9       	ldd	r22, Y+49	; 0x31
    3434:	7a a9       	ldd	r23, Y+50	; 0x32
    3436:	8b a9       	ldd	r24, Y+51	; 0x33
    3438:	9c a9       	ldd	r25, Y+52	; 0x34
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	3f ef       	ldi	r19, 0xFF	; 255
    343e:	4f e7       	ldi	r20, 0x7F	; 127
    3440:	57 e4       	ldi	r21, 0x47	; 71
    3442:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3446:	18 16       	cp	r1, r24
    3448:	4c f5       	brge	.+82     	; 0x349c <H_LCD_Void_LCDWriteCharacter+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    344a:	6d a9       	ldd	r22, Y+53	; 0x35
    344c:	7e a9       	ldd	r23, Y+54	; 0x36
    344e:	8f a9       	ldd	r24, Y+55	; 0x37
    3450:	98 ad       	ldd	r25, Y+56	; 0x38
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	40 e2       	ldi	r20, 0x20	; 32
    3458:	51 e4       	ldi	r21, 0x41	; 65
    345a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	bc 01       	movw	r22, r24
    3464:	cd 01       	movw	r24, r26
    3466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	98 ab       	std	Y+48, r25	; 0x30
    3470:	8f a7       	std	Y+47, r24	; 0x2f
    3472:	0f c0       	rjmp	.+30     	; 0x3492 <H_LCD_Void_LCDWriteCharacter+0xf0>
    3474:	80 e9       	ldi	r24, 0x90	; 144
    3476:	91 e0       	ldi	r25, 0x01	; 1
    3478:	9e a7       	std	Y+46, r25	; 0x2e
    347a:	8d a7       	std	Y+45, r24	; 0x2d
    347c:	8d a5       	ldd	r24, Y+45	; 0x2d
    347e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	f1 f7       	brne	.-4      	; 0x3480 <H_LCD_Void_LCDWriteCharacter+0xde>
    3484:	9e a7       	std	Y+46, r25	; 0x2e
    3486:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3488:	8f a5       	ldd	r24, Y+47	; 0x2f
    348a:	98 a9       	ldd	r25, Y+48	; 0x30
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	98 ab       	std	Y+48, r25	; 0x30
    3490:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3492:	8f a5       	ldd	r24, Y+47	; 0x2f
    3494:	98 a9       	ldd	r25, Y+48	; 0x30
    3496:	00 97       	sbiw	r24, 0x00	; 0
    3498:	69 f7       	brne	.-38     	; 0x3474 <H_LCD_Void_LCDWriteCharacter+0xd2>
    349a:	14 c0       	rjmp	.+40     	; 0x34c4 <H_LCD_Void_LCDWriteCharacter+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    349c:	69 a9       	ldd	r22, Y+49	; 0x31
    349e:	7a a9       	ldd	r23, Y+50	; 0x32
    34a0:	8b a9       	ldd	r24, Y+51	; 0x33
    34a2:	9c a9       	ldd	r25, Y+52	; 0x34
    34a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	98 ab       	std	Y+48, r25	; 0x30
    34ae:	8f a7       	std	Y+47, r24	; 0x2f
    34b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    34b2:	98 a9       	ldd	r25, Y+48	; 0x30
    34b4:	9c a7       	std	Y+44, r25	; 0x2c
    34b6:	8b a7       	std	Y+43, r24	; 0x2b
    34b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    34ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	f1 f7       	brne	.-4      	; 0x34bc <H_LCD_Void_LCDWriteCharacter+0x11a>
    34c0:	9c a7       	std	Y+44, r25	; 0x2c
    34c2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);
    34c4:	8c e0       	ldi	r24, 0x0C	; 12
    34c6:	60 e0       	ldi	r22, 0x00	; 0
    34c8:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	a0 e8       	ldi	r26, 0x80	; 128
    34d2:	bf e3       	ldi	r27, 0x3F	; 63
    34d4:	8f a3       	std	Y+39, r24	; 0x27
    34d6:	98 a7       	std	Y+40, r25	; 0x28
    34d8:	a9 a7       	std	Y+41, r26	; 0x29
    34da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34dc:	6f a1       	ldd	r22, Y+39	; 0x27
    34de:	78 a5       	ldd	r23, Y+40	; 0x28
    34e0:	89 a5       	ldd	r24, Y+41	; 0x29
    34e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	4a e7       	ldi	r20, 0x7A	; 122
    34ea:	55 e4       	ldi	r21, 0x45	; 69
    34ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	8b a3       	std	Y+35, r24	; 0x23
    34f6:	9c a3       	std	Y+36, r25	; 0x24
    34f8:	ad a3       	std	Y+37, r26	; 0x25
    34fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34fc:	6b a1       	ldd	r22, Y+35	; 0x23
    34fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3500:	8d a1       	ldd	r24, Y+37	; 0x25
    3502:	9e a1       	ldd	r25, Y+38	; 0x26
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e8       	ldi	r20, 0x80	; 128
    350a:	5f e3       	ldi	r21, 0x3F	; 63
    350c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3510:	88 23       	and	r24, r24
    3512:	2c f4       	brge	.+10     	; 0x351e <H_LCD_Void_LCDWriteCharacter+0x17c>
		__ticks = 1;
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	9a a3       	std	Y+34, r25	; 0x22
    351a:	89 a3       	std	Y+33, r24	; 0x21
    351c:	3f c0       	rjmp	.+126    	; 0x359c <H_LCD_Void_LCDWriteCharacter+0x1fa>
	else if (__tmp > 65535)
    351e:	6b a1       	ldd	r22, Y+35	; 0x23
    3520:	7c a1       	ldd	r23, Y+36	; 0x24
    3522:	8d a1       	ldd	r24, Y+37	; 0x25
    3524:	9e a1       	ldd	r25, Y+38	; 0x26
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	3f ef       	ldi	r19, 0xFF	; 255
    352a:	4f e7       	ldi	r20, 0x7F	; 127
    352c:	57 e4       	ldi	r21, 0x47	; 71
    352e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3532:	18 16       	cp	r1, r24
    3534:	4c f5       	brge	.+82     	; 0x3588 <H_LCD_Void_LCDWriteCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3536:	6f a1       	ldd	r22, Y+39	; 0x27
    3538:	78 a5       	ldd	r23, Y+40	; 0x28
    353a:	89 a5       	ldd	r24, Y+41	; 0x29
    353c:	9a a5       	ldd	r25, Y+42	; 0x2a
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e2       	ldi	r20, 0x20	; 32
    3544:	51 e4       	ldi	r21, 0x41	; 65
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	bc 01       	movw	r22, r24
    3550:	cd 01       	movw	r24, r26
    3552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	9a a3       	std	Y+34, r25	; 0x22
    355c:	89 a3       	std	Y+33, r24	; 0x21
    355e:	0f c0       	rjmp	.+30     	; 0x357e <H_LCD_Void_LCDWriteCharacter+0x1dc>
    3560:	80 e9       	ldi	r24, 0x90	; 144
    3562:	91 e0       	ldi	r25, 0x01	; 1
    3564:	98 a3       	std	Y+32, r25	; 0x20
    3566:	8f 8f       	std	Y+31, r24	; 0x1f
    3568:	8f 8d       	ldd	r24, Y+31	; 0x1f
    356a:	98 a1       	ldd	r25, Y+32	; 0x20
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	f1 f7       	brne	.-4      	; 0x356c <H_LCD_Void_LCDWriteCharacter+0x1ca>
    3570:	98 a3       	std	Y+32, r25	; 0x20
    3572:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3574:	89 a1       	ldd	r24, Y+33	; 0x21
    3576:	9a a1       	ldd	r25, Y+34	; 0x22
    3578:	01 97       	sbiw	r24, 0x01	; 1
    357a:	9a a3       	std	Y+34, r25	; 0x22
    357c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357e:	89 a1       	ldd	r24, Y+33	; 0x21
    3580:	9a a1       	ldd	r25, Y+34	; 0x22
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	69 f7       	brne	.-38     	; 0x3560 <H_LCD_Void_LCDWriteCharacter+0x1be>
    3586:	14 c0       	rjmp	.+40     	; 0x35b0 <H_LCD_Void_LCDWriteCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3588:	6b a1       	ldd	r22, Y+35	; 0x23
    358a:	7c a1       	ldd	r23, Y+36	; 0x24
    358c:	8d a1       	ldd	r24, Y+37	; 0x25
    358e:	9e a1       	ldd	r25, Y+38	; 0x26
    3590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	9a a3       	std	Y+34, r25	; 0x22
    359a:	89 a3       	std	Y+33, r24	; 0x21
    359c:	89 a1       	ldd	r24, Y+33	; 0x21
    359e:	9a a1       	ldd	r25, Y+34	; 0x22
    35a0:	9e 8f       	std	Y+30, r25	; 0x1e
    35a2:	8d 8f       	std	Y+29, r24	; 0x1d
    35a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <H_LCD_Void_LCDWriteCharacter+0x206>
    35ac:	9e 8f       	std	Y+30, r25	; 0x1e
    35ae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = ((Local_u8_Character << 3) & 0b01111000 ) | (LCD_DATA_PORT & 0b10000111);
    35b0:	ab e3       	ldi	r26, 0x3B	; 59
    35b2:	b0 e0       	ldi	r27, 0x00	; 0
    35b4:	89 ad       	ldd	r24, Y+57	; 0x39
    35b6:	88 2f       	mov	r24, r24
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	88 0f       	add	r24, r24
    35bc:	99 1f       	adc	r25, r25
    35be:	88 0f       	add	r24, r24
    35c0:	99 1f       	adc	r25, r25
    35c2:	88 0f       	add	r24, r24
    35c4:	99 1f       	adc	r25, r25
    35c6:	98 2f       	mov	r25, r24
    35c8:	98 77       	andi	r25, 0x78	; 120
    35ca:	eb e3       	ldi	r30, 0x3B	; 59
    35cc:	f0 e0       	ldi	r31, 0x00	; 0
    35ce:	80 81       	ld	r24, Z
    35d0:	87 78       	andi	r24, 0x87	; 135
    35d2:	89 2b       	or	r24, r25
    35d4:	8c 93       	st	X, r24
	M_Dio_Void_PinWrite(LCD_EN_PIN,HIGH);
    35d6:	8c e0       	ldi	r24, 0x0C	; 12
    35d8:	61 e0       	ldi	r22, 0x01	; 1
    35da:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	a0 e8       	ldi	r26, 0x80	; 128
    35e4:	bf e3       	ldi	r27, 0x3F	; 63
    35e6:	89 8f       	std	Y+25, r24	; 0x19
    35e8:	9a 8f       	std	Y+26, r25	; 0x1a
    35ea:	ab 8f       	std	Y+27, r26	; 0x1b
    35ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ee:	69 8d       	ldd	r22, Y+25	; 0x19
    35f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35f6:	20 e0       	ldi	r18, 0x00	; 0
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	4a e7       	ldi	r20, 0x7A	; 122
    35fc:	55 e4       	ldi	r21, 0x45	; 69
    35fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	8d 8b       	std	Y+21, r24	; 0x15
    3608:	9e 8b       	std	Y+22, r25	; 0x16
    360a:	af 8b       	std	Y+23, r26	; 0x17
    360c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    360e:	6d 89       	ldd	r22, Y+21	; 0x15
    3610:	7e 89       	ldd	r23, Y+22	; 0x16
    3612:	8f 89       	ldd	r24, Y+23	; 0x17
    3614:	98 8d       	ldd	r25, Y+24	; 0x18
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	40 e8       	ldi	r20, 0x80	; 128
    361c:	5f e3       	ldi	r21, 0x3F	; 63
    361e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3622:	88 23       	and	r24, r24
    3624:	2c f4       	brge	.+10     	; 0x3630 <H_LCD_Void_LCDWriteCharacter+0x28e>
		__ticks = 1;
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	9c 8b       	std	Y+20, r25	; 0x14
    362c:	8b 8b       	std	Y+19, r24	; 0x13
    362e:	3f c0       	rjmp	.+126    	; 0x36ae <H_LCD_Void_LCDWriteCharacter+0x30c>
	else if (__tmp > 65535)
    3630:	6d 89       	ldd	r22, Y+21	; 0x15
    3632:	7e 89       	ldd	r23, Y+22	; 0x16
    3634:	8f 89       	ldd	r24, Y+23	; 0x17
    3636:	98 8d       	ldd	r25, Y+24	; 0x18
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	3f ef       	ldi	r19, 0xFF	; 255
    363c:	4f e7       	ldi	r20, 0x7F	; 127
    363e:	57 e4       	ldi	r21, 0x47	; 71
    3640:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3644:	18 16       	cp	r1, r24
    3646:	4c f5       	brge	.+82     	; 0x369a <H_LCD_Void_LCDWriteCharacter+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3648:	69 8d       	ldd	r22, Y+25	; 0x19
    364a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    364c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    364e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	40 e2       	ldi	r20, 0x20	; 32
    3656:	51 e4       	ldi	r21, 0x41	; 65
    3658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	bc 01       	movw	r22, r24
    3662:	cd 01       	movw	r24, r26
    3664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	9c 8b       	std	Y+20, r25	; 0x14
    366e:	8b 8b       	std	Y+19, r24	; 0x13
    3670:	0f c0       	rjmp	.+30     	; 0x3690 <H_LCD_Void_LCDWriteCharacter+0x2ee>
    3672:	80 e9       	ldi	r24, 0x90	; 144
    3674:	91 e0       	ldi	r25, 0x01	; 1
    3676:	9a 8b       	std	Y+18, r25	; 0x12
    3678:	89 8b       	std	Y+17, r24	; 0x11
    367a:	89 89       	ldd	r24, Y+17	; 0x11
    367c:	9a 89       	ldd	r25, Y+18	; 0x12
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	f1 f7       	brne	.-4      	; 0x367e <H_LCD_Void_LCDWriteCharacter+0x2dc>
    3682:	9a 8b       	std	Y+18, r25	; 0x12
    3684:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3686:	8b 89       	ldd	r24, Y+19	; 0x13
    3688:	9c 89       	ldd	r25, Y+20	; 0x14
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	9c 8b       	std	Y+20, r25	; 0x14
    368e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3690:	8b 89       	ldd	r24, Y+19	; 0x13
    3692:	9c 89       	ldd	r25, Y+20	; 0x14
    3694:	00 97       	sbiw	r24, 0x00	; 0
    3696:	69 f7       	brne	.-38     	; 0x3672 <H_LCD_Void_LCDWriteCharacter+0x2d0>
    3698:	14 c0       	rjmp	.+40     	; 0x36c2 <H_LCD_Void_LCDWriteCharacter+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369a:	6d 89       	ldd	r22, Y+21	; 0x15
    369c:	7e 89       	ldd	r23, Y+22	; 0x16
    369e:	8f 89       	ldd	r24, Y+23	; 0x17
    36a0:	98 8d       	ldd	r25, Y+24	; 0x18
    36a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	9c 8b       	std	Y+20, r25	; 0x14
    36ac:	8b 8b       	std	Y+19, r24	; 0x13
    36ae:	8b 89       	ldd	r24, Y+19	; 0x13
    36b0:	9c 89       	ldd	r25, Y+20	; 0x14
    36b2:	98 8b       	std	Y+16, r25	; 0x10
    36b4:	8f 87       	std	Y+15, r24	; 0x0f
    36b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36b8:	98 89       	ldd	r25, Y+16	; 0x10
    36ba:	01 97       	sbiw	r24, 0x01	; 1
    36bc:	f1 f7       	brne	.-4      	; 0x36ba <H_LCD_Void_LCDWriteCharacter+0x318>
    36be:	98 8b       	std	Y+16, r25	; 0x10
    36c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);
    36c2:	8c e0       	ldi	r24, 0x0C	; 12
    36c4:	60 e0       	ldi	r22, 0x00	; 0
    36c6:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	a0 ea       	ldi	r26, 0xA0	; 160
    36d0:	b0 e4       	ldi	r27, 0x40	; 64
    36d2:	8b 87       	std	Y+11, r24	; 0x0b
    36d4:	9c 87       	std	Y+12, r25	; 0x0c
    36d6:	ad 87       	std	Y+13, r26	; 0x0d
    36d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36da:	6b 85       	ldd	r22, Y+11	; 0x0b
    36dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    36de:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	4a e7       	ldi	r20, 0x7A	; 122
    36e8:	55 e4       	ldi	r21, 0x45	; 69
    36ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	8f 83       	std	Y+7, r24	; 0x07
    36f4:	98 87       	std	Y+8, r25	; 0x08
    36f6:	a9 87       	std	Y+9, r26	; 0x09
    36f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36fa:	6f 81       	ldd	r22, Y+7	; 0x07
    36fc:	78 85       	ldd	r23, Y+8	; 0x08
    36fe:	89 85       	ldd	r24, Y+9	; 0x09
    3700:	9a 85       	ldd	r25, Y+10	; 0x0a
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	40 e8       	ldi	r20, 0x80	; 128
    3708:	5f e3       	ldi	r21, 0x3F	; 63
    370a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    370e:	88 23       	and	r24, r24
    3710:	2c f4       	brge	.+10     	; 0x371c <H_LCD_Void_LCDWriteCharacter+0x37a>
		__ticks = 1;
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	9e 83       	std	Y+6, r25	; 0x06
    3718:	8d 83       	std	Y+5, r24	; 0x05
    371a:	3f c0       	rjmp	.+126    	; 0x379a <H_LCD_Void_LCDWriteCharacter+0x3f8>
	else if (__tmp > 65535)
    371c:	6f 81       	ldd	r22, Y+7	; 0x07
    371e:	78 85       	ldd	r23, Y+8	; 0x08
    3720:	89 85       	ldd	r24, Y+9	; 0x09
    3722:	9a 85       	ldd	r25, Y+10	; 0x0a
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	3f ef       	ldi	r19, 0xFF	; 255
    3728:	4f e7       	ldi	r20, 0x7F	; 127
    372a:	57 e4       	ldi	r21, 0x47	; 71
    372c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3730:	18 16       	cp	r1, r24
    3732:	4c f5       	brge	.+82     	; 0x3786 <H_LCD_Void_LCDWriteCharacter+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3734:	6b 85       	ldd	r22, Y+11	; 0x0b
    3736:	7c 85       	ldd	r23, Y+12	; 0x0c
    3738:	8d 85       	ldd	r24, Y+13	; 0x0d
    373a:	9e 85       	ldd	r25, Y+14	; 0x0e
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	40 e2       	ldi	r20, 0x20	; 32
    3742:	51 e4       	ldi	r21, 0x41	; 65
    3744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	bc 01       	movw	r22, r24
    374e:	cd 01       	movw	r24, r26
    3750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	9e 83       	std	Y+6, r25	; 0x06
    375a:	8d 83       	std	Y+5, r24	; 0x05
    375c:	0f c0       	rjmp	.+30     	; 0x377c <H_LCD_Void_LCDWriteCharacter+0x3da>
    375e:	80 e9       	ldi	r24, 0x90	; 144
    3760:	91 e0       	ldi	r25, 0x01	; 1
    3762:	9c 83       	std	Y+4, r25	; 0x04
    3764:	8b 83       	std	Y+3, r24	; 0x03
    3766:	8b 81       	ldd	r24, Y+3	; 0x03
    3768:	9c 81       	ldd	r25, Y+4	; 0x04
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	f1 f7       	brne	.-4      	; 0x376a <H_LCD_Void_LCDWriteCharacter+0x3c8>
    376e:	9c 83       	std	Y+4, r25	; 0x04
    3770:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3772:	8d 81       	ldd	r24, Y+5	; 0x05
    3774:	9e 81       	ldd	r25, Y+6	; 0x06
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	9e 83       	std	Y+6, r25	; 0x06
    377a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377c:	8d 81       	ldd	r24, Y+5	; 0x05
    377e:	9e 81       	ldd	r25, Y+6	; 0x06
    3780:	00 97       	sbiw	r24, 0x00	; 0
    3782:	69 f7       	brne	.-38     	; 0x375e <H_LCD_Void_LCDWriteCharacter+0x3bc>
    3784:	14 c0       	rjmp	.+40     	; 0x37ae <H_LCD_Void_LCDWriteCharacter+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3786:	6f 81       	ldd	r22, Y+7	; 0x07
    3788:	78 85       	ldd	r23, Y+8	; 0x08
    378a:	89 85       	ldd	r24, Y+9	; 0x09
    378c:	9a 85       	ldd	r25, Y+10	; 0x0a
    378e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	9e 83       	std	Y+6, r25	; 0x06
    3798:	8d 83       	std	Y+5, r24	; 0x05
    379a:	8d 81       	ldd	r24, Y+5	; 0x05
    379c:	9e 81       	ldd	r25, Y+6	; 0x06
    379e:	9a 83       	std	Y+2, r25	; 0x02
    37a0:	89 83       	std	Y+1, r24	; 0x01
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	9a 81       	ldd	r25, Y+2	; 0x02
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <H_LCD_Void_LCDWriteCharacter+0x404>
    37aa:	9a 83       	std	Y+2, r25	; 0x02
    37ac:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(5);
}
    37ae:	e9 96       	adiw	r28, 0x39	; 57
    37b0:	0f b6       	in	r0, 0x3f	; 63
    37b2:	f8 94       	cli
    37b4:	de bf       	out	0x3e, r29	; 62
    37b6:	0f be       	out	0x3f, r0	; 63
    37b8:	cd bf       	out	0x3d, r28	; 61
    37ba:	cf 91       	pop	r28
    37bc:	df 91       	pop	r29
    37be:	08 95       	ret

000037c0 <H_LCD_Void_LCDWriteCommand>:
void H_LCD_Void_LCDWriteCommand(u8 Local_u8_Command)
{
    37c0:	df 93       	push	r29
    37c2:	cf 93       	push	r28
    37c4:	cd b7       	in	r28, 0x3d	; 61
    37c6:	de b7       	in	r29, 0x3e	; 62
    37c8:	e9 97       	sbiw	r28, 0x39	; 57
    37ca:	0f b6       	in	r0, 0x3f	; 63
    37cc:	f8 94       	cli
    37ce:	de bf       	out	0x3e, r29	; 62
    37d0:	0f be       	out	0x3f, r0	; 63
    37d2:	cd bf       	out	0x3d, r28	; 61
    37d4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);

#elif LCD_MODE == _4_BIT_MODE

	M_Dio_Void_PinWrite(LCD_RS_PIN,LOW);
    37d6:	8b e0       	ldi	r24, 0x0B	; 11
    37d8:	60 e0       	ldi	r22, 0x00	; 0
    37da:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
	LCD_DATA_PORT = ((Local_u8_Command >> 1) & 0b01111000 ) | (LCD_DATA_PORT & 0b10000111);
    37de:	ab e3       	ldi	r26, 0x3B	; 59
    37e0:	b0 e0       	ldi	r27, 0x00	; 0
    37e2:	89 ad       	ldd	r24, Y+57	; 0x39
    37e4:	86 95       	lsr	r24
    37e6:	98 2f       	mov	r25, r24
    37e8:	98 77       	andi	r25, 0x78	; 120
    37ea:	eb e3       	ldi	r30, 0x3B	; 59
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	80 81       	ld	r24, Z
    37f0:	87 78       	andi	r24, 0x87	; 135
    37f2:	89 2b       	or	r24, r25
    37f4:	8c 93       	st	X, r24
	M_Dio_Void_PinWrite(LCD_EN_PIN,HIGH);
    37f6:	8c e0       	ldi	r24, 0x0C	; 12
    37f8:	61 e0       	ldi	r22, 0x01	; 1
    37fa:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    37fe:	80 e0       	ldi	r24, 0x00	; 0
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	a0 e8       	ldi	r26, 0x80	; 128
    3804:	bf e3       	ldi	r27, 0x3F	; 63
    3806:	8d ab       	std	Y+53, r24	; 0x35
    3808:	9e ab       	std	Y+54, r25	; 0x36
    380a:	af ab       	std	Y+55, r26	; 0x37
    380c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    380e:	6d a9       	ldd	r22, Y+53	; 0x35
    3810:	7e a9       	ldd	r23, Y+54	; 0x36
    3812:	8f a9       	ldd	r24, Y+55	; 0x37
    3814:	98 ad       	ldd	r25, Y+56	; 0x38
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	4a e7       	ldi	r20, 0x7A	; 122
    381c:	55 e4       	ldi	r21, 0x45	; 69
    381e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	89 ab       	std	Y+49, r24	; 0x31
    3828:	9a ab       	std	Y+50, r25	; 0x32
    382a:	ab ab       	std	Y+51, r26	; 0x33
    382c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    382e:	69 a9       	ldd	r22, Y+49	; 0x31
    3830:	7a a9       	ldd	r23, Y+50	; 0x32
    3832:	8b a9       	ldd	r24, Y+51	; 0x33
    3834:	9c a9       	ldd	r25, Y+52	; 0x34
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	40 e8       	ldi	r20, 0x80	; 128
    383c:	5f e3       	ldi	r21, 0x3F	; 63
    383e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3842:	88 23       	and	r24, r24
    3844:	2c f4       	brge	.+10     	; 0x3850 <H_LCD_Void_LCDWriteCommand+0x90>
		__ticks = 1;
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	98 ab       	std	Y+48, r25	; 0x30
    384c:	8f a7       	std	Y+47, r24	; 0x2f
    384e:	3f c0       	rjmp	.+126    	; 0x38ce <H_LCD_Void_LCDWriteCommand+0x10e>
	else if (__tmp > 65535)
    3850:	69 a9       	ldd	r22, Y+49	; 0x31
    3852:	7a a9       	ldd	r23, Y+50	; 0x32
    3854:	8b a9       	ldd	r24, Y+51	; 0x33
    3856:	9c a9       	ldd	r25, Y+52	; 0x34
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	3f ef       	ldi	r19, 0xFF	; 255
    385c:	4f e7       	ldi	r20, 0x7F	; 127
    385e:	57 e4       	ldi	r21, 0x47	; 71
    3860:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3864:	18 16       	cp	r1, r24
    3866:	4c f5       	brge	.+82     	; 0x38ba <H_LCD_Void_LCDWriteCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3868:	6d a9       	ldd	r22, Y+53	; 0x35
    386a:	7e a9       	ldd	r23, Y+54	; 0x36
    386c:	8f a9       	ldd	r24, Y+55	; 0x37
    386e:	98 ad       	ldd	r25, Y+56	; 0x38
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e2       	ldi	r20, 0x20	; 32
    3876:	51 e4       	ldi	r21, 0x41	; 65
    3878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	bc 01       	movw	r22, r24
    3882:	cd 01       	movw	r24, r26
    3884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	98 ab       	std	Y+48, r25	; 0x30
    388e:	8f a7       	std	Y+47, r24	; 0x2f
    3890:	0f c0       	rjmp	.+30     	; 0x38b0 <H_LCD_Void_LCDWriteCommand+0xf0>
    3892:	80 e9       	ldi	r24, 0x90	; 144
    3894:	91 e0       	ldi	r25, 0x01	; 1
    3896:	9e a7       	std	Y+46, r25	; 0x2e
    3898:	8d a7       	std	Y+45, r24	; 0x2d
    389a:	8d a5       	ldd	r24, Y+45	; 0x2d
    389c:	9e a5       	ldd	r25, Y+46	; 0x2e
    389e:	01 97       	sbiw	r24, 0x01	; 1
    38a0:	f1 f7       	brne	.-4      	; 0x389e <H_LCD_Void_LCDWriteCommand+0xde>
    38a2:	9e a7       	std	Y+46, r25	; 0x2e
    38a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38a8:	98 a9       	ldd	r25, Y+48	; 0x30
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	98 ab       	std	Y+48, r25	; 0x30
    38ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b2:	98 a9       	ldd	r25, Y+48	; 0x30
    38b4:	00 97       	sbiw	r24, 0x00	; 0
    38b6:	69 f7       	brne	.-38     	; 0x3892 <H_LCD_Void_LCDWriteCommand+0xd2>
    38b8:	14 c0       	rjmp	.+40     	; 0x38e2 <H_LCD_Void_LCDWriteCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ba:	69 a9       	ldd	r22, Y+49	; 0x31
    38bc:	7a a9       	ldd	r23, Y+50	; 0x32
    38be:	8b a9       	ldd	r24, Y+51	; 0x33
    38c0:	9c a9       	ldd	r25, Y+52	; 0x34
    38c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	98 ab       	std	Y+48, r25	; 0x30
    38cc:	8f a7       	std	Y+47, r24	; 0x2f
    38ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    38d0:	98 a9       	ldd	r25, Y+48	; 0x30
    38d2:	9c a7       	std	Y+44, r25	; 0x2c
    38d4:	8b a7       	std	Y+43, r24	; 0x2b
    38d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    38d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <H_LCD_Void_LCDWriteCommand+0x11a>
    38de:	9c a7       	std	Y+44, r25	; 0x2c
    38e0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);
    38e2:	8c e0       	ldi	r24, 0x0C	; 12
    38e4:	60 e0       	ldi	r22, 0x00	; 0
    38e6:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	a0 e8       	ldi	r26, 0x80	; 128
    38f0:	bf e3       	ldi	r27, 0x3F	; 63
    38f2:	8f a3       	std	Y+39, r24	; 0x27
    38f4:	98 a7       	std	Y+40, r25	; 0x28
    38f6:	a9 a7       	std	Y+41, r26	; 0x29
    38f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38fa:	6f a1       	ldd	r22, Y+39	; 0x27
    38fc:	78 a5       	ldd	r23, Y+40	; 0x28
    38fe:	89 a5       	ldd	r24, Y+41	; 0x29
    3900:	9a a5       	ldd	r25, Y+42	; 0x2a
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	4a e7       	ldi	r20, 0x7A	; 122
    3908:	55 e4       	ldi	r21, 0x45	; 69
    390a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	8b a3       	std	Y+35, r24	; 0x23
    3914:	9c a3       	std	Y+36, r25	; 0x24
    3916:	ad a3       	std	Y+37, r26	; 0x25
    3918:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    391a:	6b a1       	ldd	r22, Y+35	; 0x23
    391c:	7c a1       	ldd	r23, Y+36	; 0x24
    391e:	8d a1       	ldd	r24, Y+37	; 0x25
    3920:	9e a1       	ldd	r25, Y+38	; 0x26
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	40 e8       	ldi	r20, 0x80	; 128
    3928:	5f e3       	ldi	r21, 0x3F	; 63
    392a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    392e:	88 23       	and	r24, r24
    3930:	2c f4       	brge	.+10     	; 0x393c <H_LCD_Void_LCDWriteCommand+0x17c>
		__ticks = 1;
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	9a a3       	std	Y+34, r25	; 0x22
    3938:	89 a3       	std	Y+33, r24	; 0x21
    393a:	3f c0       	rjmp	.+126    	; 0x39ba <H_LCD_Void_LCDWriteCommand+0x1fa>
	else if (__tmp > 65535)
    393c:	6b a1       	ldd	r22, Y+35	; 0x23
    393e:	7c a1       	ldd	r23, Y+36	; 0x24
    3940:	8d a1       	ldd	r24, Y+37	; 0x25
    3942:	9e a1       	ldd	r25, Y+38	; 0x26
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	3f ef       	ldi	r19, 0xFF	; 255
    3948:	4f e7       	ldi	r20, 0x7F	; 127
    394a:	57 e4       	ldi	r21, 0x47	; 71
    394c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3950:	18 16       	cp	r1, r24
    3952:	4c f5       	brge	.+82     	; 0x39a6 <H_LCD_Void_LCDWriteCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3954:	6f a1       	ldd	r22, Y+39	; 0x27
    3956:	78 a5       	ldd	r23, Y+40	; 0x28
    3958:	89 a5       	ldd	r24, Y+41	; 0x29
    395a:	9a a5       	ldd	r25, Y+42	; 0x2a
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	40 e2       	ldi	r20, 0x20	; 32
    3962:	51 e4       	ldi	r21, 0x41	; 65
    3964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	bc 01       	movw	r22, r24
    396e:	cd 01       	movw	r24, r26
    3970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	9a a3       	std	Y+34, r25	; 0x22
    397a:	89 a3       	std	Y+33, r24	; 0x21
    397c:	0f c0       	rjmp	.+30     	; 0x399c <H_LCD_Void_LCDWriteCommand+0x1dc>
    397e:	80 e9       	ldi	r24, 0x90	; 144
    3980:	91 e0       	ldi	r25, 0x01	; 1
    3982:	98 a3       	std	Y+32, r25	; 0x20
    3984:	8f 8f       	std	Y+31, r24	; 0x1f
    3986:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3988:	98 a1       	ldd	r25, Y+32	; 0x20
    398a:	01 97       	sbiw	r24, 0x01	; 1
    398c:	f1 f7       	brne	.-4      	; 0x398a <H_LCD_Void_LCDWriteCommand+0x1ca>
    398e:	98 a3       	std	Y+32, r25	; 0x20
    3990:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3992:	89 a1       	ldd	r24, Y+33	; 0x21
    3994:	9a a1       	ldd	r25, Y+34	; 0x22
    3996:	01 97       	sbiw	r24, 0x01	; 1
    3998:	9a a3       	std	Y+34, r25	; 0x22
    399a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    399c:	89 a1       	ldd	r24, Y+33	; 0x21
    399e:	9a a1       	ldd	r25, Y+34	; 0x22
    39a0:	00 97       	sbiw	r24, 0x00	; 0
    39a2:	69 f7       	brne	.-38     	; 0x397e <H_LCD_Void_LCDWriteCommand+0x1be>
    39a4:	14 c0       	rjmp	.+40     	; 0x39ce <H_LCD_Void_LCDWriteCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a6:	6b a1       	ldd	r22, Y+35	; 0x23
    39a8:	7c a1       	ldd	r23, Y+36	; 0x24
    39aa:	8d a1       	ldd	r24, Y+37	; 0x25
    39ac:	9e a1       	ldd	r25, Y+38	; 0x26
    39ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	9a a3       	std	Y+34, r25	; 0x22
    39b8:	89 a3       	std	Y+33, r24	; 0x21
    39ba:	89 a1       	ldd	r24, Y+33	; 0x21
    39bc:	9a a1       	ldd	r25, Y+34	; 0x22
    39be:	9e 8f       	std	Y+30, r25	; 0x1e
    39c0:	8d 8f       	std	Y+29, r24	; 0x1d
    39c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39c6:	01 97       	sbiw	r24, 0x01	; 1
    39c8:	f1 f7       	brne	.-4      	; 0x39c6 <H_LCD_Void_LCDWriteCommand+0x206>
    39ca:	9e 8f       	std	Y+30, r25	; 0x1e
    39cc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = ((Local_u8_Command << 3) & 0b01111000 ) | (LCD_DATA_PORT & 0b10000111);
    39ce:	ab e3       	ldi	r26, 0x3B	; 59
    39d0:	b0 e0       	ldi	r27, 0x00	; 0
    39d2:	89 ad       	ldd	r24, Y+57	; 0x39
    39d4:	88 2f       	mov	r24, r24
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	88 0f       	add	r24, r24
    39da:	99 1f       	adc	r25, r25
    39dc:	88 0f       	add	r24, r24
    39de:	99 1f       	adc	r25, r25
    39e0:	88 0f       	add	r24, r24
    39e2:	99 1f       	adc	r25, r25
    39e4:	98 2f       	mov	r25, r24
    39e6:	98 77       	andi	r25, 0x78	; 120
    39e8:	eb e3       	ldi	r30, 0x3B	; 59
    39ea:	f0 e0       	ldi	r31, 0x00	; 0
    39ec:	80 81       	ld	r24, Z
    39ee:	87 78       	andi	r24, 0x87	; 135
    39f0:	89 2b       	or	r24, r25
    39f2:	8c 93       	st	X, r24
	M_Dio_Void_PinWrite(LCD_EN_PIN,HIGH);
    39f4:	8c e0       	ldi	r24, 0x0C	; 12
    39f6:	61 e0       	ldi	r22, 0x01	; 1
    39f8:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	a0 e8       	ldi	r26, 0x80	; 128
    3a02:	bf e3       	ldi	r27, 0x3F	; 63
    3a04:	89 8f       	std	Y+25, r24	; 0x19
    3a06:	9a 8f       	std	Y+26, r25	; 0x1a
    3a08:	ab 8f       	std	Y+27, r26	; 0x1b
    3a0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a0c:	69 8d       	ldd	r22, Y+25	; 0x19
    3a0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	4a e7       	ldi	r20, 0x7A	; 122
    3a1a:	55 e4       	ldi	r21, 0x45	; 69
    3a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	8d 8b       	std	Y+21, r24	; 0x15
    3a26:	9e 8b       	std	Y+22, r25	; 0x16
    3a28:	af 8b       	std	Y+23, r26	; 0x17
    3a2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a2c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a2e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a30:	8f 89       	ldd	r24, Y+23	; 0x17
    3a32:	98 8d       	ldd	r25, Y+24	; 0x18
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	40 e8       	ldi	r20, 0x80	; 128
    3a3a:	5f e3       	ldi	r21, 0x3F	; 63
    3a3c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a40:	88 23       	and	r24, r24
    3a42:	2c f4       	brge	.+10     	; 0x3a4e <H_LCD_Void_LCDWriteCommand+0x28e>
		__ticks = 1;
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	9c 8b       	std	Y+20, r25	; 0x14
    3a4a:	8b 8b       	std	Y+19, r24	; 0x13
    3a4c:	3f c0       	rjmp	.+126    	; 0x3acc <H_LCD_Void_LCDWriteCommand+0x30c>
	else if (__tmp > 65535)
    3a4e:	6d 89       	ldd	r22, Y+21	; 0x15
    3a50:	7e 89       	ldd	r23, Y+22	; 0x16
    3a52:	8f 89       	ldd	r24, Y+23	; 0x17
    3a54:	98 8d       	ldd	r25, Y+24	; 0x18
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	3f ef       	ldi	r19, 0xFF	; 255
    3a5a:	4f e7       	ldi	r20, 0x7F	; 127
    3a5c:	57 e4       	ldi	r21, 0x47	; 71
    3a5e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a62:	18 16       	cp	r1, r24
    3a64:	4c f5       	brge	.+82     	; 0x3ab8 <H_LCD_Void_LCDWriteCommand+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a66:	69 8d       	ldd	r22, Y+25	; 0x19
    3a68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a6e:	20 e0       	ldi	r18, 0x00	; 0
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	40 e2       	ldi	r20, 0x20	; 32
    3a74:	51 e4       	ldi	r21, 0x41	; 65
    3a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	cb 01       	movw	r24, r22
    3a7e:	bc 01       	movw	r22, r24
    3a80:	cd 01       	movw	r24, r26
    3a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	9c 8b       	std	Y+20, r25	; 0x14
    3a8c:	8b 8b       	std	Y+19, r24	; 0x13
    3a8e:	0f c0       	rjmp	.+30     	; 0x3aae <H_LCD_Void_LCDWriteCommand+0x2ee>
    3a90:	80 e9       	ldi	r24, 0x90	; 144
    3a92:	91 e0       	ldi	r25, 0x01	; 1
    3a94:	9a 8b       	std	Y+18, r25	; 0x12
    3a96:	89 8b       	std	Y+17, r24	; 0x11
    3a98:	89 89       	ldd	r24, Y+17	; 0x11
    3a9a:	9a 89       	ldd	r25, Y+18	; 0x12
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	f1 f7       	brne	.-4      	; 0x3a9c <H_LCD_Void_LCDWriteCommand+0x2dc>
    3aa0:	9a 8b       	std	Y+18, r25	; 0x12
    3aa2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    3aa6:	9c 89       	ldd	r25, Y+20	; 0x14
    3aa8:	01 97       	sbiw	r24, 0x01	; 1
    3aaa:	9c 8b       	std	Y+20, r25	; 0x14
    3aac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aae:	8b 89       	ldd	r24, Y+19	; 0x13
    3ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ab2:	00 97       	sbiw	r24, 0x00	; 0
    3ab4:	69 f7       	brne	.-38     	; 0x3a90 <H_LCD_Void_LCDWriteCommand+0x2d0>
    3ab6:	14 c0       	rjmp	.+40     	; 0x3ae0 <H_LCD_Void_LCDWriteCommand+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab8:	6d 89       	ldd	r22, Y+21	; 0x15
    3aba:	7e 89       	ldd	r23, Y+22	; 0x16
    3abc:	8f 89       	ldd	r24, Y+23	; 0x17
    3abe:	98 8d       	ldd	r25, Y+24	; 0x18
    3ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	9c 8b       	std	Y+20, r25	; 0x14
    3aca:	8b 8b       	std	Y+19, r24	; 0x13
    3acc:	8b 89       	ldd	r24, Y+19	; 0x13
    3ace:	9c 89       	ldd	r25, Y+20	; 0x14
    3ad0:	98 8b       	std	Y+16, r25	; 0x10
    3ad2:	8f 87       	std	Y+15, r24	; 0x0f
    3ad4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad6:	98 89       	ldd	r25, Y+16	; 0x10
    3ad8:	01 97       	sbiw	r24, 0x01	; 1
    3ada:	f1 f7       	brne	.-4      	; 0x3ad8 <H_LCD_Void_LCDWriteCommand+0x318>
    3adc:	98 8b       	std	Y+16, r25	; 0x10
    3ade:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_Void_PinWrite(LCD_EN_PIN,LOW);
    3ae0:	8c e0       	ldi	r24, 0x0C	; 12
    3ae2:	60 e0       	ldi	r22, 0x00	; 0
    3ae4:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	a0 ea       	ldi	r26, 0xA0	; 160
    3aee:	b0 e4       	ldi	r27, 0x40	; 64
    3af0:	8b 87       	std	Y+11, r24	; 0x0b
    3af2:	9c 87       	std	Y+12, r25	; 0x0c
    3af4:	ad 87       	std	Y+13, r26	; 0x0d
    3af6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	4a e7       	ldi	r20, 0x7A	; 122
    3b06:	55 e4       	ldi	r21, 0x45	; 69
    3b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	8f 83       	std	Y+7, r24	; 0x07
    3b12:	98 87       	std	Y+8, r25	; 0x08
    3b14:	a9 87       	std	Y+9, r26	; 0x09
    3b16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b18:	6f 81       	ldd	r22, Y+7	; 0x07
    3b1a:	78 85       	ldd	r23, Y+8	; 0x08
    3b1c:	89 85       	ldd	r24, Y+9	; 0x09
    3b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	40 e8       	ldi	r20, 0x80	; 128
    3b26:	5f e3       	ldi	r21, 0x3F	; 63
    3b28:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b2c:	88 23       	and	r24, r24
    3b2e:	2c f4       	brge	.+10     	; 0x3b3a <H_LCD_Void_LCDWriteCommand+0x37a>
		__ticks = 1;
    3b30:	81 e0       	ldi	r24, 0x01	; 1
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	9e 83       	std	Y+6, r25	; 0x06
    3b36:	8d 83       	std	Y+5, r24	; 0x05
    3b38:	3f c0       	rjmp	.+126    	; 0x3bb8 <H_LCD_Void_LCDWriteCommand+0x3f8>
	else if (__tmp > 65535)
    3b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b3c:	78 85       	ldd	r23, Y+8	; 0x08
    3b3e:	89 85       	ldd	r24, Y+9	; 0x09
    3b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b42:	20 e0       	ldi	r18, 0x00	; 0
    3b44:	3f ef       	ldi	r19, 0xFF	; 255
    3b46:	4f e7       	ldi	r20, 0x7F	; 127
    3b48:	57 e4       	ldi	r21, 0x47	; 71
    3b4a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b4e:	18 16       	cp	r1, r24
    3b50:	4c f5       	brge	.+82     	; 0x3ba4 <H_LCD_Void_LCDWriteCommand+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b52:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b54:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b5a:	20 e0       	ldi	r18, 0x00	; 0
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	40 e2       	ldi	r20, 0x20	; 32
    3b60:	51 e4       	ldi	r21, 0x41	; 65
    3b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b66:	dc 01       	movw	r26, r24
    3b68:	cb 01       	movw	r24, r22
    3b6a:	bc 01       	movw	r22, r24
    3b6c:	cd 01       	movw	r24, r26
    3b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b72:	dc 01       	movw	r26, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	9e 83       	std	Y+6, r25	; 0x06
    3b78:	8d 83       	std	Y+5, r24	; 0x05
    3b7a:	0f c0       	rjmp	.+30     	; 0x3b9a <H_LCD_Void_LCDWriteCommand+0x3da>
    3b7c:	80 e9       	ldi	r24, 0x90	; 144
    3b7e:	91 e0       	ldi	r25, 0x01	; 1
    3b80:	9c 83       	std	Y+4, r25	; 0x04
    3b82:	8b 83       	std	Y+3, r24	; 0x03
    3b84:	8b 81       	ldd	r24, Y+3	; 0x03
    3b86:	9c 81       	ldd	r25, Y+4	; 0x04
    3b88:	01 97       	sbiw	r24, 0x01	; 1
    3b8a:	f1 f7       	brne	.-4      	; 0x3b88 <H_LCD_Void_LCDWriteCommand+0x3c8>
    3b8c:	9c 83       	std	Y+4, r25	; 0x04
    3b8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b90:	8d 81       	ldd	r24, Y+5	; 0x05
    3b92:	9e 81       	ldd	r25, Y+6	; 0x06
    3b94:	01 97       	sbiw	r24, 0x01	; 1
    3b96:	9e 83       	std	Y+6, r25	; 0x06
    3b98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9e:	00 97       	sbiw	r24, 0x00	; 0
    3ba0:	69 f7       	brne	.-38     	; 0x3b7c <H_LCD_Void_LCDWriteCommand+0x3bc>
    3ba2:	14 c0       	rjmp	.+40     	; 0x3bcc <H_LCD_Void_LCDWriteCommand+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba6:	78 85       	ldd	r23, Y+8	; 0x08
    3ba8:	89 85       	ldd	r24, Y+9	; 0x09
    3baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	9e 83       	std	Y+6, r25	; 0x06
    3bb6:	8d 83       	std	Y+5, r24	; 0x05
    3bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bba:	9e 81       	ldd	r25, Y+6	; 0x06
    3bbc:	9a 83       	std	Y+2, r25	; 0x02
    3bbe:	89 83       	std	Y+1, r24	; 0x01
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	f1 f7       	brne	.-4      	; 0x3bc4 <H_LCD_Void_LCDWriteCommand+0x404>
    3bc8:	9a 83       	std	Y+2, r25	; 0x02
    3bca:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(5);
}
    3bcc:	e9 96       	adiw	r28, 0x39	; 57
    3bce:	0f b6       	in	r0, 0x3f	; 63
    3bd0:	f8 94       	cli
    3bd2:	de bf       	out	0x3e, r29	; 62
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	cd bf       	out	0x3d, r28	; 61
    3bd8:	cf 91       	pop	r28
    3bda:	df 91       	pop	r29
    3bdc:	08 95       	ret

00003bde <H_LCD_Void_LCDWriteString>:


void H_LCD_Void_LCDWriteString(u8* Local_u8_Ptr)
{
    3bde:	df 93       	push	r29
    3be0:	cf 93       	push	r28
    3be2:	cd b7       	in	r28, 0x3d	; 61
    3be4:	de b7       	in	r29, 0x3e	; 62
    3be6:	61 97       	sbiw	r28, 0x11	; 17
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	99 8b       	std	Y+17, r25	; 0x11
    3bf4:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8_Counter = 0;
    3bf6:	1f 86       	std	Y+15, r1	; 0x0f
    3bf8:	0e c0       	rjmp	.+28     	; 0x3c16 <H_LCD_Void_LCDWriteString+0x38>
	while(Local_u8_Ptr[Local_u8_Counter] != '\0')
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_Ptr[Local_u8_Counter]);
    3bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bfc:	28 2f       	mov	r18, r24
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	88 89       	ldd	r24, Y+16	; 0x10
    3c02:	99 89       	ldd	r25, Y+17	; 0x11
    3c04:	fc 01       	movw	r30, r24
    3c06:	e2 0f       	add	r30, r18
    3c08:	f3 1f       	adc	r31, r19
    3c0a:	80 81       	ld	r24, Z
    3c0c:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <H_LCD_Void_LCDWriteCharacter>
	Local_u8_Counter++;
    3c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c12:	8f 5f       	subi	r24, 0xFF	; 255
    3c14:	8f 87       	std	Y+15, r24	; 0x0f


void H_LCD_Void_LCDWriteString(u8* Local_u8_Ptr)
{
	u8 Local_u8_Counter = 0;
	while(Local_u8_Ptr[Local_u8_Counter] != '\0')
    3c16:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c18:	28 2f       	mov	r18, r24
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	88 89       	ldd	r24, Y+16	; 0x10
    3c1e:	99 89       	ldd	r25, Y+17	; 0x11
    3c20:	fc 01       	movw	r30, r24
    3c22:	e2 0f       	add	r30, r18
    3c24:	f3 1f       	adc	r31, r19
    3c26:	80 81       	ld	r24, Z
    3c28:	88 23       	and	r24, r24
    3c2a:	39 f7       	brne	.-50     	; 0x3bfa <H_LCD_Void_LCDWriteString+0x1c>
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	a0 ea       	ldi	r26, 0xA0	; 160
    3c32:	b0 e4       	ldi	r27, 0x40	; 64
    3c34:	8b 87       	std	Y+11, r24	; 0x0b
    3c36:	9c 87       	std	Y+12, r25	; 0x0c
    3c38:	ad 87       	std	Y+13, r26	; 0x0d
    3c3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	4a e7       	ldi	r20, 0x7A	; 122
    3c4a:	55 e4       	ldi	r21, 0x45	; 69
    3c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	8f 83       	std	Y+7, r24	; 0x07
    3c56:	98 87       	std	Y+8, r25	; 0x08
    3c58:	a9 87       	std	Y+9, r26	; 0x09
    3c5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c5e:	78 85       	ldd	r23, Y+8	; 0x08
    3c60:	89 85       	ldd	r24, Y+9	; 0x09
    3c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	40 e8       	ldi	r20, 0x80	; 128
    3c6a:	5f e3       	ldi	r21, 0x3F	; 63
    3c6c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3c70:	88 23       	and	r24, r24
    3c72:	2c f4       	brge	.+10     	; 0x3c7e <H_LCD_Void_LCDWriteString+0xa0>
		__ticks = 1;
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	9e 83       	std	Y+6, r25	; 0x06
    3c7a:	8d 83       	std	Y+5, r24	; 0x05
    3c7c:	3f c0       	rjmp	.+126    	; 0x3cfc <H_LCD_Void_LCDWriteString+0x11e>
	else if (__tmp > 65535)
    3c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c80:	78 85       	ldd	r23, Y+8	; 0x08
    3c82:	89 85       	ldd	r24, Y+9	; 0x09
    3c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	3f ef       	ldi	r19, 0xFF	; 255
    3c8a:	4f e7       	ldi	r20, 0x7F	; 127
    3c8c:	57 e4       	ldi	r21, 0x47	; 71
    3c8e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c92:	18 16       	cp	r1, r24
    3c94:	4c f5       	brge	.+82     	; 0x3ce8 <H_LCD_Void_LCDWriteString+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	40 e2       	ldi	r20, 0x20	; 32
    3ca4:	51 e4       	ldi	r21, 0x41	; 65
    3ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	bc 01       	movw	r22, r24
    3cb0:	cd 01       	movw	r24, r26
    3cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	cb 01       	movw	r24, r22
    3cba:	9e 83       	std	Y+6, r25	; 0x06
    3cbc:	8d 83       	std	Y+5, r24	; 0x05
    3cbe:	0f c0       	rjmp	.+30     	; 0x3cde <H_LCD_Void_LCDWriteString+0x100>
    3cc0:	80 e9       	ldi	r24, 0x90	; 144
    3cc2:	91 e0       	ldi	r25, 0x01	; 1
    3cc4:	9c 83       	std	Y+4, r25	; 0x04
    3cc6:	8b 83       	std	Y+3, r24	; 0x03
    3cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cca:	9c 81       	ldd	r25, Y+4	; 0x04
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <H_LCD_Void_LCDWriteString+0xee>
    3cd0:	9c 83       	std	Y+4, r25	; 0x04
    3cd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	9e 83       	std	Y+6, r25	; 0x06
    3cdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cde:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce2:	00 97       	sbiw	r24, 0x00	; 0
    3ce4:	69 f7       	brne	.-38     	; 0x3cc0 <H_LCD_Void_LCDWriteString+0xe2>
    3ce6:	14 c0       	rjmp	.+40     	; 0x3d10 <H_LCD_Void_LCDWriteString+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cea:	78 85       	ldd	r23, Y+8	; 0x08
    3cec:	89 85       	ldd	r24, Y+9	; 0x09
    3cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	9e 83       	std	Y+6, r25	; 0x06
    3cfa:	8d 83       	std	Y+5, r24	; 0x05
    3cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    3d00:	9a 83       	std	Y+2, r25	; 0x02
    3d02:	89 83       	std	Y+1, r24	; 0x01
    3d04:	89 81       	ldd	r24, Y+1	; 0x01
    3d06:	9a 81       	ldd	r25, Y+2	; 0x02
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	f1 f7       	brne	.-4      	; 0x3d08 <H_LCD_Void_LCDWriteString+0x12a>
    3d0c:	9a 83       	std	Y+2, r25	; 0x02
    3d0e:	89 83       	std	Y+1, r24	; 0x01
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_Ptr[Local_u8_Counter]);
	Local_u8_Counter++;
	}
	_delay_ms(5);
}
    3d10:	61 96       	adiw	r28, 0x11	; 17
    3d12:	0f b6       	in	r0, 0x3f	; 63
    3d14:	f8 94       	cli
    3d16:	de bf       	out	0x3e, r29	; 62
    3d18:	0f be       	out	0x3f, r0	; 63
    3d1a:	cd bf       	out	0x3d, r28	; 61
    3d1c:	cf 91       	pop	r28
    3d1e:	df 91       	pop	r29
    3d20:	08 95       	ret

00003d22 <H_LCD_Void_LCDWriteNumber>:
void H_LCD_Void_LCDWriteNumber(f64 Local_f64_Number)
{
    3d22:	0f 93       	push	r16
    3d24:	1f 93       	push	r17
    3d26:	df 93       	push	r29
    3d28:	cf 93       	push	r28
    3d2a:	cd b7       	in	r28, 0x3d	; 61
    3d2c:	de b7       	in	r29, 0x3e	; 62
    3d2e:	6d 97       	sbiw	r28, 0x1d	; 29
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
    3d3a:	6a 8f       	std	Y+26, r22	; 0x1a
    3d3c:	7b 8f       	std	Y+27, r23	; 0x1b
    3d3e:	8c 8f       	std	Y+28, r24	; 0x1c
    3d40:	9d 8f       	std	Y+29, r25	; 0x1d
	u8 Local_u8_IntArr[10] = {0};
    3d42:	8a e0       	ldi	r24, 0x0A	; 10
    3d44:	fe 01       	movw	r30, r28
    3d46:	3b 96       	adiw	r30, 0x0b	; 11
    3d48:	df 01       	movw	r26, r30
    3d4a:	98 2f       	mov	r25, r24
    3d4c:	1d 92       	st	X+, r1
    3d4e:	9a 95       	dec	r25
    3d50:	e9 f7       	brne	.-6      	; 0x3d4c <H_LCD_Void_LCDWriteNumber+0x2a>
	u8 Local_u8_FloatArr[5] = {0};
    3d52:	85 e0       	ldi	r24, 0x05	; 5
    3d54:	fe 01       	movw	r30, r28
    3d56:	75 96       	adiw	r30, 0x15	; 21
    3d58:	df 01       	movw	r26, r30
    3d5a:	98 2f       	mov	r25, r24
    3d5c:	1d 92       	st	X+, r1
    3d5e:	9a 95       	dec	r25
    3d60:	e9 f7       	brne	.-6      	; 0x3d5c <H_LCD_Void_LCDWriteNumber+0x3a>
	s8 Local_s8_Counter1 = 0;
    3d62:	1a 86       	std	Y+10, r1	; 0x0a
	s8 Local_s8_Counter2 = 0;
    3d64:	19 86       	std	Y+9, r1	; 0x09
	f64 Local_f64_FloatSector = 0;
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	a0 e0       	ldi	r26, 0x00	; 0
    3d6c:	b0 e0       	ldi	r27, 0x00	; 0
    3d6e:	8d 83       	std	Y+5, r24	; 0x05
    3d70:	9e 83       	std	Y+6, r25	; 0x06
    3d72:	af 83       	std	Y+7, r26	; 0x07
    3d74:	b8 87       	std	Y+8, r27	; 0x08
	s32 Local_s32_IntSector = 0;
    3d76:	19 82       	std	Y+1, r1	; 0x01
    3d78:	1a 82       	std	Y+2, r1	; 0x02
    3d7a:	1b 82       	std	Y+3, r1	; 0x03
    3d7c:	1c 82       	std	Y+4, r1	; 0x04
	if(Local_f64_Number == 0)H_LCD_Void_LCDWriteCharacter(48);
    3d7e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3d80:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3d82:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d84:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3d86:	20 e0       	ldi	r18, 0x00	; 0
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	40 e0       	ldi	r20, 0x00	; 0
    3d8c:	50 e0       	ldi	r21, 0x00	; 0
    3d8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3d92:	88 23       	and	r24, r24
    3d94:	19 f4       	brne	.+6      	; 0x3d9c <H_LCD_Void_LCDWriteNumber+0x7a>
    3d96:	80 e3       	ldi	r24, 0x30	; 48
    3d98:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <H_LCD_Void_LCDWriteCharacter>
	if(Local_f64_Number < 0)
    3d9c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3d9e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3da0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3da2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3da4:	20 e0       	ldi	r18, 0x00	; 0
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	40 e0       	ldi	r20, 0x00	; 0
    3daa:	50 e0       	ldi	r21, 0x00	; 0
    3dac:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3db0:	88 23       	and	r24, r24
    3db2:	64 f4       	brge	.+24     	; 0x3dcc <H_LCD_Void_LCDWriteNumber+0xaa>
	{
		H_LCD_Void_LCDWriteCharacter('-');
    3db4:	8d e2       	ldi	r24, 0x2D	; 45
    3db6:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <H_LCD_Void_LCDWriteCharacter>
		Local_f64_Number = Local_f64_Number * (-1);
    3dba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3dbc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3dbe:	ac 8d       	ldd	r26, Y+28	; 0x1c
    3dc0:	bd 8d       	ldd	r27, Y+29	; 0x1d
    3dc2:	b0 58       	subi	r27, 0x80	; 128
    3dc4:	8a 8f       	std	Y+26, r24	; 0x1a
    3dc6:	9b 8f       	std	Y+27, r25	; 0x1b
    3dc8:	ac 8f       	std	Y+28, r26	; 0x1c
    3dca:	bd 8f       	std	Y+29, r27	; 0x1d
	}
	Local_s32_IntSector = Local_f64_Number;
    3dcc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3dce:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3dd0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3dd2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3dd4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	89 83       	std	Y+1, r24	; 0x01
    3dde:	9a 83       	std	Y+2, r25	; 0x02
    3de0:	ab 83       	std	Y+3, r26	; 0x03
    3de2:	bc 83       	std	Y+4, r27	; 0x04
	Local_f64_FloatSector = Local_f64_Number - Local_s32_IntSector;
    3de4:	69 81       	ldd	r22, Y+1	; 0x01
    3de6:	7a 81       	ldd	r23, Y+2	; 0x02
    3de8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dea:	9c 81       	ldd	r25, Y+4	; 0x04
    3dec:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3df0:	9b 01       	movw	r18, r22
    3df2:	ac 01       	movw	r20, r24
    3df4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3df6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3df8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3dfa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3dfc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	8d 83       	std	Y+5, r24	; 0x05
    3e06:	9e 83       	std	Y+6, r25	; 0x06
    3e08:	af 83       	std	Y+7, r26	; 0x07
    3e0a:	b8 87       	std	Y+8, r27	; 0x08
    3e0c:	2f c0       	rjmp	.+94     	; 0x3e6c <H_LCD_Void_LCDWriteNumber+0x14a>

	/*************************************EXTRACTING_INTEGER_SECTION************************************/
	while(Local_s32_IntSector)
	{
	Local_u8_IntArr[Local_s8_Counter1] = Local_s32_IntSector % 10;
    3e0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e10:	08 2f       	mov	r16, r24
    3e12:	11 27       	eor	r17, r17
    3e14:	07 fd       	sbrc	r16, 7
    3e16:	10 95       	com	r17
    3e18:	89 81       	ldd	r24, Y+1	; 0x01
    3e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e1c:	ab 81       	ldd	r26, Y+3	; 0x03
    3e1e:	bc 81       	ldd	r27, Y+4	; 0x04
    3e20:	2a e0       	ldi	r18, 0x0A	; 10
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	40 e0       	ldi	r20, 0x00	; 0
    3e26:	50 e0       	ldi	r21, 0x00	; 0
    3e28:	bc 01       	movw	r22, r24
    3e2a:	cd 01       	movw	r24, r26
    3e2c:	0e 94 35 29 	call	0x526a	; 0x526a <__divmodsi4>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	28 2f       	mov	r18, r24
    3e36:	ce 01       	movw	r24, r28
    3e38:	0b 96       	adiw	r24, 0x0b	; 11
    3e3a:	fc 01       	movw	r30, r24
    3e3c:	e0 0f       	add	r30, r16
    3e3e:	f1 1f       	adc	r31, r17
    3e40:	20 83       	st	Z, r18
	Local_s32_IntSector = Local_s32_IntSector / 10;
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	9a 81       	ldd	r25, Y+2	; 0x02
    3e46:	ab 81       	ldd	r26, Y+3	; 0x03
    3e48:	bc 81       	ldd	r27, Y+4	; 0x04
    3e4a:	2a e0       	ldi	r18, 0x0A	; 10
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    3e4e:	40 e0       	ldi	r20, 0x00	; 0
    3e50:	50 e0       	ldi	r21, 0x00	; 0
    3e52:	bc 01       	movw	r22, r24
    3e54:	cd 01       	movw	r24, r26
    3e56:	0e 94 35 29 	call	0x526a	; 0x526a <__divmodsi4>
    3e5a:	da 01       	movw	r26, r20
    3e5c:	c9 01       	movw	r24, r18
    3e5e:	89 83       	std	Y+1, r24	; 0x01
    3e60:	9a 83       	std	Y+2, r25	; 0x02
    3e62:	ab 83       	std	Y+3, r26	; 0x03
    3e64:	bc 83       	std	Y+4, r27	; 0x04
	Local_s8_Counter1++;
    3e66:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e68:	8f 5f       	subi	r24, 0xFF	; 255
    3e6a:	8a 87       	std	Y+10, r24	; 0x0a
	}
	Local_s32_IntSector = Local_f64_Number;
	Local_f64_FloatSector = Local_f64_Number - Local_s32_IntSector;

	/*************************************EXTRACTING_INTEGER_SECTION************************************/
	while(Local_s32_IntSector)
    3e6c:	89 81       	ldd	r24, Y+1	; 0x01
    3e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e70:	ab 81       	ldd	r26, Y+3	; 0x03
    3e72:	bc 81       	ldd	r27, Y+4	; 0x04
    3e74:	00 97       	sbiw	r24, 0x00	; 0
    3e76:	a1 05       	cpc	r26, r1
    3e78:	b1 05       	cpc	r27, r1
    3e7a:	49 f6       	brne	.-110    	; 0x3e0e <H_LCD_Void_LCDWriteNumber+0xec>
	{
	Local_u8_IntArr[Local_s8_Counter1] = Local_s32_IntSector % 10;
	Local_s32_IntSector = Local_s32_IntSector / 10;
	Local_s8_Counter1++;
	}
	Local_s8_Counter1--;
    3e7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e7e:	81 50       	subi	r24, 0x01	; 1
    3e80:	8a 87       	std	Y+10, r24	; 0x0a
    3e82:	47 c0       	rjmp	.+142    	; 0x3f12 <H_LCD_Void_LCDWriteNumber+0x1f0>
	/*************************************EXTRACTING_FLOAT_SECTION************************************/
	while(Local_s8_Counter2 < 5)
	{

	Local_f64_FloatSector = Local_f64_FloatSector * 10;
    3e84:	6d 81       	ldd	r22, Y+5	; 0x05
    3e86:	7e 81       	ldd	r23, Y+6	; 0x06
    3e88:	8f 81       	ldd	r24, Y+7	; 0x07
    3e8a:	98 85       	ldd	r25, Y+8	; 0x08
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	40 e2       	ldi	r20, 0x20	; 32
    3e92:	51 e4       	ldi	r21, 0x41	; 65
    3e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	8d 83       	std	Y+5, r24	; 0x05
    3e9e:	9e 83       	std	Y+6, r25	; 0x06
    3ea0:	af 83       	std	Y+7, r26	; 0x07
    3ea2:	b8 87       	std	Y+8, r27	; 0x08
	Local_u8_FloatArr[Local_s8_Counter2] = Local_f64_FloatSector;
    3ea4:	89 85       	ldd	r24, Y+9	; 0x09
    3ea6:	08 2f       	mov	r16, r24
    3ea8:	11 27       	eor	r17, r17
    3eaa:	07 fd       	sbrc	r16, 7
    3eac:	10 95       	com	r17
    3eae:	6d 81       	ldd	r22, Y+5	; 0x05
    3eb0:	7e 81       	ldd	r23, Y+6	; 0x06
    3eb2:	8f 81       	ldd	r24, Y+7	; 0x07
    3eb4:	98 85       	ldd	r25, Y+8	; 0x08
    3eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eba:	dc 01       	movw	r26, r24
    3ebc:	cb 01       	movw	r24, r22
    3ebe:	28 2f       	mov	r18, r24
    3ec0:	ce 01       	movw	r24, r28
    3ec2:	45 96       	adiw	r24, 0x15	; 21
    3ec4:	fc 01       	movw	r30, r24
    3ec6:	e0 0f       	add	r30, r16
    3ec8:	f1 1f       	adc	r31, r17
    3eca:	20 83       	st	Z, r18
	Local_s8_Counter2++;
    3ecc:	89 85       	ldd	r24, Y+9	; 0x09
    3ece:	8f 5f       	subi	r24, 0xFF	; 255
    3ed0:	89 87       	std	Y+9, r24	; 0x09
	Local_f64_FloatSector = (Local_f64_FloatSector - (u8)Local_f64_FloatSector);
    3ed2:	6d 81       	ldd	r22, Y+5	; 0x05
    3ed4:	7e 81       	ldd	r23, Y+6	; 0x06
    3ed6:	8f 81       	ldd	r24, Y+7	; 0x07
    3ed8:	98 85       	ldd	r25, Y+8	; 0x08
    3eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ede:	dc 01       	movw	r26, r24
    3ee0:	cb 01       	movw	r24, r22
    3ee2:	88 2f       	mov	r24, r24
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	aa 27       	eor	r26, r26
    3ee8:	97 fd       	sbrc	r25, 7
    3eea:	a0 95       	com	r26
    3eec:	ba 2f       	mov	r27, r26
    3eee:	bc 01       	movw	r22, r24
    3ef0:	cd 01       	movw	r24, r26
    3ef2:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3ef6:	9b 01       	movw	r18, r22
    3ef8:	ac 01       	movw	r20, r24
    3efa:	6d 81       	ldd	r22, Y+5	; 0x05
    3efc:	7e 81       	ldd	r23, Y+6	; 0x06
    3efe:	8f 81       	ldd	r24, Y+7	; 0x07
    3f00:	98 85       	ldd	r25, Y+8	; 0x08
    3f02:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3f06:	dc 01       	movw	r26, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	8d 83       	std	Y+5, r24	; 0x05
    3f0c:	9e 83       	std	Y+6, r25	; 0x06
    3f0e:	af 83       	std	Y+7, r26	; 0x07
    3f10:	b8 87       	std	Y+8, r27	; 0x08
	Local_s32_IntSector = Local_s32_IntSector / 10;
	Local_s8_Counter1++;
	}
	Local_s8_Counter1--;
	/*************************************EXTRACTING_FLOAT_SECTION************************************/
	while(Local_s8_Counter2 < 5)
    3f12:	89 85       	ldd	r24, Y+9	; 0x09
    3f14:	85 30       	cpi	r24, 0x05	; 5
    3f16:	0c f4       	brge	.+2      	; 0x3f1a <H_LCD_Void_LCDWriteNumber+0x1f8>
    3f18:	b5 cf       	rjmp	.-150    	; 0x3e84 <H_LCD_Void_LCDWriteNumber+0x162>
	Local_f64_FloatSector = Local_f64_FloatSector * 10;
	Local_u8_FloatArr[Local_s8_Counter2] = Local_f64_FloatSector;
	Local_s8_Counter2++;
	Local_f64_FloatSector = (Local_f64_FloatSector - (u8)Local_f64_FloatSector);
	}
	Local_s8_Counter2--;
    3f1a:	89 85       	ldd	r24, Y+9	; 0x09
    3f1c:	81 50       	subi	r24, 0x01	; 1
    3f1e:	89 87       	std	Y+9, r24	; 0x09
    3f20:	11 c0       	rjmp	.+34     	; 0x3f44 <H_LCD_Void_LCDWriteNumber+0x222>

	/*************************************WRITING_INTEGER_SECTION************************************/
	while(Local_s8_Counter1 >= 0 )
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_IntArr[Local_s8_Counter1] + 48);
    3f22:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f24:	28 2f       	mov	r18, r24
    3f26:	33 27       	eor	r19, r19
    3f28:	27 fd       	sbrc	r18, 7
    3f2a:	30 95       	com	r19
    3f2c:	ce 01       	movw	r24, r28
    3f2e:	0b 96       	adiw	r24, 0x0b	; 11
    3f30:	fc 01       	movw	r30, r24
    3f32:	e2 0f       	add	r30, r18
    3f34:	f3 1f       	adc	r31, r19
    3f36:	80 81       	ld	r24, Z
    3f38:	80 5d       	subi	r24, 0xD0	; 208
    3f3a:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <H_LCD_Void_LCDWriteCharacter>
	Local_s8_Counter1--;
    3f3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f40:	81 50       	subi	r24, 0x01	; 1
    3f42:	8a 87       	std	Y+10, r24	; 0x0a
	Local_f64_FloatSector = (Local_f64_FloatSector - (u8)Local_f64_FloatSector);
	}
	Local_s8_Counter2--;

	/*************************************WRITING_INTEGER_SECTION************************************/
	while(Local_s8_Counter1 >= 0 )
    3f44:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f46:	88 23       	and	r24, r24
    3f48:	64 f7       	brge	.-40     	; 0x3f22 <H_LCD_Void_LCDWriteNumber+0x200>
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_IntArr[Local_s8_Counter1] + 48);
	Local_s8_Counter1--;
	}
	/*************************************WRITING_FLOAT_SECTION************************************/
	H_LCD_Void_LCDWriteCharacter('.');
    3f4a:	8e e2       	ldi	r24, 0x2E	; 46
    3f4c:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <H_LCD_Void_LCDWriteCharacter>
	Local_s8_Counter2 = 0;
    3f50:	19 86       	std	Y+9, r1	; 0x09
    3f52:	11 c0       	rjmp	.+34     	; 0x3f76 <H_LCD_Void_LCDWriteNumber+0x254>
	while(Local_s8_Counter2 < 4 )
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_FloatArr[Local_s8_Counter2] + 48);
    3f54:	89 85       	ldd	r24, Y+9	; 0x09
    3f56:	28 2f       	mov	r18, r24
    3f58:	33 27       	eor	r19, r19
    3f5a:	27 fd       	sbrc	r18, 7
    3f5c:	30 95       	com	r19
    3f5e:	ce 01       	movw	r24, r28
    3f60:	45 96       	adiw	r24, 0x15	; 21
    3f62:	fc 01       	movw	r30, r24
    3f64:	e2 0f       	add	r30, r18
    3f66:	f3 1f       	adc	r31, r19
    3f68:	80 81       	ld	r24, Z
    3f6a:	80 5d       	subi	r24, 0xD0	; 208
    3f6c:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <H_LCD_Void_LCDWriteCharacter>
	Local_s8_Counter2++;
    3f70:	89 85       	ldd	r24, Y+9	; 0x09
    3f72:	8f 5f       	subi	r24, 0xFF	; 255
    3f74:	89 87       	std	Y+9, r24	; 0x09
	Local_s8_Counter1--;
	}
	/*************************************WRITING_FLOAT_SECTION************************************/
	H_LCD_Void_LCDWriteCharacter('.');
	Local_s8_Counter2 = 0;
	while(Local_s8_Counter2 < 4 )
    3f76:	89 85       	ldd	r24, Y+9	; 0x09
    3f78:	84 30       	cpi	r24, 0x04	; 4
    3f7a:	64 f3       	brlt	.-40     	; 0x3f54 <H_LCD_Void_LCDWriteNumber+0x232>
	{
	H_LCD_Void_LCDWriteCharacter(Local_u8_FloatArr[Local_s8_Counter2] + 48);
	Local_s8_Counter2++;
	}
}
    3f7c:	6d 96       	adiw	r28, 0x1d	; 29
    3f7e:	0f b6       	in	r0, 0x3f	; 63
    3f80:	f8 94       	cli
    3f82:	de bf       	out	0x3e, r29	; 62
    3f84:	0f be       	out	0x3f, r0	; 63
    3f86:	cd bf       	out	0x3d, r28	; 61
    3f88:	cf 91       	pop	r28
    3f8a:	df 91       	pop	r29
    3f8c:	1f 91       	pop	r17
    3f8e:	0f 91       	pop	r16
    3f90:	08 95       	ret

00003f92 <H_LCD_Void_LCDGoto>:


void H_LCD_Void_LCDGoto(u8 Local_u8_Row,u8 Local_u8_Col)
{
    3f92:	df 93       	push	r29
    3f94:	cf 93       	push	r28
    3f96:	00 d0       	rcall	.+0      	; 0x3f98 <H_LCD_Void_LCDGoto+0x6>
    3f98:	00 d0       	rcall	.+0      	; 0x3f9a <H_LCD_Void_LCDGoto+0x8>
    3f9a:	cd b7       	in	r28, 0x3d	; 61
    3f9c:	de b7       	in	r29, 0x3e	; 62
    3f9e:	8b 83       	std	Y+3, r24	; 0x03
    3fa0:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8_Arr[2] = {LCD_1st_Row_command , LCD_2nd_Row_command};
    3fa2:	80 e8       	ldi	r24, 0x80	; 128
    3fa4:	89 83       	std	Y+1, r24	; 0x01
    3fa6:	80 ec       	ldi	r24, 0xC0	; 192
    3fa8:	8a 83       	std	Y+2, r24	; 0x02
	H_LCD_Void_LCDWriteCommand(Local_u8_Arr[Local_u8_Row] + Local_u8_Col);
    3faa:	8b 81       	ldd	r24, Y+3	; 0x03
    3fac:	28 2f       	mov	r18, r24
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	ce 01       	movw	r24, r28
    3fb2:	01 96       	adiw	r24, 0x01	; 1
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	e2 0f       	add	r30, r18
    3fb8:	f3 1f       	adc	r31, r19
    3fba:	90 81       	ld	r25, Z
    3fbc:	8c 81       	ldd	r24, Y+4	; 0x04
    3fbe:	89 0f       	add	r24, r25
    3fc0:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <H_LCD_Void_LCDWriteCommand>
}
    3fc4:	0f 90       	pop	r0
    3fc6:	0f 90       	pop	r0
    3fc8:	0f 90       	pop	r0
    3fca:	0f 90       	pop	r0
    3fcc:	cf 91       	pop	r28
    3fce:	df 91       	pop	r29
    3fd0:	08 95       	ret

00003fd2 <H_LCD_Void_LCDClr>:


void H_LCD_Void_LCDClr(void)
{
    3fd2:	df 93       	push	r29
    3fd4:	cf 93       	push	r28
    3fd6:	cd b7       	in	r28, 0x3d	; 61
    3fd8:	de b7       	in	r29, 0x3e	; 62
    3fda:	2e 97       	sbiw	r28, 0x0e	; 14
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	f8 94       	cli
    3fe0:	de bf       	out	0x3e, r29	; 62
    3fe2:	0f be       	out	0x3f, r0	; 63
    3fe4:	cd bf       	out	0x3d, r28	; 61
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR_SCREEN);
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <H_LCD_Void_LCDWriteCommand>
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	a0 ea       	ldi	r26, 0xA0	; 160
    3ff2:	b0 e4       	ldi	r27, 0x40	; 64
    3ff4:	8b 87       	std	Y+11, r24	; 0x0b
    3ff6:	9c 87       	std	Y+12, r25	; 0x0c
    3ff8:	ad 87       	std	Y+13, r26	; 0x0d
    3ffa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ffc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ffe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4000:	8d 85       	ldd	r24, Y+13	; 0x0d
    4002:	9e 85       	ldd	r25, Y+14	; 0x0e
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	4a e7       	ldi	r20, 0x7A	; 122
    400a:	55 e4       	ldi	r21, 0x45	; 69
    400c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22
    4014:	8f 83       	std	Y+7, r24	; 0x07
    4016:	98 87       	std	Y+8, r25	; 0x08
    4018:	a9 87       	std	Y+9, r26	; 0x09
    401a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    401c:	6f 81       	ldd	r22, Y+7	; 0x07
    401e:	78 85       	ldd	r23, Y+8	; 0x08
    4020:	89 85       	ldd	r24, Y+9	; 0x09
    4022:	9a 85       	ldd	r25, Y+10	; 0x0a
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	40 e8       	ldi	r20, 0x80	; 128
    402a:	5f e3       	ldi	r21, 0x3F	; 63
    402c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4030:	88 23       	and	r24, r24
    4032:	2c f4       	brge	.+10     	; 0x403e <H_LCD_Void_LCDClr+0x6c>
		__ticks = 1;
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	9e 83       	std	Y+6, r25	; 0x06
    403a:	8d 83       	std	Y+5, r24	; 0x05
    403c:	3f c0       	rjmp	.+126    	; 0x40bc <H_LCD_Void_LCDClr+0xea>
	else if (__tmp > 65535)
    403e:	6f 81       	ldd	r22, Y+7	; 0x07
    4040:	78 85       	ldd	r23, Y+8	; 0x08
    4042:	89 85       	ldd	r24, Y+9	; 0x09
    4044:	9a 85       	ldd	r25, Y+10	; 0x0a
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	3f ef       	ldi	r19, 0xFF	; 255
    404a:	4f e7       	ldi	r20, 0x7F	; 127
    404c:	57 e4       	ldi	r21, 0x47	; 71
    404e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4052:	18 16       	cp	r1, r24
    4054:	4c f5       	brge	.+82     	; 0x40a8 <H_LCD_Void_LCDClr+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4056:	6b 85       	ldd	r22, Y+11	; 0x0b
    4058:	7c 85       	ldd	r23, Y+12	; 0x0c
    405a:	8d 85       	ldd	r24, Y+13	; 0x0d
    405c:	9e 85       	ldd	r25, Y+14	; 0x0e
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	40 e2       	ldi	r20, 0x20	; 32
    4064:	51 e4       	ldi	r21, 0x41	; 65
    4066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	bc 01       	movw	r22, r24
    4070:	cd 01       	movw	r24, r26
    4072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	9e 83       	std	Y+6, r25	; 0x06
    407c:	8d 83       	std	Y+5, r24	; 0x05
    407e:	0f c0       	rjmp	.+30     	; 0x409e <H_LCD_Void_LCDClr+0xcc>
    4080:	80 e9       	ldi	r24, 0x90	; 144
    4082:	91 e0       	ldi	r25, 0x01	; 1
    4084:	9c 83       	std	Y+4, r25	; 0x04
    4086:	8b 83       	std	Y+3, r24	; 0x03
    4088:	8b 81       	ldd	r24, Y+3	; 0x03
    408a:	9c 81       	ldd	r25, Y+4	; 0x04
    408c:	01 97       	sbiw	r24, 0x01	; 1
    408e:	f1 f7       	brne	.-4      	; 0x408c <H_LCD_Void_LCDClr+0xba>
    4090:	9c 83       	std	Y+4, r25	; 0x04
    4092:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4094:	8d 81       	ldd	r24, Y+5	; 0x05
    4096:	9e 81       	ldd	r25, Y+6	; 0x06
    4098:	01 97       	sbiw	r24, 0x01	; 1
    409a:	9e 83       	std	Y+6, r25	; 0x06
    409c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    409e:	8d 81       	ldd	r24, Y+5	; 0x05
    40a0:	9e 81       	ldd	r25, Y+6	; 0x06
    40a2:	00 97       	sbiw	r24, 0x00	; 0
    40a4:	69 f7       	brne	.-38     	; 0x4080 <H_LCD_Void_LCDClr+0xae>
    40a6:	14 c0       	rjmp	.+40     	; 0x40d0 <H_LCD_Void_LCDClr+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a8:	6f 81       	ldd	r22, Y+7	; 0x07
    40aa:	78 85       	ldd	r23, Y+8	; 0x08
    40ac:	89 85       	ldd	r24, Y+9	; 0x09
    40ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	9e 83       	std	Y+6, r25	; 0x06
    40ba:	8d 83       	std	Y+5, r24	; 0x05
    40bc:	8d 81       	ldd	r24, Y+5	; 0x05
    40be:	9e 81       	ldd	r25, Y+6	; 0x06
    40c0:	9a 83       	std	Y+2, r25	; 0x02
    40c2:	89 83       	std	Y+1, r24	; 0x01
    40c4:	89 81       	ldd	r24, Y+1	; 0x01
    40c6:	9a 81       	ldd	r25, Y+2	; 0x02
    40c8:	01 97       	sbiw	r24, 0x01	; 1
    40ca:	f1 f7       	brne	.-4      	; 0x40c8 <H_LCD_Void_LCDClr+0xf6>
    40cc:	9a 83       	std	Y+2, r25	; 0x02
    40ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    40d0:	2e 96       	adiw	r28, 0x0e	; 14
    40d2:	0f b6       	in	r0, 0x3f	; 63
    40d4:	f8 94       	cli
    40d6:	de bf       	out	0x3e, r29	; 62
    40d8:	0f be       	out	0x3f, r0	; 63
    40da:	cd bf       	out	0x3d, r28	; 61
    40dc:	cf 91       	pop	r28
    40de:	df 91       	pop	r29
    40e0:	08 95       	ret

000040e2 <H_KeyPad_Void_KeyPadInit>:
 */

#include"KeyPad.h"

void H_KeyPad_Void_KeyPadInit(void)
{
    40e2:	df 93       	push	r29
    40e4:	cf 93       	push	r28
    40e6:	cd b7       	in	r28, 0x3d	; 61
    40e8:	de b7       	in	r29, 0x3e	; 62
	M_Dio_Void_PinMode(KEYPAD_R0_PIN,OUTPUT);
    40ea:	88 e1       	ldi	r24, 0x18	; 24
    40ec:	61 e0       	ldi	r22, 0x01	; 1
    40ee:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_R1_PIN,OUTPUT);
    40f2:	89 e1       	ldi	r24, 0x19	; 25
    40f4:	61 e0       	ldi	r22, 0x01	; 1
    40f6:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_R2_PIN,OUTPUT);
    40fa:	8a e1       	ldi	r24, 0x1A	; 26
    40fc:	61 e0       	ldi	r22, 0x01	; 1
    40fe:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_R3_PIN,OUTPUT);
    4102:	8b e1       	ldi	r24, 0x1B	; 27
    4104:	61 e0       	ldi	r22, 0x01	; 1
    4106:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>

	M_Dio_Void_PinMode(KEYPAD_C0_PIN,INPUT);
    410a:	8a e2       	ldi	r24, 0x2A	; 42
    410c:	60 e0       	ldi	r22, 0x00	; 0
    410e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_C1_PIN,INPUT);
    4112:	8b e2       	ldi	r24, 0x2B	; 43
    4114:	60 e0       	ldi	r22, 0x00	; 0
    4116:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_C2_PIN,INPUT);
    411a:	8c e2       	ldi	r24, 0x2C	; 44
    411c:	60 e0       	ldi	r22, 0x00	; 0
    411e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	M_Dio_Void_PinMode(KEYPAD_C3_PIN,INPUT);
    4122:	8d e2       	ldi	r24, 0x2D	; 45
    4124:	60 e0       	ldi	r22, 0x00	; 0
    4126:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>

	M_Dio_Void_PinWrite(KEYPAD_R0_PIN,HIGH);
    412a:	88 e1       	ldi	r24, 0x18	; 24
    412c:	61 e0       	ldi	r22, 0x01	; 1
    412e:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(KEYPAD_R1_PIN,HIGH);
    4132:	89 e1       	ldi	r24, 0x19	; 25
    4134:	61 e0       	ldi	r22, 0x01	; 1
    4136:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(KEYPAD_R2_PIN,HIGH);
    413a:	8a e1       	ldi	r24, 0x1A	; 26
    413c:	61 e0       	ldi	r22, 0x01	; 1
    413e:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
	M_Dio_Void_PinWrite(KEYPAD_R3_PIN,HIGH);
    4142:	8b e1       	ldi	r24, 0x1B	; 27
    4144:	61 e0       	ldi	r22, 0x01	; 1
    4146:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
}
    414a:	cf 91       	pop	r28
    414c:	df 91       	pop	r29
    414e:	08 95       	ret

00004150 <H_KeyPad_U8_KeyPadRead>:
u8 H_KeyPad_U8_KeyPadRead(void)
{
    4150:	df 93       	push	r29
    4152:	cf 93       	push	r28
    4154:	cd b7       	in	r28, 0x3d	; 61
    4156:	de b7       	in	r29, 0x3e	; 62
    4158:	a6 97       	sbiw	r28, 0x26	; 38
    415a:	0f b6       	in	r0, 0x3f	; 63
    415c:	f8 94       	cli
    415e:	de bf       	out	0x3e, r29	; 62
    4160:	0f be       	out	0x3f, r0	; 63
    4162:	cd bf       	out	0x3d, r28	; 61
#if KEY_PAD_MODE == CALCULATOR
	u8 Local_u8_Arr [4][4] = {{'1','2','3','+'},
							  {'4','5','6','-'},
	 	 	 	 	 	 	  {'7','8','9','*'},
	 	 	 	 	 	 	  {'.','0','=','/'}};
    4164:	ce 01       	movw	r24, r28
    4166:	42 96       	adiw	r24, 0x12	; 18
    4168:	9b a3       	std	Y+35, r25	; 0x23
    416a:	8a a3       	std	Y+34, r24	; 0x22
    416c:	e4 e9       	ldi	r30, 0x94	; 148
    416e:	f1 e0       	ldi	r31, 0x01	; 1
    4170:	fd a3       	std	Y+37, r31	; 0x25
    4172:	ec a3       	std	Y+36, r30	; 0x24
    4174:	f0 e1       	ldi	r31, 0x10	; 16
    4176:	fe a3       	std	Y+38, r31	; 0x26
    4178:	ec a1       	ldd	r30, Y+36	; 0x24
    417a:	fd a1       	ldd	r31, Y+37	; 0x25
    417c:	00 80       	ld	r0, Z
    417e:	8c a1       	ldd	r24, Y+36	; 0x24
    4180:	9d a1       	ldd	r25, Y+37	; 0x25
    4182:	01 96       	adiw	r24, 0x01	; 1
    4184:	9d a3       	std	Y+37, r25	; 0x25
    4186:	8c a3       	std	Y+36, r24	; 0x24
    4188:	ea a1       	ldd	r30, Y+34	; 0x22
    418a:	fb a1       	ldd	r31, Y+35	; 0x23
    418c:	00 82       	st	Z, r0
    418e:	8a a1       	ldd	r24, Y+34	; 0x22
    4190:	9b a1       	ldd	r25, Y+35	; 0x23
    4192:	01 96       	adiw	r24, 0x01	; 1
    4194:	9b a3       	std	Y+35, r25	; 0x23
    4196:	8a a3       	std	Y+34, r24	; 0x22
    4198:	9e a1       	ldd	r25, Y+38	; 0x26
    419a:	91 50       	subi	r25, 0x01	; 1
    419c:	9e a3       	std	Y+38, r25	; 0x26
    419e:	ee a1       	ldd	r30, Y+38	; 0x26
    41a0:	ee 23       	and	r30, r30
    41a2:	51 f7       	brne	.-44     	; 0x4178 <H_KeyPad_U8_KeyPadRead+0x28>
	u8 Local_u8_Arr [4][4] = {{'1','2','3','A'},
							  {'4','5','6','B'},
	 	 	 	 	 	 	  {'7','8','9','C'},
	 	 	 	 	 	 	  {'*','0','#','D'}};
#endif
	u8 Local_u8_ColCounter = 0;
    41a4:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8_RowCounter = 0;
    41a6:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8_Reading = 0;
    41a8:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_u8_RowCounter = KEYPAD_R0_PIN ; Local_u8_RowCounter <= KEYPAD_R3_PIN ; Local_u8_RowCounter++)
    41aa:	88 e1       	ldi	r24, 0x18	; 24
    41ac:	88 8b       	std	Y+16, r24	; 0x10
    41ae:	b1 c0       	rjmp	.+354    	; 0x4312 <H_KeyPad_U8_KeyPadRead+0x1c2>
	{
		M_Dio_Void_PinWrite(Local_u8_RowCounter,LOW);
    41b0:	88 89       	ldd	r24, Y+16	; 0x10
    41b2:	60 e0       	ldi	r22, 0x00	; 0
    41b4:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
		for(Local_u8_ColCounter = KEYPAD_C0_PIN ; Local_u8_ColCounter <= KEYPAD_C3_PIN ; Local_u8_ColCounter++ )
    41b8:	8a e2       	ldi	r24, 0x2A	; 42
    41ba:	89 8b       	std	Y+17, r24	; 0x11
    41bc:	9f c0       	rjmp	.+318    	; 0x42fc <H_KeyPad_U8_KeyPadRead+0x1ac>
		{
			if(M_Dio_U8_PinRead(Local_u8_ColCounter) == PRESSED)
    41be:	89 89       	ldd	r24, Y+17	; 0x11
    41c0:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    41c4:	88 23       	and	r24, r24
    41c6:	09 f0       	breq	.+2      	; 0x41ca <H_KeyPad_U8_KeyPadRead+0x7a>
    41c8:	96 c0       	rjmp	.+300    	; 0x42f6 <H_KeyPad_U8_KeyPadRead+0x1a6>
    41ca:	80 e0       	ldi	r24, 0x00	; 0
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	a8 ec       	ldi	r26, 0xC8	; 200
    41d0:	b2 e4       	ldi	r27, 0x42	; 66
    41d2:	8b 87       	std	Y+11, r24	; 0x0b
    41d4:	9c 87       	std	Y+12, r25	; 0x0c
    41d6:	ad 87       	std	Y+13, r26	; 0x0d
    41d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41da:	6b 85       	ldd	r22, Y+11	; 0x0b
    41dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    41de:	8d 85       	ldd	r24, Y+13	; 0x0d
    41e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	4a e7       	ldi	r20, 0x7A	; 122
    41e8:	55 e4       	ldi	r21, 0x45	; 69
    41ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	8f 83       	std	Y+7, r24	; 0x07
    41f4:	98 87       	std	Y+8, r25	; 0x08
    41f6:	a9 87       	std	Y+9, r26	; 0x09
    41f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41fa:	6f 81       	ldd	r22, Y+7	; 0x07
    41fc:	78 85       	ldd	r23, Y+8	; 0x08
    41fe:	89 85       	ldd	r24, Y+9	; 0x09
    4200:	9a 85       	ldd	r25, Y+10	; 0x0a
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	40 e8       	ldi	r20, 0x80	; 128
    4208:	5f e3       	ldi	r21, 0x3F	; 63
    420a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    420e:	88 23       	and	r24, r24
    4210:	2c f4       	brge	.+10     	; 0x421c <H_KeyPad_U8_KeyPadRead+0xcc>
		__ticks = 1;
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	9e 83       	std	Y+6, r25	; 0x06
    4218:	8d 83       	std	Y+5, r24	; 0x05
    421a:	3f c0       	rjmp	.+126    	; 0x429a <H_KeyPad_U8_KeyPadRead+0x14a>
	else if (__tmp > 65535)
    421c:	6f 81       	ldd	r22, Y+7	; 0x07
    421e:	78 85       	ldd	r23, Y+8	; 0x08
    4220:	89 85       	ldd	r24, Y+9	; 0x09
    4222:	9a 85       	ldd	r25, Y+10	; 0x0a
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	3f ef       	ldi	r19, 0xFF	; 255
    4228:	4f e7       	ldi	r20, 0x7F	; 127
    422a:	57 e4       	ldi	r21, 0x47	; 71
    422c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4230:	18 16       	cp	r1, r24
    4232:	4c f5       	brge	.+82     	; 0x4286 <H_KeyPad_U8_KeyPadRead+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4234:	6b 85       	ldd	r22, Y+11	; 0x0b
    4236:	7c 85       	ldd	r23, Y+12	; 0x0c
    4238:	8d 85       	ldd	r24, Y+13	; 0x0d
    423a:	9e 85       	ldd	r25, Y+14	; 0x0e
    423c:	20 e0       	ldi	r18, 0x00	; 0
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	40 e2       	ldi	r20, 0x20	; 32
    4242:	51 e4       	ldi	r21, 0x41	; 65
    4244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	bc 01       	movw	r22, r24
    424e:	cd 01       	movw	r24, r26
    4250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4254:	dc 01       	movw	r26, r24
    4256:	cb 01       	movw	r24, r22
    4258:	9e 83       	std	Y+6, r25	; 0x06
    425a:	8d 83       	std	Y+5, r24	; 0x05
    425c:	0f c0       	rjmp	.+30     	; 0x427c <H_KeyPad_U8_KeyPadRead+0x12c>
    425e:	80 e9       	ldi	r24, 0x90	; 144
    4260:	91 e0       	ldi	r25, 0x01	; 1
    4262:	9c 83       	std	Y+4, r25	; 0x04
    4264:	8b 83       	std	Y+3, r24	; 0x03
    4266:	8b 81       	ldd	r24, Y+3	; 0x03
    4268:	9c 81       	ldd	r25, Y+4	; 0x04
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	f1 f7       	brne	.-4      	; 0x426a <H_KeyPad_U8_KeyPadRead+0x11a>
    426e:	9c 83       	std	Y+4, r25	; 0x04
    4270:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4272:	8d 81       	ldd	r24, Y+5	; 0x05
    4274:	9e 81       	ldd	r25, Y+6	; 0x06
    4276:	01 97       	sbiw	r24, 0x01	; 1
    4278:	9e 83       	std	Y+6, r25	; 0x06
    427a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    427c:	8d 81       	ldd	r24, Y+5	; 0x05
    427e:	9e 81       	ldd	r25, Y+6	; 0x06
    4280:	00 97       	sbiw	r24, 0x00	; 0
    4282:	69 f7       	brne	.-38     	; 0x425e <H_KeyPad_U8_KeyPadRead+0x10e>
    4284:	14 c0       	rjmp	.+40     	; 0x42ae <H_KeyPad_U8_KeyPadRead+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4286:	6f 81       	ldd	r22, Y+7	; 0x07
    4288:	78 85       	ldd	r23, Y+8	; 0x08
    428a:	89 85       	ldd	r24, Y+9	; 0x09
    428c:	9a 85       	ldd	r25, Y+10	; 0x0a
    428e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4292:	dc 01       	movw	r26, r24
    4294:	cb 01       	movw	r24, r22
    4296:	9e 83       	std	Y+6, r25	; 0x06
    4298:	8d 83       	std	Y+5, r24	; 0x05
    429a:	8d 81       	ldd	r24, Y+5	; 0x05
    429c:	9e 81       	ldd	r25, Y+6	; 0x06
    429e:	9a 83       	std	Y+2, r25	; 0x02
    42a0:	89 83       	std	Y+1, r24	; 0x01
    42a2:	89 81       	ldd	r24, Y+1	; 0x01
    42a4:	9a 81       	ldd	r25, Y+2	; 0x02
    42a6:	01 97       	sbiw	r24, 0x01	; 1
    42a8:	f1 f7       	brne	.-4      	; 0x42a6 <H_KeyPad_U8_KeyPadRead+0x156>
    42aa:	9a 83       	std	Y+2, r25	; 0x02
    42ac:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
				if(M_Dio_U8_PinRead(Local_u8_ColCounter) == PRESSED)
    42ae:	89 89       	ldd	r24, Y+17	; 0x11
    42b0:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    42b4:	88 23       	and	r24, r24
    42b6:	f9 f4       	brne	.+62     	; 0x42f6 <H_KeyPad_U8_KeyPadRead+0x1a6>
				{
					while(M_Dio_U8_PinRead(Local_u8_ColCounter) == PRESSED);
    42b8:	89 89       	ldd	r24, Y+17	; 0x11
    42ba:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <M_Dio_U8_PinRead>
    42be:	88 23       	and	r24, r24
    42c0:	d9 f3       	breq	.-10     	; 0x42b8 <H_KeyPad_U8_KeyPadRead+0x168>
					Local_u8_Reading = Local_u8_Arr[Local_u8_RowCounter - KEYPAD_R0_PIN][Local_u8_ColCounter -KEYPAD_C0_PIN ];
    42c2:	88 89       	ldd	r24, Y+16	; 0x10
    42c4:	88 2f       	mov	r24, r24
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	9c 01       	movw	r18, r24
    42ca:	28 51       	subi	r18, 0x18	; 24
    42cc:	30 40       	sbci	r19, 0x00	; 0
    42ce:	89 89       	ldd	r24, Y+17	; 0x11
    42d0:	88 2f       	mov	r24, r24
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	ac 01       	movw	r20, r24
    42d6:	4a 52       	subi	r20, 0x2A	; 42
    42d8:	50 40       	sbci	r21, 0x00	; 0
    42da:	22 0f       	add	r18, r18
    42dc:	33 1f       	adc	r19, r19
    42de:	22 0f       	add	r18, r18
    42e0:	33 1f       	adc	r19, r19
    42e2:	ce 01       	movw	r24, r28
    42e4:	01 96       	adiw	r24, 0x01	; 1
    42e6:	82 0f       	add	r24, r18
    42e8:	93 1f       	adc	r25, r19
    42ea:	84 0f       	add	r24, r20
    42ec:	95 1f       	adc	r25, r21
    42ee:	fc 01       	movw	r30, r24
    42f0:	71 96       	adiw	r30, 0x11	; 17
    42f2:	80 81       	ld	r24, Z
    42f4:	8f 87       	std	Y+15, r24	; 0x0f
	u8 Local_u8_RowCounter = 0;
	u8 Local_u8_Reading = 0;
	for(Local_u8_RowCounter = KEYPAD_R0_PIN ; Local_u8_RowCounter <= KEYPAD_R3_PIN ; Local_u8_RowCounter++)
	{
		M_Dio_Void_PinWrite(Local_u8_RowCounter,LOW);
		for(Local_u8_ColCounter = KEYPAD_C0_PIN ; Local_u8_ColCounter <= KEYPAD_C3_PIN ; Local_u8_ColCounter++ )
    42f6:	89 89       	ldd	r24, Y+17	; 0x11
    42f8:	8f 5f       	subi	r24, 0xFF	; 255
    42fa:	89 8b       	std	Y+17, r24	; 0x11
    42fc:	89 89       	ldd	r24, Y+17	; 0x11
    42fe:	8e 32       	cpi	r24, 0x2E	; 46
    4300:	08 f4       	brcc	.+2      	; 0x4304 <H_KeyPad_U8_KeyPadRead+0x1b4>
    4302:	5d cf       	rjmp	.-326    	; 0x41be <H_KeyPad_U8_KeyPadRead+0x6e>
					while(M_Dio_U8_PinRead(Local_u8_ColCounter) == PRESSED);
					Local_u8_Reading = Local_u8_Arr[Local_u8_RowCounter - KEYPAD_R0_PIN][Local_u8_ColCounter -KEYPAD_C0_PIN ];
				}
			}
		}
		M_Dio_Void_PinWrite(Local_u8_RowCounter,HIGH);
    4304:	88 89       	ldd	r24, Y+16	; 0x10
    4306:	61 e0       	ldi	r22, 0x01	; 1
    4308:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
	 	 	 	 	 	 	  {'*','0','#','D'}};
#endif
	u8 Local_u8_ColCounter = 0;
	u8 Local_u8_RowCounter = 0;
	u8 Local_u8_Reading = 0;
	for(Local_u8_RowCounter = KEYPAD_R0_PIN ; Local_u8_RowCounter <= KEYPAD_R3_PIN ; Local_u8_RowCounter++)
    430c:	88 89       	ldd	r24, Y+16	; 0x10
    430e:	8f 5f       	subi	r24, 0xFF	; 255
    4310:	88 8b       	std	Y+16, r24	; 0x10
    4312:	88 89       	ldd	r24, Y+16	; 0x10
    4314:	8c 31       	cpi	r24, 0x1C	; 28
    4316:	08 f4       	brcc	.+2      	; 0x431a <H_KeyPad_U8_KeyPadRead+0x1ca>
    4318:	4b cf       	rjmp	.-362    	; 0x41b0 <H_KeyPad_U8_KeyPadRead+0x60>
				}
			}
		}
		M_Dio_Void_PinWrite(Local_u8_RowCounter,HIGH);
	}
	return Local_u8_Reading;
    431a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    431c:	a6 96       	adiw	r28, 0x26	; 38
    431e:	0f b6       	in	r0, 0x3f	; 63
    4320:	f8 94       	cli
    4322:	de bf       	out	0x3e, r29	; 62
    4324:	0f be       	out	0x3f, r0	; 63
    4326:	cd bf       	out	0x3d, r28	; 61
    4328:	cf 91       	pop	r28
    432a:	df 91       	pop	r29
    432c:	08 95       	ret

0000432e <H_Buzzer_Void_BuzzerInit>:
 */

#include"Buzzer.h"

 void H_Buzzer_Void_BuzzerInit(void)
 {
    432e:	df 93       	push	r29
    4330:	cf 93       	push	r28
    4332:	cd b7       	in	r28, 0x3d	; 61
    4334:	de b7       	in	r29, 0x3e	; 62
	 M_Dio_Void_PinMode(Buzzer_Pin,OUTPUT);
    4336:	83 e2       	ldi	r24, 0x23	; 35
    4338:	61 e0       	ldi	r22, 0x01	; 1
    433a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
 }
    433e:	cf 91       	pop	r28
    4340:	df 91       	pop	r29
    4342:	08 95       	ret

00004344 <H_Buzzer_Void_BuzzerOn>:


 void H_Buzzer_Void_BuzzerOn(void)
 {
    4344:	df 93       	push	r29
    4346:	cf 93       	push	r28
    4348:	cd b7       	in	r28, 0x3d	; 61
    434a:	de b7       	in	r29, 0x3e	; 62
	M_Dio_Void_PinWrite(Buzzer_Pin,HIGH);
    434c:	83 e2       	ldi	r24, 0x23	; 35
    434e:	61 e0       	ldi	r22, 0x01	; 1
    4350:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
 }
    4354:	cf 91       	pop	r28
    4356:	df 91       	pop	r29
    4358:	08 95       	ret

0000435a <H_Buzzer_Void_BuzzerOff>:

 void H_Buzzer_Void_BuzzerOff(void)
 {
    435a:	df 93       	push	r29
    435c:	cf 93       	push	r28
    435e:	cd b7       	in	r28, 0x3d	; 61
    4360:	de b7       	in	r29, 0x3e	; 62
	M_Dio_Void_PinWrite(Buzzer_Pin,LOW);
    4362:	83 e2       	ldi	r24, 0x23	; 35
    4364:	60 e0       	ldi	r22, 0x00	; 0
    4366:	0e 94 88 0b 	call	0x1710	; 0x1710 <M_Dio_Void_PinWrite>
 }
    436a:	cf 91       	pop	r28
    436c:	df 91       	pop	r29
    436e:	08 95       	ret

00004370 <H_Buzzer_Void_BuzzerOnce>:
 void H_Buzzer_Void_BuzzerOnce(void)
 {
    4370:	df 93       	push	r29
    4372:	cf 93       	push	r28
    4374:	cd b7       	in	r28, 0x3d	; 61
    4376:	de b7       	in	r29, 0x3e	; 62
    4378:	2e 97       	sbiw	r28, 0x0e	; 14
    437a:	0f b6       	in	r0, 0x3f	; 63
    437c:	f8 94       	cli
    437e:	de bf       	out	0x3e, r29	; 62
    4380:	0f be       	out	0x3f, r0	; 63
    4382:	cd bf       	out	0x3d, r28	; 61
	 H_Buzzer_Void_BuzzerOn();
    4384:	0e 94 a2 21 	call	0x4344	; 0x4344 <H_Buzzer_Void_BuzzerOn>
    4388:	80 e0       	ldi	r24, 0x00	; 0
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	aa ef       	ldi	r26, 0xFA	; 250
    438e:	b3 e4       	ldi	r27, 0x43	; 67
    4390:	8b 87       	std	Y+11, r24	; 0x0b
    4392:	9c 87       	std	Y+12, r25	; 0x0c
    4394:	ad 87       	std	Y+13, r26	; 0x0d
    4396:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4398:	6b 85       	ldd	r22, Y+11	; 0x0b
    439a:	7c 85       	ldd	r23, Y+12	; 0x0c
    439c:	8d 85       	ldd	r24, Y+13	; 0x0d
    439e:	9e 85       	ldd	r25, Y+14	; 0x0e
    43a0:	20 e0       	ldi	r18, 0x00	; 0
    43a2:	30 e0       	ldi	r19, 0x00	; 0
    43a4:	4a e7       	ldi	r20, 0x7A	; 122
    43a6:	55 e4       	ldi	r21, 0x45	; 69
    43a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ac:	dc 01       	movw	r26, r24
    43ae:	cb 01       	movw	r24, r22
    43b0:	8f 83       	std	Y+7, r24	; 0x07
    43b2:	98 87       	std	Y+8, r25	; 0x08
    43b4:	a9 87       	std	Y+9, r26	; 0x09
    43b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43b8:	6f 81       	ldd	r22, Y+7	; 0x07
    43ba:	78 85       	ldd	r23, Y+8	; 0x08
    43bc:	89 85       	ldd	r24, Y+9	; 0x09
    43be:	9a 85       	ldd	r25, Y+10	; 0x0a
    43c0:	20 e0       	ldi	r18, 0x00	; 0
    43c2:	30 e0       	ldi	r19, 0x00	; 0
    43c4:	40 e8       	ldi	r20, 0x80	; 128
    43c6:	5f e3       	ldi	r21, 0x3F	; 63
    43c8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    43cc:	88 23       	and	r24, r24
    43ce:	2c f4       	brge	.+10     	; 0x43da <H_Buzzer_Void_BuzzerOnce+0x6a>
		__ticks = 1;
    43d0:	81 e0       	ldi	r24, 0x01	; 1
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	9e 83       	std	Y+6, r25	; 0x06
    43d6:	8d 83       	std	Y+5, r24	; 0x05
    43d8:	3f c0       	rjmp	.+126    	; 0x4458 <H_Buzzer_Void_BuzzerOnce+0xe8>
	else if (__tmp > 65535)
    43da:	6f 81       	ldd	r22, Y+7	; 0x07
    43dc:	78 85       	ldd	r23, Y+8	; 0x08
    43de:	89 85       	ldd	r24, Y+9	; 0x09
    43e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e2:	20 e0       	ldi	r18, 0x00	; 0
    43e4:	3f ef       	ldi	r19, 0xFF	; 255
    43e6:	4f e7       	ldi	r20, 0x7F	; 127
    43e8:	57 e4       	ldi	r21, 0x47	; 71
    43ea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    43ee:	18 16       	cp	r1, r24
    43f0:	4c f5       	brge	.+82     	; 0x4444 <H_Buzzer_Void_BuzzerOnce+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    43f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    43f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    43f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    43fa:	20 e0       	ldi	r18, 0x00	; 0
    43fc:	30 e0       	ldi	r19, 0x00	; 0
    43fe:	40 e2       	ldi	r20, 0x20	; 32
    4400:	51 e4       	ldi	r21, 0x41	; 65
    4402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4406:	dc 01       	movw	r26, r24
    4408:	cb 01       	movw	r24, r22
    440a:	bc 01       	movw	r22, r24
    440c:	cd 01       	movw	r24, r26
    440e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4412:	dc 01       	movw	r26, r24
    4414:	cb 01       	movw	r24, r22
    4416:	9e 83       	std	Y+6, r25	; 0x06
    4418:	8d 83       	std	Y+5, r24	; 0x05
    441a:	0f c0       	rjmp	.+30     	; 0x443a <H_Buzzer_Void_BuzzerOnce+0xca>
    441c:	80 e9       	ldi	r24, 0x90	; 144
    441e:	91 e0       	ldi	r25, 0x01	; 1
    4420:	9c 83       	std	Y+4, r25	; 0x04
    4422:	8b 83       	std	Y+3, r24	; 0x03
    4424:	8b 81       	ldd	r24, Y+3	; 0x03
    4426:	9c 81       	ldd	r25, Y+4	; 0x04
    4428:	01 97       	sbiw	r24, 0x01	; 1
    442a:	f1 f7       	brne	.-4      	; 0x4428 <H_Buzzer_Void_BuzzerOnce+0xb8>
    442c:	9c 83       	std	Y+4, r25	; 0x04
    442e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4430:	8d 81       	ldd	r24, Y+5	; 0x05
    4432:	9e 81       	ldd	r25, Y+6	; 0x06
    4434:	01 97       	sbiw	r24, 0x01	; 1
    4436:	9e 83       	std	Y+6, r25	; 0x06
    4438:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    443a:	8d 81       	ldd	r24, Y+5	; 0x05
    443c:	9e 81       	ldd	r25, Y+6	; 0x06
    443e:	00 97       	sbiw	r24, 0x00	; 0
    4440:	69 f7       	brne	.-38     	; 0x441c <H_Buzzer_Void_BuzzerOnce+0xac>
    4442:	14 c0       	rjmp	.+40     	; 0x446c <H_Buzzer_Void_BuzzerOnce+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4444:	6f 81       	ldd	r22, Y+7	; 0x07
    4446:	78 85       	ldd	r23, Y+8	; 0x08
    4448:	89 85       	ldd	r24, Y+9	; 0x09
    444a:	9a 85       	ldd	r25, Y+10	; 0x0a
    444c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4450:	dc 01       	movw	r26, r24
    4452:	cb 01       	movw	r24, r22
    4454:	9e 83       	std	Y+6, r25	; 0x06
    4456:	8d 83       	std	Y+5, r24	; 0x05
    4458:	8d 81       	ldd	r24, Y+5	; 0x05
    445a:	9e 81       	ldd	r25, Y+6	; 0x06
    445c:	9a 83       	std	Y+2, r25	; 0x02
    445e:	89 83       	std	Y+1, r24	; 0x01
    4460:	89 81       	ldd	r24, Y+1	; 0x01
    4462:	9a 81       	ldd	r25, Y+2	; 0x02
    4464:	01 97       	sbiw	r24, 0x01	; 1
    4466:	f1 f7       	brne	.-4      	; 0x4464 <H_Buzzer_Void_BuzzerOnce+0xf4>
    4468:	9a 83       	std	Y+2, r25	; 0x02
    446a:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    446c:	0e 94 ad 21 	call	0x435a	; 0x435a <H_Buzzer_Void_BuzzerOff>
 }
    4470:	2e 96       	adiw	r28, 0x0e	; 14
    4472:	0f b6       	in	r0, 0x3f	; 63
    4474:	f8 94       	cli
    4476:	de bf       	out	0x3e, r29	; 62
    4478:	0f be       	out	0x3f, r0	; 63
    447a:	cd bf       	out	0x3d, r28	; 61
    447c:	cf 91       	pop	r28
    447e:	df 91       	pop	r29
    4480:	08 95       	ret

00004482 <H_Buzzer_Void_BuzzerTwice>:
 void H_Buzzer_Void_BuzzerTwice(void)
 {
    4482:	df 93       	push	r29
    4484:	cf 93       	push	r28
    4486:	cd b7       	in	r28, 0x3d	; 61
    4488:	de b7       	in	r29, 0x3e	; 62
    448a:	aa 97       	sbiw	r28, 0x2a	; 42
    448c:	0f b6       	in	r0, 0x3f	; 63
    448e:	f8 94       	cli
    4490:	de bf       	out	0x3e, r29	; 62
    4492:	0f be       	out	0x3f, r0	; 63
    4494:	cd bf       	out	0x3d, r28	; 61
	 H_Buzzer_Void_BuzzerOn();
    4496:	0e 94 a2 21 	call	0x4344	; 0x4344 <H_Buzzer_Void_BuzzerOn>
    449a:	80 e0       	ldi	r24, 0x00	; 0
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	aa ef       	ldi	r26, 0xFA	; 250
    44a0:	b3 e4       	ldi	r27, 0x43	; 67
    44a2:	8f a3       	std	Y+39, r24	; 0x27
    44a4:	98 a7       	std	Y+40, r25	; 0x28
    44a6:	a9 a7       	std	Y+41, r26	; 0x29
    44a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44aa:	6f a1       	ldd	r22, Y+39	; 0x27
    44ac:	78 a5       	ldd	r23, Y+40	; 0x28
    44ae:	89 a5       	ldd	r24, Y+41	; 0x29
    44b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    44b2:	20 e0       	ldi	r18, 0x00	; 0
    44b4:	30 e0       	ldi	r19, 0x00	; 0
    44b6:	4a e7       	ldi	r20, 0x7A	; 122
    44b8:	55 e4       	ldi	r21, 0x45	; 69
    44ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44be:	dc 01       	movw	r26, r24
    44c0:	cb 01       	movw	r24, r22
    44c2:	8b a3       	std	Y+35, r24	; 0x23
    44c4:	9c a3       	std	Y+36, r25	; 0x24
    44c6:	ad a3       	std	Y+37, r26	; 0x25
    44c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44ca:	6b a1       	ldd	r22, Y+35	; 0x23
    44cc:	7c a1       	ldd	r23, Y+36	; 0x24
    44ce:	8d a1       	ldd	r24, Y+37	; 0x25
    44d0:	9e a1       	ldd	r25, Y+38	; 0x26
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	40 e8       	ldi	r20, 0x80	; 128
    44d8:	5f e3       	ldi	r21, 0x3F	; 63
    44da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    44de:	88 23       	and	r24, r24
    44e0:	2c f4       	brge	.+10     	; 0x44ec <H_Buzzer_Void_BuzzerTwice+0x6a>
		__ticks = 1;
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	9a a3       	std	Y+34, r25	; 0x22
    44e8:	89 a3       	std	Y+33, r24	; 0x21
    44ea:	3f c0       	rjmp	.+126    	; 0x456a <H_Buzzer_Void_BuzzerTwice+0xe8>
	else if (__tmp > 65535)
    44ec:	6b a1       	ldd	r22, Y+35	; 0x23
    44ee:	7c a1       	ldd	r23, Y+36	; 0x24
    44f0:	8d a1       	ldd	r24, Y+37	; 0x25
    44f2:	9e a1       	ldd	r25, Y+38	; 0x26
    44f4:	20 e0       	ldi	r18, 0x00	; 0
    44f6:	3f ef       	ldi	r19, 0xFF	; 255
    44f8:	4f e7       	ldi	r20, 0x7F	; 127
    44fa:	57 e4       	ldi	r21, 0x47	; 71
    44fc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4500:	18 16       	cp	r1, r24
    4502:	4c f5       	brge	.+82     	; 0x4556 <H_Buzzer_Void_BuzzerTwice+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4504:	6f a1       	ldd	r22, Y+39	; 0x27
    4506:	78 a5       	ldd	r23, Y+40	; 0x28
    4508:	89 a5       	ldd	r24, Y+41	; 0x29
    450a:	9a a5       	ldd	r25, Y+42	; 0x2a
    450c:	20 e0       	ldi	r18, 0x00	; 0
    450e:	30 e0       	ldi	r19, 0x00	; 0
    4510:	40 e2       	ldi	r20, 0x20	; 32
    4512:	51 e4       	ldi	r21, 0x41	; 65
    4514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4518:	dc 01       	movw	r26, r24
    451a:	cb 01       	movw	r24, r22
    451c:	bc 01       	movw	r22, r24
    451e:	cd 01       	movw	r24, r26
    4520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4524:	dc 01       	movw	r26, r24
    4526:	cb 01       	movw	r24, r22
    4528:	9a a3       	std	Y+34, r25	; 0x22
    452a:	89 a3       	std	Y+33, r24	; 0x21
    452c:	0f c0       	rjmp	.+30     	; 0x454c <H_Buzzer_Void_BuzzerTwice+0xca>
    452e:	80 e9       	ldi	r24, 0x90	; 144
    4530:	91 e0       	ldi	r25, 0x01	; 1
    4532:	98 a3       	std	Y+32, r25	; 0x20
    4534:	8f 8f       	std	Y+31, r24	; 0x1f
    4536:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4538:	98 a1       	ldd	r25, Y+32	; 0x20
    453a:	01 97       	sbiw	r24, 0x01	; 1
    453c:	f1 f7       	brne	.-4      	; 0x453a <H_Buzzer_Void_BuzzerTwice+0xb8>
    453e:	98 a3       	std	Y+32, r25	; 0x20
    4540:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4542:	89 a1       	ldd	r24, Y+33	; 0x21
    4544:	9a a1       	ldd	r25, Y+34	; 0x22
    4546:	01 97       	sbiw	r24, 0x01	; 1
    4548:	9a a3       	std	Y+34, r25	; 0x22
    454a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    454c:	89 a1       	ldd	r24, Y+33	; 0x21
    454e:	9a a1       	ldd	r25, Y+34	; 0x22
    4550:	00 97       	sbiw	r24, 0x00	; 0
    4552:	69 f7       	brne	.-38     	; 0x452e <H_Buzzer_Void_BuzzerTwice+0xac>
    4554:	14 c0       	rjmp	.+40     	; 0x457e <H_Buzzer_Void_BuzzerTwice+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4556:	6b a1       	ldd	r22, Y+35	; 0x23
    4558:	7c a1       	ldd	r23, Y+36	; 0x24
    455a:	8d a1       	ldd	r24, Y+37	; 0x25
    455c:	9e a1       	ldd	r25, Y+38	; 0x26
    455e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4562:	dc 01       	movw	r26, r24
    4564:	cb 01       	movw	r24, r22
    4566:	9a a3       	std	Y+34, r25	; 0x22
    4568:	89 a3       	std	Y+33, r24	; 0x21
    456a:	89 a1       	ldd	r24, Y+33	; 0x21
    456c:	9a a1       	ldd	r25, Y+34	; 0x22
    456e:	9e 8f       	std	Y+30, r25	; 0x1e
    4570:	8d 8f       	std	Y+29, r24	; 0x1d
    4572:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4574:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4576:	01 97       	sbiw	r24, 0x01	; 1
    4578:	f1 f7       	brne	.-4      	; 0x4576 <H_Buzzer_Void_BuzzerTwice+0xf4>
    457a:	9e 8f       	std	Y+30, r25	; 0x1e
    457c:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    457e:	0e 94 ad 21 	call	0x435a	; 0x435a <H_Buzzer_Void_BuzzerOff>
    4582:	80 e0       	ldi	r24, 0x00	; 0
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	aa e7       	ldi	r26, 0x7A	; 122
    4588:	b3 e4       	ldi	r27, 0x43	; 67
    458a:	89 8f       	std	Y+25, r24	; 0x19
    458c:	9a 8f       	std	Y+26, r25	; 0x1a
    458e:	ab 8f       	std	Y+27, r26	; 0x1b
    4590:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4592:	69 8d       	ldd	r22, Y+25	; 0x19
    4594:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4596:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4598:	9c 8d       	ldd	r25, Y+28	; 0x1c
    459a:	20 e0       	ldi	r18, 0x00	; 0
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	4a e7       	ldi	r20, 0x7A	; 122
    45a0:	55 e4       	ldi	r21, 0x45	; 69
    45a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a6:	dc 01       	movw	r26, r24
    45a8:	cb 01       	movw	r24, r22
    45aa:	8d 8b       	std	Y+21, r24	; 0x15
    45ac:	9e 8b       	std	Y+22, r25	; 0x16
    45ae:	af 8b       	std	Y+23, r26	; 0x17
    45b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45b2:	6d 89       	ldd	r22, Y+21	; 0x15
    45b4:	7e 89       	ldd	r23, Y+22	; 0x16
    45b6:	8f 89       	ldd	r24, Y+23	; 0x17
    45b8:	98 8d       	ldd	r25, Y+24	; 0x18
    45ba:	20 e0       	ldi	r18, 0x00	; 0
    45bc:	30 e0       	ldi	r19, 0x00	; 0
    45be:	40 e8       	ldi	r20, 0x80	; 128
    45c0:	5f e3       	ldi	r21, 0x3F	; 63
    45c2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    45c6:	88 23       	and	r24, r24
    45c8:	2c f4       	brge	.+10     	; 0x45d4 <H_Buzzer_Void_BuzzerTwice+0x152>
		__ticks = 1;
    45ca:	81 e0       	ldi	r24, 0x01	; 1
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	9c 8b       	std	Y+20, r25	; 0x14
    45d0:	8b 8b       	std	Y+19, r24	; 0x13
    45d2:	3f c0       	rjmp	.+126    	; 0x4652 <H_Buzzer_Void_BuzzerTwice+0x1d0>
	else if (__tmp > 65535)
    45d4:	6d 89       	ldd	r22, Y+21	; 0x15
    45d6:	7e 89       	ldd	r23, Y+22	; 0x16
    45d8:	8f 89       	ldd	r24, Y+23	; 0x17
    45da:	98 8d       	ldd	r25, Y+24	; 0x18
    45dc:	20 e0       	ldi	r18, 0x00	; 0
    45de:	3f ef       	ldi	r19, 0xFF	; 255
    45e0:	4f e7       	ldi	r20, 0x7F	; 127
    45e2:	57 e4       	ldi	r21, 0x47	; 71
    45e4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    45e8:	18 16       	cp	r1, r24
    45ea:	4c f5       	brge	.+82     	; 0x463e <H_Buzzer_Void_BuzzerTwice+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ec:	69 8d       	ldd	r22, Y+25	; 0x19
    45ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45f4:	20 e0       	ldi	r18, 0x00	; 0
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	40 e2       	ldi	r20, 0x20	; 32
    45fa:	51 e4       	ldi	r21, 0x41	; 65
    45fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	bc 01       	movw	r22, r24
    4606:	cd 01       	movw	r24, r26
    4608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    460c:	dc 01       	movw	r26, r24
    460e:	cb 01       	movw	r24, r22
    4610:	9c 8b       	std	Y+20, r25	; 0x14
    4612:	8b 8b       	std	Y+19, r24	; 0x13
    4614:	0f c0       	rjmp	.+30     	; 0x4634 <H_Buzzer_Void_BuzzerTwice+0x1b2>
    4616:	80 e9       	ldi	r24, 0x90	; 144
    4618:	91 e0       	ldi	r25, 0x01	; 1
    461a:	9a 8b       	std	Y+18, r25	; 0x12
    461c:	89 8b       	std	Y+17, r24	; 0x11
    461e:	89 89       	ldd	r24, Y+17	; 0x11
    4620:	9a 89       	ldd	r25, Y+18	; 0x12
    4622:	01 97       	sbiw	r24, 0x01	; 1
    4624:	f1 f7       	brne	.-4      	; 0x4622 <H_Buzzer_Void_BuzzerTwice+0x1a0>
    4626:	9a 8b       	std	Y+18, r25	; 0x12
    4628:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    462a:	8b 89       	ldd	r24, Y+19	; 0x13
    462c:	9c 89       	ldd	r25, Y+20	; 0x14
    462e:	01 97       	sbiw	r24, 0x01	; 1
    4630:	9c 8b       	std	Y+20, r25	; 0x14
    4632:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4634:	8b 89       	ldd	r24, Y+19	; 0x13
    4636:	9c 89       	ldd	r25, Y+20	; 0x14
    4638:	00 97       	sbiw	r24, 0x00	; 0
    463a:	69 f7       	brne	.-38     	; 0x4616 <H_Buzzer_Void_BuzzerTwice+0x194>
    463c:	14 c0       	rjmp	.+40     	; 0x4666 <H_Buzzer_Void_BuzzerTwice+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    463e:	6d 89       	ldd	r22, Y+21	; 0x15
    4640:	7e 89       	ldd	r23, Y+22	; 0x16
    4642:	8f 89       	ldd	r24, Y+23	; 0x17
    4644:	98 8d       	ldd	r25, Y+24	; 0x18
    4646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    464a:	dc 01       	movw	r26, r24
    464c:	cb 01       	movw	r24, r22
    464e:	9c 8b       	std	Y+20, r25	; 0x14
    4650:	8b 8b       	std	Y+19, r24	; 0x13
    4652:	8b 89       	ldd	r24, Y+19	; 0x13
    4654:	9c 89       	ldd	r25, Y+20	; 0x14
    4656:	98 8b       	std	Y+16, r25	; 0x10
    4658:	8f 87       	std	Y+15, r24	; 0x0f
    465a:	8f 85       	ldd	r24, Y+15	; 0x0f
    465c:	98 89       	ldd	r25, Y+16	; 0x10
    465e:	01 97       	sbiw	r24, 0x01	; 1
    4660:	f1 f7       	brne	.-4      	; 0x465e <H_Buzzer_Void_BuzzerTwice+0x1dc>
    4662:	98 8b       	std	Y+16, r25	; 0x10
    4664:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(BUZZER_OFFDELAY_TIME);
	 H_Buzzer_Void_BuzzerOn();
    4666:	0e 94 a2 21 	call	0x4344	; 0x4344 <H_Buzzer_Void_BuzzerOn>
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	aa ef       	ldi	r26, 0xFA	; 250
    4670:	b3 e4       	ldi	r27, 0x43	; 67
    4672:	8b 87       	std	Y+11, r24	; 0x0b
    4674:	9c 87       	std	Y+12, r25	; 0x0c
    4676:	ad 87       	std	Y+13, r26	; 0x0d
    4678:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    467a:	6b 85       	ldd	r22, Y+11	; 0x0b
    467c:	7c 85       	ldd	r23, Y+12	; 0x0c
    467e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4680:	9e 85       	ldd	r25, Y+14	; 0x0e
    4682:	20 e0       	ldi	r18, 0x00	; 0
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	4a e7       	ldi	r20, 0x7A	; 122
    4688:	55 e4       	ldi	r21, 0x45	; 69
    468a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    468e:	dc 01       	movw	r26, r24
    4690:	cb 01       	movw	r24, r22
    4692:	8f 83       	std	Y+7, r24	; 0x07
    4694:	98 87       	std	Y+8, r25	; 0x08
    4696:	a9 87       	std	Y+9, r26	; 0x09
    4698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    469a:	6f 81       	ldd	r22, Y+7	; 0x07
    469c:	78 85       	ldd	r23, Y+8	; 0x08
    469e:	89 85       	ldd	r24, Y+9	; 0x09
    46a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    46a2:	20 e0       	ldi	r18, 0x00	; 0
    46a4:	30 e0       	ldi	r19, 0x00	; 0
    46a6:	40 e8       	ldi	r20, 0x80	; 128
    46a8:	5f e3       	ldi	r21, 0x3F	; 63
    46aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    46ae:	88 23       	and	r24, r24
    46b0:	2c f4       	brge	.+10     	; 0x46bc <H_Buzzer_Void_BuzzerTwice+0x23a>
		__ticks = 1;
    46b2:	81 e0       	ldi	r24, 0x01	; 1
    46b4:	90 e0       	ldi	r25, 0x00	; 0
    46b6:	9e 83       	std	Y+6, r25	; 0x06
    46b8:	8d 83       	std	Y+5, r24	; 0x05
    46ba:	3f c0       	rjmp	.+126    	; 0x473a <H_Buzzer_Void_BuzzerTwice+0x2b8>
	else if (__tmp > 65535)
    46bc:	6f 81       	ldd	r22, Y+7	; 0x07
    46be:	78 85       	ldd	r23, Y+8	; 0x08
    46c0:	89 85       	ldd	r24, Y+9	; 0x09
    46c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c4:	20 e0       	ldi	r18, 0x00	; 0
    46c6:	3f ef       	ldi	r19, 0xFF	; 255
    46c8:	4f e7       	ldi	r20, 0x7F	; 127
    46ca:	57 e4       	ldi	r21, 0x47	; 71
    46cc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    46d0:	18 16       	cp	r1, r24
    46d2:	4c f5       	brge	.+82     	; 0x4726 <H_Buzzer_Void_BuzzerTwice+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    46d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    46d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    46da:	9e 85       	ldd	r25, Y+14	; 0x0e
    46dc:	20 e0       	ldi	r18, 0x00	; 0
    46de:	30 e0       	ldi	r19, 0x00	; 0
    46e0:	40 e2       	ldi	r20, 0x20	; 32
    46e2:	51 e4       	ldi	r21, 0x41	; 65
    46e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46e8:	dc 01       	movw	r26, r24
    46ea:	cb 01       	movw	r24, r22
    46ec:	bc 01       	movw	r22, r24
    46ee:	cd 01       	movw	r24, r26
    46f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46f4:	dc 01       	movw	r26, r24
    46f6:	cb 01       	movw	r24, r22
    46f8:	9e 83       	std	Y+6, r25	; 0x06
    46fa:	8d 83       	std	Y+5, r24	; 0x05
    46fc:	0f c0       	rjmp	.+30     	; 0x471c <H_Buzzer_Void_BuzzerTwice+0x29a>
    46fe:	80 e9       	ldi	r24, 0x90	; 144
    4700:	91 e0       	ldi	r25, 0x01	; 1
    4702:	9c 83       	std	Y+4, r25	; 0x04
    4704:	8b 83       	std	Y+3, r24	; 0x03
    4706:	8b 81       	ldd	r24, Y+3	; 0x03
    4708:	9c 81       	ldd	r25, Y+4	; 0x04
    470a:	01 97       	sbiw	r24, 0x01	; 1
    470c:	f1 f7       	brne	.-4      	; 0x470a <H_Buzzer_Void_BuzzerTwice+0x288>
    470e:	9c 83       	std	Y+4, r25	; 0x04
    4710:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4712:	8d 81       	ldd	r24, Y+5	; 0x05
    4714:	9e 81       	ldd	r25, Y+6	; 0x06
    4716:	01 97       	sbiw	r24, 0x01	; 1
    4718:	9e 83       	std	Y+6, r25	; 0x06
    471a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    471c:	8d 81       	ldd	r24, Y+5	; 0x05
    471e:	9e 81       	ldd	r25, Y+6	; 0x06
    4720:	00 97       	sbiw	r24, 0x00	; 0
    4722:	69 f7       	brne	.-38     	; 0x46fe <H_Buzzer_Void_BuzzerTwice+0x27c>
    4724:	14 c0       	rjmp	.+40     	; 0x474e <H_Buzzer_Void_BuzzerTwice+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4726:	6f 81       	ldd	r22, Y+7	; 0x07
    4728:	78 85       	ldd	r23, Y+8	; 0x08
    472a:	89 85       	ldd	r24, Y+9	; 0x09
    472c:	9a 85       	ldd	r25, Y+10	; 0x0a
    472e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4732:	dc 01       	movw	r26, r24
    4734:	cb 01       	movw	r24, r22
    4736:	9e 83       	std	Y+6, r25	; 0x06
    4738:	8d 83       	std	Y+5, r24	; 0x05
    473a:	8d 81       	ldd	r24, Y+5	; 0x05
    473c:	9e 81       	ldd	r25, Y+6	; 0x06
    473e:	9a 83       	std	Y+2, r25	; 0x02
    4740:	89 83       	std	Y+1, r24	; 0x01
    4742:	89 81       	ldd	r24, Y+1	; 0x01
    4744:	9a 81       	ldd	r25, Y+2	; 0x02
    4746:	01 97       	sbiw	r24, 0x01	; 1
    4748:	f1 f7       	brne	.-4      	; 0x4746 <H_Buzzer_Void_BuzzerTwice+0x2c4>
    474a:	9a 83       	std	Y+2, r25	; 0x02
    474c:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    474e:	0e 94 ad 21 	call	0x435a	; 0x435a <H_Buzzer_Void_BuzzerOff>
 }
    4752:	aa 96       	adiw	r28, 0x2a	; 42
    4754:	0f b6       	in	r0, 0x3f	; 63
    4756:	f8 94       	cli
    4758:	de bf       	out	0x3e, r29	; 62
    475a:	0f be       	out	0x3f, r0	; 63
    475c:	cd bf       	out	0x3d, r28	; 61
    475e:	cf 91       	pop	r28
    4760:	df 91       	pop	r29
    4762:	08 95       	ret

00004764 <H_Buzzer_Void_BuzzerTriple>:
 void H_Buzzer_Void_BuzzerTriple(void)
 {
    4764:	0f 93       	push	r16
    4766:	1f 93       	push	r17
    4768:	df 93       	push	r29
    476a:	cf 93       	push	r28
    476c:	cd b7       	in	r28, 0x3d	; 61
    476e:	de b7       	in	r29, 0x3e	; 62
    4770:	c6 54       	subi	r28, 0x46	; 70
    4772:	d0 40       	sbci	r29, 0x00	; 0
    4774:	0f b6       	in	r0, 0x3f	; 63
    4776:	f8 94       	cli
    4778:	de bf       	out	0x3e, r29	; 62
    477a:	0f be       	out	0x3f, r0	; 63
    477c:	cd bf       	out	0x3d, r28	; 61
	 H_Buzzer_Void_BuzzerOn();
    477e:	0e 94 a2 21 	call	0x4344	; 0x4344 <H_Buzzer_Void_BuzzerOn>
    4782:	fe 01       	movw	r30, r28
    4784:	ed 5b       	subi	r30, 0xBD	; 189
    4786:	ff 4f       	sbci	r31, 0xFF	; 255
    4788:	80 e0       	ldi	r24, 0x00	; 0
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	aa ef       	ldi	r26, 0xFA	; 250
    478e:	b3 e4       	ldi	r27, 0x43	; 67
    4790:	80 83       	st	Z, r24
    4792:	91 83       	std	Z+1, r25	; 0x01
    4794:	a2 83       	std	Z+2, r26	; 0x02
    4796:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4798:	8e 01       	movw	r16, r28
    479a:	01 5c       	subi	r16, 0xC1	; 193
    479c:	1f 4f       	sbci	r17, 0xFF	; 255
    479e:	fe 01       	movw	r30, r28
    47a0:	ed 5b       	subi	r30, 0xBD	; 189
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	60 81       	ld	r22, Z
    47a6:	71 81       	ldd	r23, Z+1	; 0x01
    47a8:	82 81       	ldd	r24, Z+2	; 0x02
    47aa:	93 81       	ldd	r25, Z+3	; 0x03
    47ac:	20 e0       	ldi	r18, 0x00	; 0
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	4a e7       	ldi	r20, 0x7A	; 122
    47b2:	55 e4       	ldi	r21, 0x45	; 69
    47b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b8:	dc 01       	movw	r26, r24
    47ba:	cb 01       	movw	r24, r22
    47bc:	f8 01       	movw	r30, r16
    47be:	80 83       	st	Z, r24
    47c0:	91 83       	std	Z+1, r25	; 0x01
    47c2:	a2 83       	std	Z+2, r26	; 0x02
    47c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47c6:	fe 01       	movw	r30, r28
    47c8:	ff 96       	adiw	r30, 0x3f	; 63
    47ca:	60 81       	ld	r22, Z
    47cc:	71 81       	ldd	r23, Z+1	; 0x01
    47ce:	82 81       	ldd	r24, Z+2	; 0x02
    47d0:	93 81       	ldd	r25, Z+3	; 0x03
    47d2:	20 e0       	ldi	r18, 0x00	; 0
    47d4:	30 e0       	ldi	r19, 0x00	; 0
    47d6:	40 e8       	ldi	r20, 0x80	; 128
    47d8:	5f e3       	ldi	r21, 0x3F	; 63
    47da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    47de:	88 23       	and	r24, r24
    47e0:	2c f4       	brge	.+10     	; 0x47ec <H_Buzzer_Void_BuzzerTriple+0x88>
		__ticks = 1;
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	9e af       	std	Y+62, r25	; 0x3e
    47e8:	8d af       	std	Y+61, r24	; 0x3d
    47ea:	46 c0       	rjmp	.+140    	; 0x4878 <H_Buzzer_Void_BuzzerTriple+0x114>
	else if (__tmp > 65535)
    47ec:	fe 01       	movw	r30, r28
    47ee:	ff 96       	adiw	r30, 0x3f	; 63
    47f0:	60 81       	ld	r22, Z
    47f2:	71 81       	ldd	r23, Z+1	; 0x01
    47f4:	82 81       	ldd	r24, Z+2	; 0x02
    47f6:	93 81       	ldd	r25, Z+3	; 0x03
    47f8:	20 e0       	ldi	r18, 0x00	; 0
    47fa:	3f ef       	ldi	r19, 0xFF	; 255
    47fc:	4f e7       	ldi	r20, 0x7F	; 127
    47fe:	57 e4       	ldi	r21, 0x47	; 71
    4800:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4804:	18 16       	cp	r1, r24
    4806:	64 f5       	brge	.+88     	; 0x4860 <H_Buzzer_Void_BuzzerTriple+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4808:	fe 01       	movw	r30, r28
    480a:	ed 5b       	subi	r30, 0xBD	; 189
    480c:	ff 4f       	sbci	r31, 0xFF	; 255
    480e:	60 81       	ld	r22, Z
    4810:	71 81       	ldd	r23, Z+1	; 0x01
    4812:	82 81       	ldd	r24, Z+2	; 0x02
    4814:	93 81       	ldd	r25, Z+3	; 0x03
    4816:	20 e0       	ldi	r18, 0x00	; 0
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	40 e2       	ldi	r20, 0x20	; 32
    481c:	51 e4       	ldi	r21, 0x41	; 65
    481e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4822:	dc 01       	movw	r26, r24
    4824:	cb 01       	movw	r24, r22
    4826:	bc 01       	movw	r22, r24
    4828:	cd 01       	movw	r24, r26
    482a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    482e:	dc 01       	movw	r26, r24
    4830:	cb 01       	movw	r24, r22
    4832:	9e af       	std	Y+62, r25	; 0x3e
    4834:	8d af       	std	Y+61, r24	; 0x3d
    4836:	0f c0       	rjmp	.+30     	; 0x4856 <H_Buzzer_Void_BuzzerTriple+0xf2>
    4838:	80 e9       	ldi	r24, 0x90	; 144
    483a:	91 e0       	ldi	r25, 0x01	; 1
    483c:	9c af       	std	Y+60, r25	; 0x3c
    483e:	8b af       	std	Y+59, r24	; 0x3b
    4840:	8b ad       	ldd	r24, Y+59	; 0x3b
    4842:	9c ad       	ldd	r25, Y+60	; 0x3c
    4844:	01 97       	sbiw	r24, 0x01	; 1
    4846:	f1 f7       	brne	.-4      	; 0x4844 <H_Buzzer_Void_BuzzerTriple+0xe0>
    4848:	9c af       	std	Y+60, r25	; 0x3c
    484a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    484c:	8d ad       	ldd	r24, Y+61	; 0x3d
    484e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4850:	01 97       	sbiw	r24, 0x01	; 1
    4852:	9e af       	std	Y+62, r25	; 0x3e
    4854:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4856:	8d ad       	ldd	r24, Y+61	; 0x3d
    4858:	9e ad       	ldd	r25, Y+62	; 0x3e
    485a:	00 97       	sbiw	r24, 0x00	; 0
    485c:	69 f7       	brne	.-38     	; 0x4838 <H_Buzzer_Void_BuzzerTriple+0xd4>
    485e:	16 c0       	rjmp	.+44     	; 0x488c <H_Buzzer_Void_BuzzerTriple+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4860:	fe 01       	movw	r30, r28
    4862:	ff 96       	adiw	r30, 0x3f	; 63
    4864:	60 81       	ld	r22, Z
    4866:	71 81       	ldd	r23, Z+1	; 0x01
    4868:	82 81       	ldd	r24, Z+2	; 0x02
    486a:	93 81       	ldd	r25, Z+3	; 0x03
    486c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4870:	dc 01       	movw	r26, r24
    4872:	cb 01       	movw	r24, r22
    4874:	9e af       	std	Y+62, r25	; 0x3e
    4876:	8d af       	std	Y+61, r24	; 0x3d
    4878:	8d ad       	ldd	r24, Y+61	; 0x3d
    487a:	9e ad       	ldd	r25, Y+62	; 0x3e
    487c:	9a af       	std	Y+58, r25	; 0x3a
    487e:	89 af       	std	Y+57, r24	; 0x39
    4880:	89 ad       	ldd	r24, Y+57	; 0x39
    4882:	9a ad       	ldd	r25, Y+58	; 0x3a
    4884:	01 97       	sbiw	r24, 0x01	; 1
    4886:	f1 f7       	brne	.-4      	; 0x4884 <H_Buzzer_Void_BuzzerTriple+0x120>
    4888:	9a af       	std	Y+58, r25	; 0x3a
    488a:	89 af       	std	Y+57, r24	; 0x39
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    488c:	0e 94 ad 21 	call	0x435a	; 0x435a <H_Buzzer_Void_BuzzerOff>
    4890:	80 e0       	ldi	r24, 0x00	; 0
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	aa e7       	ldi	r26, 0x7A	; 122
    4896:	b3 e4       	ldi	r27, 0x43	; 67
    4898:	8d ab       	std	Y+53, r24	; 0x35
    489a:	9e ab       	std	Y+54, r25	; 0x36
    489c:	af ab       	std	Y+55, r26	; 0x37
    489e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48a0:	6d a9       	ldd	r22, Y+53	; 0x35
    48a2:	7e a9       	ldd	r23, Y+54	; 0x36
    48a4:	8f a9       	ldd	r24, Y+55	; 0x37
    48a6:	98 ad       	ldd	r25, Y+56	; 0x38
    48a8:	20 e0       	ldi	r18, 0x00	; 0
    48aa:	30 e0       	ldi	r19, 0x00	; 0
    48ac:	4a e7       	ldi	r20, 0x7A	; 122
    48ae:	55 e4       	ldi	r21, 0x45	; 69
    48b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b4:	dc 01       	movw	r26, r24
    48b6:	cb 01       	movw	r24, r22
    48b8:	89 ab       	std	Y+49, r24	; 0x31
    48ba:	9a ab       	std	Y+50, r25	; 0x32
    48bc:	ab ab       	std	Y+51, r26	; 0x33
    48be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    48c0:	69 a9       	ldd	r22, Y+49	; 0x31
    48c2:	7a a9       	ldd	r23, Y+50	; 0x32
    48c4:	8b a9       	ldd	r24, Y+51	; 0x33
    48c6:	9c a9       	ldd	r25, Y+52	; 0x34
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	40 e8       	ldi	r20, 0x80	; 128
    48ce:	5f e3       	ldi	r21, 0x3F	; 63
    48d0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    48d4:	88 23       	and	r24, r24
    48d6:	2c f4       	brge	.+10     	; 0x48e2 <H_Buzzer_Void_BuzzerTriple+0x17e>
		__ticks = 1;
    48d8:	81 e0       	ldi	r24, 0x01	; 1
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	98 ab       	std	Y+48, r25	; 0x30
    48de:	8f a7       	std	Y+47, r24	; 0x2f
    48e0:	3f c0       	rjmp	.+126    	; 0x4960 <H_Buzzer_Void_BuzzerTriple+0x1fc>
	else if (__tmp > 65535)
    48e2:	69 a9       	ldd	r22, Y+49	; 0x31
    48e4:	7a a9       	ldd	r23, Y+50	; 0x32
    48e6:	8b a9       	ldd	r24, Y+51	; 0x33
    48e8:	9c a9       	ldd	r25, Y+52	; 0x34
    48ea:	20 e0       	ldi	r18, 0x00	; 0
    48ec:	3f ef       	ldi	r19, 0xFF	; 255
    48ee:	4f e7       	ldi	r20, 0x7F	; 127
    48f0:	57 e4       	ldi	r21, 0x47	; 71
    48f2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    48f6:	18 16       	cp	r1, r24
    48f8:	4c f5       	brge	.+82     	; 0x494c <H_Buzzer_Void_BuzzerTriple+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48fa:	6d a9       	ldd	r22, Y+53	; 0x35
    48fc:	7e a9       	ldd	r23, Y+54	; 0x36
    48fe:	8f a9       	ldd	r24, Y+55	; 0x37
    4900:	98 ad       	ldd	r25, Y+56	; 0x38
    4902:	20 e0       	ldi	r18, 0x00	; 0
    4904:	30 e0       	ldi	r19, 0x00	; 0
    4906:	40 e2       	ldi	r20, 0x20	; 32
    4908:	51 e4       	ldi	r21, 0x41	; 65
    490a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    490e:	dc 01       	movw	r26, r24
    4910:	cb 01       	movw	r24, r22
    4912:	bc 01       	movw	r22, r24
    4914:	cd 01       	movw	r24, r26
    4916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    491a:	dc 01       	movw	r26, r24
    491c:	cb 01       	movw	r24, r22
    491e:	98 ab       	std	Y+48, r25	; 0x30
    4920:	8f a7       	std	Y+47, r24	; 0x2f
    4922:	0f c0       	rjmp	.+30     	; 0x4942 <H_Buzzer_Void_BuzzerTriple+0x1de>
    4924:	80 e9       	ldi	r24, 0x90	; 144
    4926:	91 e0       	ldi	r25, 0x01	; 1
    4928:	9e a7       	std	Y+46, r25	; 0x2e
    492a:	8d a7       	std	Y+45, r24	; 0x2d
    492c:	8d a5       	ldd	r24, Y+45	; 0x2d
    492e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4930:	01 97       	sbiw	r24, 0x01	; 1
    4932:	f1 f7       	brne	.-4      	; 0x4930 <H_Buzzer_Void_BuzzerTriple+0x1cc>
    4934:	9e a7       	std	Y+46, r25	; 0x2e
    4936:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4938:	8f a5       	ldd	r24, Y+47	; 0x2f
    493a:	98 a9       	ldd	r25, Y+48	; 0x30
    493c:	01 97       	sbiw	r24, 0x01	; 1
    493e:	98 ab       	std	Y+48, r25	; 0x30
    4940:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4942:	8f a5       	ldd	r24, Y+47	; 0x2f
    4944:	98 a9       	ldd	r25, Y+48	; 0x30
    4946:	00 97       	sbiw	r24, 0x00	; 0
    4948:	69 f7       	brne	.-38     	; 0x4924 <H_Buzzer_Void_BuzzerTriple+0x1c0>
    494a:	14 c0       	rjmp	.+40     	; 0x4974 <H_Buzzer_Void_BuzzerTriple+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    494c:	69 a9       	ldd	r22, Y+49	; 0x31
    494e:	7a a9       	ldd	r23, Y+50	; 0x32
    4950:	8b a9       	ldd	r24, Y+51	; 0x33
    4952:	9c a9       	ldd	r25, Y+52	; 0x34
    4954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4958:	dc 01       	movw	r26, r24
    495a:	cb 01       	movw	r24, r22
    495c:	98 ab       	std	Y+48, r25	; 0x30
    495e:	8f a7       	std	Y+47, r24	; 0x2f
    4960:	8f a5       	ldd	r24, Y+47	; 0x2f
    4962:	98 a9       	ldd	r25, Y+48	; 0x30
    4964:	9c a7       	std	Y+44, r25	; 0x2c
    4966:	8b a7       	std	Y+43, r24	; 0x2b
    4968:	8b a5       	ldd	r24, Y+43	; 0x2b
    496a:	9c a5       	ldd	r25, Y+44	; 0x2c
    496c:	01 97       	sbiw	r24, 0x01	; 1
    496e:	f1 f7       	brne	.-4      	; 0x496c <H_Buzzer_Void_BuzzerTriple+0x208>
    4970:	9c a7       	std	Y+44, r25	; 0x2c
    4972:	8b a7       	std	Y+43, r24	; 0x2b
	 _delay_ms(BUZZER_OFFDELAY_TIME);
	 H_Buzzer_Void_BuzzerOn();
    4974:	0e 94 a2 21 	call	0x4344	; 0x4344 <H_Buzzer_Void_BuzzerOn>
    4978:	80 e0       	ldi	r24, 0x00	; 0
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	aa ef       	ldi	r26, 0xFA	; 250
    497e:	b3 e4       	ldi	r27, 0x43	; 67
    4980:	8f a3       	std	Y+39, r24	; 0x27
    4982:	98 a7       	std	Y+40, r25	; 0x28
    4984:	a9 a7       	std	Y+41, r26	; 0x29
    4986:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4988:	6f a1       	ldd	r22, Y+39	; 0x27
    498a:	78 a5       	ldd	r23, Y+40	; 0x28
    498c:	89 a5       	ldd	r24, Y+41	; 0x29
    498e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4990:	20 e0       	ldi	r18, 0x00	; 0
    4992:	30 e0       	ldi	r19, 0x00	; 0
    4994:	4a e7       	ldi	r20, 0x7A	; 122
    4996:	55 e4       	ldi	r21, 0x45	; 69
    4998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    499c:	dc 01       	movw	r26, r24
    499e:	cb 01       	movw	r24, r22
    49a0:	8b a3       	std	Y+35, r24	; 0x23
    49a2:	9c a3       	std	Y+36, r25	; 0x24
    49a4:	ad a3       	std	Y+37, r26	; 0x25
    49a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    49a8:	6b a1       	ldd	r22, Y+35	; 0x23
    49aa:	7c a1       	ldd	r23, Y+36	; 0x24
    49ac:	8d a1       	ldd	r24, Y+37	; 0x25
    49ae:	9e a1       	ldd	r25, Y+38	; 0x26
    49b0:	20 e0       	ldi	r18, 0x00	; 0
    49b2:	30 e0       	ldi	r19, 0x00	; 0
    49b4:	40 e8       	ldi	r20, 0x80	; 128
    49b6:	5f e3       	ldi	r21, 0x3F	; 63
    49b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    49bc:	88 23       	and	r24, r24
    49be:	2c f4       	brge	.+10     	; 0x49ca <H_Buzzer_Void_BuzzerTriple+0x266>
		__ticks = 1;
    49c0:	81 e0       	ldi	r24, 0x01	; 1
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	9a a3       	std	Y+34, r25	; 0x22
    49c6:	89 a3       	std	Y+33, r24	; 0x21
    49c8:	3f c0       	rjmp	.+126    	; 0x4a48 <H_Buzzer_Void_BuzzerTriple+0x2e4>
	else if (__tmp > 65535)
    49ca:	6b a1       	ldd	r22, Y+35	; 0x23
    49cc:	7c a1       	ldd	r23, Y+36	; 0x24
    49ce:	8d a1       	ldd	r24, Y+37	; 0x25
    49d0:	9e a1       	ldd	r25, Y+38	; 0x26
    49d2:	20 e0       	ldi	r18, 0x00	; 0
    49d4:	3f ef       	ldi	r19, 0xFF	; 255
    49d6:	4f e7       	ldi	r20, 0x7F	; 127
    49d8:	57 e4       	ldi	r21, 0x47	; 71
    49da:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    49de:	18 16       	cp	r1, r24
    49e0:	4c f5       	brge	.+82     	; 0x4a34 <H_Buzzer_Void_BuzzerTriple+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49e2:	6f a1       	ldd	r22, Y+39	; 0x27
    49e4:	78 a5       	ldd	r23, Y+40	; 0x28
    49e6:	89 a5       	ldd	r24, Y+41	; 0x29
    49e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    49ea:	20 e0       	ldi	r18, 0x00	; 0
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	40 e2       	ldi	r20, 0x20	; 32
    49f0:	51 e4       	ldi	r21, 0x41	; 65
    49f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f6:	dc 01       	movw	r26, r24
    49f8:	cb 01       	movw	r24, r22
    49fa:	bc 01       	movw	r22, r24
    49fc:	cd 01       	movw	r24, r26
    49fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a02:	dc 01       	movw	r26, r24
    4a04:	cb 01       	movw	r24, r22
    4a06:	9a a3       	std	Y+34, r25	; 0x22
    4a08:	89 a3       	std	Y+33, r24	; 0x21
    4a0a:	0f c0       	rjmp	.+30     	; 0x4a2a <H_Buzzer_Void_BuzzerTriple+0x2c6>
    4a0c:	80 e9       	ldi	r24, 0x90	; 144
    4a0e:	91 e0       	ldi	r25, 0x01	; 1
    4a10:	98 a3       	std	Y+32, r25	; 0x20
    4a12:	8f 8f       	std	Y+31, r24	; 0x1f
    4a14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a16:	98 a1       	ldd	r25, Y+32	; 0x20
    4a18:	01 97       	sbiw	r24, 0x01	; 1
    4a1a:	f1 f7       	brne	.-4      	; 0x4a18 <H_Buzzer_Void_BuzzerTriple+0x2b4>
    4a1c:	98 a3       	std	Y+32, r25	; 0x20
    4a1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a20:	89 a1       	ldd	r24, Y+33	; 0x21
    4a22:	9a a1       	ldd	r25, Y+34	; 0x22
    4a24:	01 97       	sbiw	r24, 0x01	; 1
    4a26:	9a a3       	std	Y+34, r25	; 0x22
    4a28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a2a:	89 a1       	ldd	r24, Y+33	; 0x21
    4a2c:	9a a1       	ldd	r25, Y+34	; 0x22
    4a2e:	00 97       	sbiw	r24, 0x00	; 0
    4a30:	69 f7       	brne	.-38     	; 0x4a0c <H_Buzzer_Void_BuzzerTriple+0x2a8>
    4a32:	14 c0       	rjmp	.+40     	; 0x4a5c <H_Buzzer_Void_BuzzerTriple+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a34:	6b a1       	ldd	r22, Y+35	; 0x23
    4a36:	7c a1       	ldd	r23, Y+36	; 0x24
    4a38:	8d a1       	ldd	r24, Y+37	; 0x25
    4a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    4a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a40:	dc 01       	movw	r26, r24
    4a42:	cb 01       	movw	r24, r22
    4a44:	9a a3       	std	Y+34, r25	; 0x22
    4a46:	89 a3       	std	Y+33, r24	; 0x21
    4a48:	89 a1       	ldd	r24, Y+33	; 0x21
    4a4a:	9a a1       	ldd	r25, Y+34	; 0x22
    4a4c:	9e 8f       	std	Y+30, r25	; 0x1e
    4a4e:	8d 8f       	std	Y+29, r24	; 0x1d
    4a50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4a54:	01 97       	sbiw	r24, 0x01	; 1
    4a56:	f1 f7       	brne	.-4      	; 0x4a54 <H_Buzzer_Void_BuzzerTriple+0x2f0>
    4a58:	9e 8f       	std	Y+30, r25	; 0x1e
    4a5a:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    4a5c:	0e 94 ad 21 	call	0x435a	; 0x435a <H_Buzzer_Void_BuzzerOff>
    4a60:	80 e0       	ldi	r24, 0x00	; 0
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	aa e7       	ldi	r26, 0x7A	; 122
    4a66:	b3 e4       	ldi	r27, 0x43	; 67
    4a68:	89 8f       	std	Y+25, r24	; 0x19
    4a6a:	9a 8f       	std	Y+26, r25	; 0x1a
    4a6c:	ab 8f       	std	Y+27, r26	; 0x1b
    4a6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a70:	69 8d       	ldd	r22, Y+25	; 0x19
    4a72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a78:	20 e0       	ldi	r18, 0x00	; 0
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	4a e7       	ldi	r20, 0x7A	; 122
    4a7e:	55 e4       	ldi	r21, 0x45	; 69
    4a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a84:	dc 01       	movw	r26, r24
    4a86:	cb 01       	movw	r24, r22
    4a88:	8d 8b       	std	Y+21, r24	; 0x15
    4a8a:	9e 8b       	std	Y+22, r25	; 0x16
    4a8c:	af 8b       	std	Y+23, r26	; 0x17
    4a8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a90:	6d 89       	ldd	r22, Y+21	; 0x15
    4a92:	7e 89       	ldd	r23, Y+22	; 0x16
    4a94:	8f 89       	ldd	r24, Y+23	; 0x17
    4a96:	98 8d       	ldd	r25, Y+24	; 0x18
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	30 e0       	ldi	r19, 0x00	; 0
    4a9c:	40 e8       	ldi	r20, 0x80	; 128
    4a9e:	5f e3       	ldi	r21, 0x3F	; 63
    4aa0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4aa4:	88 23       	and	r24, r24
    4aa6:	2c f4       	brge	.+10     	; 0x4ab2 <H_Buzzer_Void_BuzzerTriple+0x34e>
		__ticks = 1;
    4aa8:	81 e0       	ldi	r24, 0x01	; 1
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	9c 8b       	std	Y+20, r25	; 0x14
    4aae:	8b 8b       	std	Y+19, r24	; 0x13
    4ab0:	3f c0       	rjmp	.+126    	; 0x4b30 <H_Buzzer_Void_BuzzerTriple+0x3cc>
	else if (__tmp > 65535)
    4ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    4ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    4ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    4aba:	20 e0       	ldi	r18, 0x00	; 0
    4abc:	3f ef       	ldi	r19, 0xFF	; 255
    4abe:	4f e7       	ldi	r20, 0x7F	; 127
    4ac0:	57 e4       	ldi	r21, 0x47	; 71
    4ac2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4ac6:	18 16       	cp	r1, r24
    4ac8:	4c f5       	brge	.+82     	; 0x4b1c <H_Buzzer_Void_BuzzerTriple+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aca:	69 8d       	ldd	r22, Y+25	; 0x19
    4acc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ad0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ad2:	20 e0       	ldi	r18, 0x00	; 0
    4ad4:	30 e0       	ldi	r19, 0x00	; 0
    4ad6:	40 e2       	ldi	r20, 0x20	; 32
    4ad8:	51 e4       	ldi	r21, 0x41	; 65
    4ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ade:	dc 01       	movw	r26, r24
    4ae0:	cb 01       	movw	r24, r22
    4ae2:	bc 01       	movw	r22, r24
    4ae4:	cd 01       	movw	r24, r26
    4ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aea:	dc 01       	movw	r26, r24
    4aec:	cb 01       	movw	r24, r22
    4aee:	9c 8b       	std	Y+20, r25	; 0x14
    4af0:	8b 8b       	std	Y+19, r24	; 0x13
    4af2:	0f c0       	rjmp	.+30     	; 0x4b12 <H_Buzzer_Void_BuzzerTriple+0x3ae>
    4af4:	80 e9       	ldi	r24, 0x90	; 144
    4af6:	91 e0       	ldi	r25, 0x01	; 1
    4af8:	9a 8b       	std	Y+18, r25	; 0x12
    4afa:	89 8b       	std	Y+17, r24	; 0x11
    4afc:	89 89       	ldd	r24, Y+17	; 0x11
    4afe:	9a 89       	ldd	r25, Y+18	; 0x12
    4b00:	01 97       	sbiw	r24, 0x01	; 1
    4b02:	f1 f7       	brne	.-4      	; 0x4b00 <H_Buzzer_Void_BuzzerTriple+0x39c>
    4b04:	9a 8b       	std	Y+18, r25	; 0x12
    4b06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b08:	8b 89       	ldd	r24, Y+19	; 0x13
    4b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    4b0c:	01 97       	sbiw	r24, 0x01	; 1
    4b0e:	9c 8b       	std	Y+20, r25	; 0x14
    4b10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b12:	8b 89       	ldd	r24, Y+19	; 0x13
    4b14:	9c 89       	ldd	r25, Y+20	; 0x14
    4b16:	00 97       	sbiw	r24, 0x00	; 0
    4b18:	69 f7       	brne	.-38     	; 0x4af4 <H_Buzzer_Void_BuzzerTriple+0x390>
    4b1a:	14 c0       	rjmp	.+40     	; 0x4b44 <H_Buzzer_Void_BuzzerTriple+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b1c:	6d 89       	ldd	r22, Y+21	; 0x15
    4b1e:	7e 89       	ldd	r23, Y+22	; 0x16
    4b20:	8f 89       	ldd	r24, Y+23	; 0x17
    4b22:	98 8d       	ldd	r25, Y+24	; 0x18
    4b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b28:	dc 01       	movw	r26, r24
    4b2a:	cb 01       	movw	r24, r22
    4b2c:	9c 8b       	std	Y+20, r25	; 0x14
    4b2e:	8b 8b       	std	Y+19, r24	; 0x13
    4b30:	8b 89       	ldd	r24, Y+19	; 0x13
    4b32:	9c 89       	ldd	r25, Y+20	; 0x14
    4b34:	98 8b       	std	Y+16, r25	; 0x10
    4b36:	8f 87       	std	Y+15, r24	; 0x0f
    4b38:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b3a:	98 89       	ldd	r25, Y+16	; 0x10
    4b3c:	01 97       	sbiw	r24, 0x01	; 1
    4b3e:	f1 f7       	brne	.-4      	; 0x4b3c <H_Buzzer_Void_BuzzerTriple+0x3d8>
    4b40:	98 8b       	std	Y+16, r25	; 0x10
    4b42:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(BUZZER_OFFDELAY_TIME);
	 H_Buzzer_Void_BuzzerOn();
    4b44:	0e 94 a2 21 	call	0x4344	; 0x4344 <H_Buzzer_Void_BuzzerOn>
    4b48:	80 e0       	ldi	r24, 0x00	; 0
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	aa ef       	ldi	r26, 0xFA	; 250
    4b4e:	b3 e4       	ldi	r27, 0x43	; 67
    4b50:	8b 87       	std	Y+11, r24	; 0x0b
    4b52:	9c 87       	std	Y+12, r25	; 0x0c
    4b54:	ad 87       	std	Y+13, r26	; 0x0d
    4b56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b60:	20 e0       	ldi	r18, 0x00	; 0
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	4a e7       	ldi	r20, 0x7A	; 122
    4b66:	55 e4       	ldi	r21, 0x45	; 69
    4b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b6c:	dc 01       	movw	r26, r24
    4b6e:	cb 01       	movw	r24, r22
    4b70:	8f 83       	std	Y+7, r24	; 0x07
    4b72:	98 87       	std	Y+8, r25	; 0x08
    4b74:	a9 87       	std	Y+9, r26	; 0x09
    4b76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b78:	6f 81       	ldd	r22, Y+7	; 0x07
    4b7a:	78 85       	ldd	r23, Y+8	; 0x08
    4b7c:	89 85       	ldd	r24, Y+9	; 0x09
    4b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b80:	20 e0       	ldi	r18, 0x00	; 0
    4b82:	30 e0       	ldi	r19, 0x00	; 0
    4b84:	40 e8       	ldi	r20, 0x80	; 128
    4b86:	5f e3       	ldi	r21, 0x3F	; 63
    4b88:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4b8c:	88 23       	and	r24, r24
    4b8e:	2c f4       	brge	.+10     	; 0x4b9a <H_Buzzer_Void_BuzzerTriple+0x436>
		__ticks = 1;
    4b90:	81 e0       	ldi	r24, 0x01	; 1
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	9e 83       	std	Y+6, r25	; 0x06
    4b96:	8d 83       	std	Y+5, r24	; 0x05
    4b98:	3f c0       	rjmp	.+126    	; 0x4c18 <H_Buzzer_Void_BuzzerTriple+0x4b4>
	else if (__tmp > 65535)
    4b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    4b9c:	78 85       	ldd	r23, Y+8	; 0x08
    4b9e:	89 85       	ldd	r24, Y+9	; 0x09
    4ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ba2:	20 e0       	ldi	r18, 0x00	; 0
    4ba4:	3f ef       	ldi	r19, 0xFF	; 255
    4ba6:	4f e7       	ldi	r20, 0x7F	; 127
    4ba8:	57 e4       	ldi	r21, 0x47	; 71
    4baa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4bae:	18 16       	cp	r1, r24
    4bb0:	4c f5       	brge	.+82     	; 0x4c04 <H_Buzzer_Void_BuzzerTriple+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bba:	20 e0       	ldi	r18, 0x00	; 0
    4bbc:	30 e0       	ldi	r19, 0x00	; 0
    4bbe:	40 e2       	ldi	r20, 0x20	; 32
    4bc0:	51 e4       	ldi	r21, 0x41	; 65
    4bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bc6:	dc 01       	movw	r26, r24
    4bc8:	cb 01       	movw	r24, r22
    4bca:	bc 01       	movw	r22, r24
    4bcc:	cd 01       	movw	r24, r26
    4bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	cb 01       	movw	r24, r22
    4bd6:	9e 83       	std	Y+6, r25	; 0x06
    4bd8:	8d 83       	std	Y+5, r24	; 0x05
    4bda:	0f c0       	rjmp	.+30     	; 0x4bfa <H_Buzzer_Void_BuzzerTriple+0x496>
    4bdc:	80 e9       	ldi	r24, 0x90	; 144
    4bde:	91 e0       	ldi	r25, 0x01	; 1
    4be0:	9c 83       	std	Y+4, r25	; 0x04
    4be2:	8b 83       	std	Y+3, r24	; 0x03
    4be4:	8b 81       	ldd	r24, Y+3	; 0x03
    4be6:	9c 81       	ldd	r25, Y+4	; 0x04
    4be8:	01 97       	sbiw	r24, 0x01	; 1
    4bea:	f1 f7       	brne	.-4      	; 0x4be8 <H_Buzzer_Void_BuzzerTriple+0x484>
    4bec:	9c 83       	std	Y+4, r25	; 0x04
    4bee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    4bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    4bf4:	01 97       	sbiw	r24, 0x01	; 1
    4bf6:	9e 83       	std	Y+6, r25	; 0x06
    4bf8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    4bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    4bfe:	00 97       	sbiw	r24, 0x00	; 0
    4c00:	69 f7       	brne	.-38     	; 0x4bdc <H_Buzzer_Void_BuzzerTriple+0x478>
    4c02:	14 c0       	rjmp	.+40     	; 0x4c2c <H_Buzzer_Void_BuzzerTriple+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c04:	6f 81       	ldd	r22, Y+7	; 0x07
    4c06:	78 85       	ldd	r23, Y+8	; 0x08
    4c08:	89 85       	ldd	r24, Y+9	; 0x09
    4c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c10:	dc 01       	movw	r26, r24
    4c12:	cb 01       	movw	r24, r22
    4c14:	9e 83       	std	Y+6, r25	; 0x06
    4c16:	8d 83       	std	Y+5, r24	; 0x05
    4c18:	8d 81       	ldd	r24, Y+5	; 0x05
    4c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c1c:	9a 83       	std	Y+2, r25	; 0x02
    4c1e:	89 83       	std	Y+1, r24	; 0x01
    4c20:	89 81       	ldd	r24, Y+1	; 0x01
    4c22:	9a 81       	ldd	r25, Y+2	; 0x02
    4c24:	01 97       	sbiw	r24, 0x01	; 1
    4c26:	f1 f7       	brne	.-4      	; 0x4c24 <H_Buzzer_Void_BuzzerTriple+0x4c0>
    4c28:	9a 83       	std	Y+2, r25	; 0x02
    4c2a:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    4c2c:	0e 94 ad 21 	call	0x435a	; 0x435a <H_Buzzer_Void_BuzzerOff>
 }
    4c30:	ca 5b       	subi	r28, 0xBA	; 186
    4c32:	df 4f       	sbci	r29, 0xFF	; 255
    4c34:	0f b6       	in	r0, 0x3f	; 63
    4c36:	f8 94       	cli
    4c38:	de bf       	out	0x3e, r29	; 62
    4c3a:	0f be       	out	0x3f, r0	; 63
    4c3c:	cd bf       	out	0x3d, r28	; 61
    4c3e:	cf 91       	pop	r28
    4c40:	df 91       	pop	r29
    4c42:	1f 91       	pop	r17
    4c44:	0f 91       	pop	r16
    4c46:	08 95       	ret

00004c48 <H_Buzzer_Void_BuzzerLong>:
 void H_Buzzer_Void_BuzzerLong(void)
 {
    4c48:	df 93       	push	r29
    4c4a:	cf 93       	push	r28
    4c4c:	cd b7       	in	r28, 0x3d	; 61
    4c4e:	de b7       	in	r29, 0x3e	; 62
    4c50:	2e 97       	sbiw	r28, 0x0e	; 14
    4c52:	0f b6       	in	r0, 0x3f	; 63
    4c54:	f8 94       	cli
    4c56:	de bf       	out	0x3e, r29	; 62
    4c58:	0f be       	out	0x3f, r0	; 63
    4c5a:	cd bf       	out	0x3d, r28	; 61
	 H_Buzzer_Void_BuzzerOn();
    4c5c:	0e 94 a2 21 	call	0x4344	; 0x4344 <H_Buzzer_Void_BuzzerOn>
    4c60:	80 e0       	ldi	r24, 0x00	; 0
    4c62:	90 e4       	ldi	r25, 0x40	; 64
    4c64:	ac e9       	ldi	r26, 0x9C	; 156
    4c66:	b5 e4       	ldi	r27, 0x45	; 69
    4c68:	8b 87       	std	Y+11, r24	; 0x0b
    4c6a:	9c 87       	std	Y+12, r25	; 0x0c
    4c6c:	ad 87       	std	Y+13, r26	; 0x0d
    4c6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c70:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c72:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c74:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c76:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c78:	20 e0       	ldi	r18, 0x00	; 0
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	4a e7       	ldi	r20, 0x7A	; 122
    4c7e:	55 e4       	ldi	r21, 0x45	; 69
    4c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c84:	dc 01       	movw	r26, r24
    4c86:	cb 01       	movw	r24, r22
    4c88:	8f 83       	std	Y+7, r24	; 0x07
    4c8a:	98 87       	std	Y+8, r25	; 0x08
    4c8c:	a9 87       	std	Y+9, r26	; 0x09
    4c8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c90:	6f 81       	ldd	r22, Y+7	; 0x07
    4c92:	78 85       	ldd	r23, Y+8	; 0x08
    4c94:	89 85       	ldd	r24, Y+9	; 0x09
    4c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c98:	20 e0       	ldi	r18, 0x00	; 0
    4c9a:	30 e0       	ldi	r19, 0x00	; 0
    4c9c:	40 e8       	ldi	r20, 0x80	; 128
    4c9e:	5f e3       	ldi	r21, 0x3F	; 63
    4ca0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4ca4:	88 23       	and	r24, r24
    4ca6:	2c f4       	brge	.+10     	; 0x4cb2 <H_Buzzer_Void_BuzzerLong+0x6a>
		__ticks = 1;
    4ca8:	81 e0       	ldi	r24, 0x01	; 1
    4caa:	90 e0       	ldi	r25, 0x00	; 0
    4cac:	9e 83       	std	Y+6, r25	; 0x06
    4cae:	8d 83       	std	Y+5, r24	; 0x05
    4cb0:	3f c0       	rjmp	.+126    	; 0x4d30 <H_Buzzer_Void_BuzzerLong+0xe8>
	else if (__tmp > 65535)
    4cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    4cb4:	78 85       	ldd	r23, Y+8	; 0x08
    4cb6:	89 85       	ldd	r24, Y+9	; 0x09
    4cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cba:	20 e0       	ldi	r18, 0x00	; 0
    4cbc:	3f ef       	ldi	r19, 0xFF	; 255
    4cbe:	4f e7       	ldi	r20, 0x7F	; 127
    4cc0:	57 e4       	ldi	r21, 0x47	; 71
    4cc2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4cc6:	18 16       	cp	r1, r24
    4cc8:	4c f5       	brge	.+82     	; 0x4d1c <H_Buzzer_Void_BuzzerLong+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cd2:	20 e0       	ldi	r18, 0x00	; 0
    4cd4:	30 e0       	ldi	r19, 0x00	; 0
    4cd6:	40 e2       	ldi	r20, 0x20	; 32
    4cd8:	51 e4       	ldi	r21, 0x41	; 65
    4cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cde:	dc 01       	movw	r26, r24
    4ce0:	cb 01       	movw	r24, r22
    4ce2:	bc 01       	movw	r22, r24
    4ce4:	cd 01       	movw	r24, r26
    4ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cea:	dc 01       	movw	r26, r24
    4cec:	cb 01       	movw	r24, r22
    4cee:	9e 83       	std	Y+6, r25	; 0x06
    4cf0:	8d 83       	std	Y+5, r24	; 0x05
    4cf2:	0f c0       	rjmp	.+30     	; 0x4d12 <H_Buzzer_Void_BuzzerLong+0xca>
    4cf4:	80 e9       	ldi	r24, 0x90	; 144
    4cf6:	91 e0       	ldi	r25, 0x01	; 1
    4cf8:	9c 83       	std	Y+4, r25	; 0x04
    4cfa:	8b 83       	std	Y+3, r24	; 0x03
    4cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    4cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    4d00:	01 97       	sbiw	r24, 0x01	; 1
    4d02:	f1 f7       	brne	.-4      	; 0x4d00 <H_Buzzer_Void_BuzzerLong+0xb8>
    4d04:	9c 83       	std	Y+4, r25	; 0x04
    4d06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d08:	8d 81       	ldd	r24, Y+5	; 0x05
    4d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d0c:	01 97       	sbiw	r24, 0x01	; 1
    4d0e:	9e 83       	std	Y+6, r25	; 0x06
    4d10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d12:	8d 81       	ldd	r24, Y+5	; 0x05
    4d14:	9e 81       	ldd	r25, Y+6	; 0x06
    4d16:	00 97       	sbiw	r24, 0x00	; 0
    4d18:	69 f7       	brne	.-38     	; 0x4cf4 <H_Buzzer_Void_BuzzerLong+0xac>
    4d1a:	14 c0       	rjmp	.+40     	; 0x4d44 <H_Buzzer_Void_BuzzerLong+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    4d1e:	78 85       	ldd	r23, Y+8	; 0x08
    4d20:	89 85       	ldd	r24, Y+9	; 0x09
    4d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d28:	dc 01       	movw	r26, r24
    4d2a:	cb 01       	movw	r24, r22
    4d2c:	9e 83       	std	Y+6, r25	; 0x06
    4d2e:	8d 83       	std	Y+5, r24	; 0x05
    4d30:	8d 81       	ldd	r24, Y+5	; 0x05
    4d32:	9e 81       	ldd	r25, Y+6	; 0x06
    4d34:	9a 83       	std	Y+2, r25	; 0x02
    4d36:	89 83       	std	Y+1, r24	; 0x01
    4d38:	89 81       	ldd	r24, Y+1	; 0x01
    4d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d3c:	01 97       	sbiw	r24, 0x01	; 1
    4d3e:	f1 f7       	brne	.-4      	; 0x4d3c <H_Buzzer_Void_BuzzerLong+0xf4>
    4d40:	9a 83       	std	Y+2, r25	; 0x02
    4d42:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(10*BUZZER_ONDELAY_TIME);
	 H_Buzzer_Void_BuzzerOff();
    4d44:	0e 94 ad 21 	call	0x435a	; 0x435a <H_Buzzer_Void_BuzzerOff>
 }
    4d48:	2e 96       	adiw	r28, 0x0e	; 14
    4d4a:	0f b6       	in	r0, 0x3f	; 63
    4d4c:	f8 94       	cli
    4d4e:	de bf       	out	0x3e, r29	; 62
    4d50:	0f be       	out	0x3f, r0	; 63
    4d52:	cd bf       	out	0x3d, r28	; 61
    4d54:	cf 91       	pop	r28
    4d56:	df 91       	pop	r29
    4d58:	08 95       	ret

00004d5a <main>:
volatile u16 Reading1 = 0;
volatile u16 Reading2 = 0;
volatile u16 Reading3 = 0;
volatile u8 StateCounter = 1;
int main()
{
    4d5a:	ef 92       	push	r14
    4d5c:	ff 92       	push	r15
    4d5e:	0f 93       	push	r16
    4d60:	1f 93       	push	r17
    4d62:	df 93       	push	r29
    4d64:	cf 93       	push	r28
    4d66:	cd b7       	in	r28, 0x3d	; 61
    4d68:	de b7       	in	r29, 0x3e	; 62
    4d6a:	e6 97       	sbiw	r28, 0x36	; 54
    4d6c:	0f b6       	in	r0, 0x3f	; 63
    4d6e:	f8 94       	cli
    4d70:	de bf       	out	0x3e, r29	; 62
    4d72:	0f be       	out	0x3f, r0	; 63
    4d74:	cd bf       	out	0x3d, r28	; 61
	u32 TotalTicks =0;
    4d76:	1b aa       	std	Y+51, r1	; 0x33
    4d78:	1c aa       	std	Y+52, r1	; 0x34
    4d7a:	1d aa       	std	Y+53, r1	; 0x35
    4d7c:	1e aa       	std	Y+54, r1	; 0x36
	u32	ONTicks = 0;
    4d7e:	1f a6       	std	Y+47, r1	; 0x2f
    4d80:	18 aa       	std	Y+48, r1	; 0x30
    4d82:	19 aa       	std	Y+49, r1	; 0x31
    4d84:	1a aa       	std	Y+50, r1	; 0x32
	f32 Duty = 0;
    4d86:	80 e0       	ldi	r24, 0x00	; 0
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	a0 e0       	ldi	r26, 0x00	; 0
    4d8c:	b0 e0       	ldi	r27, 0x00	; 0
    4d8e:	8b a7       	std	Y+43, r24	; 0x2b
    4d90:	9c a7       	std	Y+44, r25	; 0x2c
    4d92:	ad a7       	std	Y+45, r26	; 0x2d
    4d94:	be a7       	std	Y+46, r27	; 0x2e

	//init ICU in timer1 normal mode
	M_Timer1_Void_Init();
    4d96:	0e 94 23 09 	call	0x1246	; 0x1246 <M_Timer1_Void_Init>

	M_Timer1_Void_ICUInit();
    4d9a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <M_Timer1_Void_ICUInit>

	M_Timer1_Void_InterruptEnable();
    4d9e:	0e 94 94 09 	call	0x1328	; 0x1328 <M_Timer1_Void_InterruptEnable>

	M_Timer1_Void_SetCallBackFun(ICU_HW);
    4da2:	8f ec       	ldi	r24, 0xCF	; 207
    4da4:	98 e2       	ldi	r25, 0x28	; 40
    4da6:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_Timer1_Void_SetCallBackFun>
	//set ICP1 as input
	M_Dio_Void_PinMode(PD6_PIN,INPUT);
    4daa:	8e e2       	ldi	r24, 0x2E	; 46
    4dac:	60 e0       	ldi	r22, 0x00	; 0
    4dae:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>
	//init ICU in timer0 fast PWM mode
	M_Timer0_Void_Init();
    4db2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_Timer0_Void_Init>

	M_Dio_Void_PinMode(PB3_PIN,OUTPUT);
    4db6:	87 e1       	ldi	r24, 0x17	; 23
    4db8:	61 e0       	ldi	r22, 0x01	; 1
    4dba:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <M_Dio_Void_PinMode>

	M_Timer0_Void_StartTimer();
    4dbe:	0e 94 c2 07 	call	0xf84	; 0xf84 <M_Timer0_Void_StartTimer>

	M_Timer0_Void_SetFastPWM(30);
    4dc2:	8e e1       	ldi	r24, 0x1E	; 30
    4dc4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <M_Timer0_Void_SetFastPWM>
	//init LCD
	H_LCD_Void_LCDInit();
    4dc8:	0e 94 b0 18 	call	0x3160	; 0x3160 <H_LCD_Void_LCDInit>

	//enable global int
	M_GIE_Void_Enable();
    4dcc:	0e 94 00 0a 	call	0x1400	; 0x1400 <M_GIE_Void_Enable>

	while(StateCounter != 4);
    4dd0:	80 91 93 01 	lds	r24, 0x0193
    4dd4:	84 30       	cpi	r24, 0x04	; 4
    4dd6:	e1 f7       	brne	.-8      	; 0x4dd0 <main+0x76>
	TotalTicks = (Reading2 - Reading1);
    4dd8:	20 91 b0 01 	lds	r18, 0x01B0
    4ddc:	30 91 b1 01 	lds	r19, 0x01B1
    4de0:	80 91 ae 01 	lds	r24, 0x01AE
    4de4:	90 91 af 01 	lds	r25, 0x01AF
    4de8:	a9 01       	movw	r20, r18
    4dea:	48 1b       	sub	r20, r24
    4dec:	59 0b       	sbc	r21, r25
    4dee:	ca 01       	movw	r24, r20
    4df0:	cc 01       	movw	r24, r24
    4df2:	a0 e0       	ldi	r26, 0x00	; 0
    4df4:	b0 e0       	ldi	r27, 0x00	; 0
    4df6:	8b ab       	std	Y+51, r24	; 0x33
    4df8:	9c ab       	std	Y+52, r25	; 0x34
    4dfa:	ad ab       	std	Y+53, r26	; 0x35
    4dfc:	be ab       	std	Y+54, r27	; 0x36
	ONTicks = (Reading3 - Reading2);
    4dfe:	20 91 b2 01 	lds	r18, 0x01B2
    4e02:	30 91 b3 01 	lds	r19, 0x01B3
    4e06:	80 91 b0 01 	lds	r24, 0x01B0
    4e0a:	90 91 b1 01 	lds	r25, 0x01B1
    4e0e:	a9 01       	movw	r20, r18
    4e10:	48 1b       	sub	r20, r24
    4e12:	59 0b       	sbc	r21, r25
    4e14:	ca 01       	movw	r24, r20
    4e16:	cc 01       	movw	r24, r24
    4e18:	a0 e0       	ldi	r26, 0x00	; 0
    4e1a:	b0 e0       	ldi	r27, 0x00	; 0
    4e1c:	8f a7       	std	Y+47, r24	; 0x2f
    4e1e:	98 ab       	std	Y+48, r25	; 0x30
    4e20:	a9 ab       	std	Y+49, r26	; 0x31
    4e22:	ba ab       	std	Y+50, r27	; 0x32
	Duty = (((f32)ONTicks / TotalTicks) * 100);
    4e24:	6f a5       	ldd	r22, Y+47	; 0x2f
    4e26:	78 a9       	ldd	r23, Y+48	; 0x30
    4e28:	89 a9       	ldd	r24, Y+49	; 0x31
    4e2a:	9a a9       	ldd	r25, Y+50	; 0x32
    4e2c:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    4e30:	7b 01       	movw	r14, r22
    4e32:	8c 01       	movw	r16, r24
    4e34:	6b a9       	ldd	r22, Y+51	; 0x33
    4e36:	7c a9       	ldd	r23, Y+52	; 0x34
    4e38:	8d a9       	ldd	r24, Y+53	; 0x35
    4e3a:	9e a9       	ldd	r25, Y+54	; 0x36
    4e3c:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    4e40:	9b 01       	movw	r18, r22
    4e42:	ac 01       	movw	r20, r24
    4e44:	c8 01       	movw	r24, r16
    4e46:	b7 01       	movw	r22, r14
    4e48:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4e4c:	dc 01       	movw	r26, r24
    4e4e:	cb 01       	movw	r24, r22
    4e50:	bc 01       	movw	r22, r24
    4e52:	cd 01       	movw	r24, r26
    4e54:	20 e0       	ldi	r18, 0x00	; 0
    4e56:	30 e0       	ldi	r19, 0x00	; 0
    4e58:	48 ec       	ldi	r20, 0xC8	; 200
    4e5a:	52 e4       	ldi	r21, 0x42	; 66
    4e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e60:	dc 01       	movw	r26, r24
    4e62:	cb 01       	movw	r24, r22
    4e64:	8b a7       	std	Y+43, r24	; 0x2b
    4e66:	9c a7       	std	Y+44, r25	; 0x2c
    4e68:	ad a7       	std	Y+45, r26	; 0x2d
    4e6a:	be a7       	std	Y+46, r27	; 0x2e

	while(1)
	{
		H_LCD_Void_LCDWriteString("Total ticks = ");
    4e6c:	80 e6       	ldi	r24, 0x60	; 96
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <H_LCD_Void_LCDWriteString>
		H_LCD_Void_LCDGoto(1,0);
    4e74:	81 e0       	ldi	r24, 0x01	; 1
    4e76:	60 e0       	ldi	r22, 0x00	; 0
    4e78:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <H_LCD_Void_LCDGoto>
		H_LCD_Void_LCDWriteNumber(TotalTicks);
    4e7c:	6b a9       	ldd	r22, Y+51	; 0x33
    4e7e:	7c a9       	ldd	r23, Y+52	; 0x34
    4e80:	8d a9       	ldd	r24, Y+53	; 0x35
    4e82:	9e a9       	ldd	r25, Y+54	; 0x36
    4e84:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    4e88:	dc 01       	movw	r26, r24
    4e8a:	cb 01       	movw	r24, r22
    4e8c:	bc 01       	movw	r22, r24
    4e8e:	cd 01       	movw	r24, r26
    4e90:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <H_LCD_Void_LCDWriteNumber>
    4e94:	80 e0       	ldi	r24, 0x00	; 0
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	aa ef       	ldi	r26, 0xFA	; 250
    4e9a:	b4 e4       	ldi	r27, 0x44	; 68
    4e9c:	8f a3       	std	Y+39, r24	; 0x27
    4e9e:	98 a7       	std	Y+40, r25	; 0x28
    4ea0:	a9 a7       	std	Y+41, r26	; 0x29
    4ea2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ea4:	6f a1       	ldd	r22, Y+39	; 0x27
    4ea6:	78 a5       	ldd	r23, Y+40	; 0x28
    4ea8:	89 a5       	ldd	r24, Y+41	; 0x29
    4eaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    4eac:	20 e0       	ldi	r18, 0x00	; 0
    4eae:	30 e0       	ldi	r19, 0x00	; 0
    4eb0:	4a e7       	ldi	r20, 0x7A	; 122
    4eb2:	55 e4       	ldi	r21, 0x45	; 69
    4eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eb8:	dc 01       	movw	r26, r24
    4eba:	cb 01       	movw	r24, r22
    4ebc:	8b a3       	std	Y+35, r24	; 0x23
    4ebe:	9c a3       	std	Y+36, r25	; 0x24
    4ec0:	ad a3       	std	Y+37, r26	; 0x25
    4ec2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4ec4:	6b a1       	ldd	r22, Y+35	; 0x23
    4ec6:	7c a1       	ldd	r23, Y+36	; 0x24
    4ec8:	8d a1       	ldd	r24, Y+37	; 0x25
    4eca:	9e a1       	ldd	r25, Y+38	; 0x26
    4ecc:	20 e0       	ldi	r18, 0x00	; 0
    4ece:	30 e0       	ldi	r19, 0x00	; 0
    4ed0:	40 e8       	ldi	r20, 0x80	; 128
    4ed2:	5f e3       	ldi	r21, 0x3F	; 63
    4ed4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4ed8:	88 23       	and	r24, r24
    4eda:	2c f4       	brge	.+10     	; 0x4ee6 <main+0x18c>
		__ticks = 1;
    4edc:	81 e0       	ldi	r24, 0x01	; 1
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	9a a3       	std	Y+34, r25	; 0x22
    4ee2:	89 a3       	std	Y+33, r24	; 0x21
    4ee4:	3f c0       	rjmp	.+126    	; 0x4f64 <main+0x20a>
	else if (__tmp > 65535)
    4ee6:	6b a1       	ldd	r22, Y+35	; 0x23
    4ee8:	7c a1       	ldd	r23, Y+36	; 0x24
    4eea:	8d a1       	ldd	r24, Y+37	; 0x25
    4eec:	9e a1       	ldd	r25, Y+38	; 0x26
    4eee:	20 e0       	ldi	r18, 0x00	; 0
    4ef0:	3f ef       	ldi	r19, 0xFF	; 255
    4ef2:	4f e7       	ldi	r20, 0x7F	; 127
    4ef4:	57 e4       	ldi	r21, 0x47	; 71
    4ef6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4efa:	18 16       	cp	r1, r24
    4efc:	4c f5       	brge	.+82     	; 0x4f50 <main+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4efe:	6f a1       	ldd	r22, Y+39	; 0x27
    4f00:	78 a5       	ldd	r23, Y+40	; 0x28
    4f02:	89 a5       	ldd	r24, Y+41	; 0x29
    4f04:	9a a5       	ldd	r25, Y+42	; 0x2a
    4f06:	20 e0       	ldi	r18, 0x00	; 0
    4f08:	30 e0       	ldi	r19, 0x00	; 0
    4f0a:	40 e2       	ldi	r20, 0x20	; 32
    4f0c:	51 e4       	ldi	r21, 0x41	; 65
    4f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f12:	dc 01       	movw	r26, r24
    4f14:	cb 01       	movw	r24, r22
    4f16:	bc 01       	movw	r22, r24
    4f18:	cd 01       	movw	r24, r26
    4f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f1e:	dc 01       	movw	r26, r24
    4f20:	cb 01       	movw	r24, r22
    4f22:	9a a3       	std	Y+34, r25	; 0x22
    4f24:	89 a3       	std	Y+33, r24	; 0x21
    4f26:	0f c0       	rjmp	.+30     	; 0x4f46 <main+0x1ec>
    4f28:	80 e9       	ldi	r24, 0x90	; 144
    4f2a:	91 e0       	ldi	r25, 0x01	; 1
    4f2c:	98 a3       	std	Y+32, r25	; 0x20
    4f2e:	8f 8f       	std	Y+31, r24	; 0x1f
    4f30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f32:	98 a1       	ldd	r25, Y+32	; 0x20
    4f34:	01 97       	sbiw	r24, 0x01	; 1
    4f36:	f1 f7       	brne	.-4      	; 0x4f34 <main+0x1da>
    4f38:	98 a3       	std	Y+32, r25	; 0x20
    4f3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f3c:	89 a1       	ldd	r24, Y+33	; 0x21
    4f3e:	9a a1       	ldd	r25, Y+34	; 0x22
    4f40:	01 97       	sbiw	r24, 0x01	; 1
    4f42:	9a a3       	std	Y+34, r25	; 0x22
    4f44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f46:	89 a1       	ldd	r24, Y+33	; 0x21
    4f48:	9a a1       	ldd	r25, Y+34	; 0x22
    4f4a:	00 97       	sbiw	r24, 0x00	; 0
    4f4c:	69 f7       	brne	.-38     	; 0x4f28 <main+0x1ce>
    4f4e:	14 c0       	rjmp	.+40     	; 0x4f78 <main+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f50:	6b a1       	ldd	r22, Y+35	; 0x23
    4f52:	7c a1       	ldd	r23, Y+36	; 0x24
    4f54:	8d a1       	ldd	r24, Y+37	; 0x25
    4f56:	9e a1       	ldd	r25, Y+38	; 0x26
    4f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f5c:	dc 01       	movw	r26, r24
    4f5e:	cb 01       	movw	r24, r22
    4f60:	9a a3       	std	Y+34, r25	; 0x22
    4f62:	89 a3       	std	Y+33, r24	; 0x21
    4f64:	89 a1       	ldd	r24, Y+33	; 0x21
    4f66:	9a a1       	ldd	r25, Y+34	; 0x22
    4f68:	9e 8f       	std	Y+30, r25	; 0x1e
    4f6a:	8d 8f       	std	Y+29, r24	; 0x1d
    4f6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f70:	01 97       	sbiw	r24, 0x01	; 1
    4f72:	f1 f7       	brne	.-4      	; 0x4f70 <main+0x216>
    4f74:	9e 8f       	std	Y+30, r25	; 0x1e
    4f76:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2000);
		H_LCD_Void_LCDClr();
    4f78:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <H_LCD_Void_LCDClr>


		H_LCD_Void_LCDWriteString("ON ticks = ");
    4f7c:	8f e6       	ldi	r24, 0x6F	; 111
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <H_LCD_Void_LCDWriteString>
		H_LCD_Void_LCDGoto(1,0);
    4f84:	81 e0       	ldi	r24, 0x01	; 1
    4f86:	60 e0       	ldi	r22, 0x00	; 0
    4f88:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <H_LCD_Void_LCDGoto>
		H_LCD_Void_LCDWriteNumber(ONTicks);
    4f8c:	6f a5       	ldd	r22, Y+47	; 0x2f
    4f8e:	78 a9       	ldd	r23, Y+48	; 0x30
    4f90:	89 a9       	ldd	r24, Y+49	; 0x31
    4f92:	9a a9       	ldd	r25, Y+50	; 0x32
    4f94:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    4f98:	dc 01       	movw	r26, r24
    4f9a:	cb 01       	movw	r24, r22
    4f9c:	bc 01       	movw	r22, r24
    4f9e:	cd 01       	movw	r24, r26
    4fa0:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <H_LCD_Void_LCDWriteNumber>
    4fa4:	80 e0       	ldi	r24, 0x00	; 0
    4fa6:	90 e0       	ldi	r25, 0x00	; 0
    4fa8:	aa ef       	ldi	r26, 0xFA	; 250
    4faa:	b4 e4       	ldi	r27, 0x44	; 68
    4fac:	89 8f       	std	Y+25, r24	; 0x19
    4fae:	9a 8f       	std	Y+26, r25	; 0x1a
    4fb0:	ab 8f       	std	Y+27, r26	; 0x1b
    4fb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fb4:	69 8d       	ldd	r22, Y+25	; 0x19
    4fb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fbc:	20 e0       	ldi	r18, 0x00	; 0
    4fbe:	30 e0       	ldi	r19, 0x00	; 0
    4fc0:	4a e7       	ldi	r20, 0x7A	; 122
    4fc2:	55 e4       	ldi	r21, 0x45	; 69
    4fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fc8:	dc 01       	movw	r26, r24
    4fca:	cb 01       	movw	r24, r22
    4fcc:	8d 8b       	std	Y+21, r24	; 0x15
    4fce:	9e 8b       	std	Y+22, r25	; 0x16
    4fd0:	af 8b       	std	Y+23, r26	; 0x17
    4fd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    4fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    4fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    4fda:	98 8d       	ldd	r25, Y+24	; 0x18
    4fdc:	20 e0       	ldi	r18, 0x00	; 0
    4fde:	30 e0       	ldi	r19, 0x00	; 0
    4fe0:	40 e8       	ldi	r20, 0x80	; 128
    4fe2:	5f e3       	ldi	r21, 0x3F	; 63
    4fe4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4fe8:	88 23       	and	r24, r24
    4fea:	2c f4       	brge	.+10     	; 0x4ff6 <main+0x29c>
		__ticks = 1;
    4fec:	81 e0       	ldi	r24, 0x01	; 1
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	9c 8b       	std	Y+20, r25	; 0x14
    4ff2:	8b 8b       	std	Y+19, r24	; 0x13
    4ff4:	3f c0       	rjmp	.+126    	; 0x5074 <main+0x31a>
	else if (__tmp > 65535)
    4ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    4ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    4ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    4ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ffe:	20 e0       	ldi	r18, 0x00	; 0
    5000:	3f ef       	ldi	r19, 0xFF	; 255
    5002:	4f e7       	ldi	r20, 0x7F	; 127
    5004:	57 e4       	ldi	r21, 0x47	; 71
    5006:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    500a:	18 16       	cp	r1, r24
    500c:	4c f5       	brge	.+82     	; 0x5060 <main+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    500e:	69 8d       	ldd	r22, Y+25	; 0x19
    5010:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5012:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5014:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5016:	20 e0       	ldi	r18, 0x00	; 0
    5018:	30 e0       	ldi	r19, 0x00	; 0
    501a:	40 e2       	ldi	r20, 0x20	; 32
    501c:	51 e4       	ldi	r21, 0x41	; 65
    501e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5022:	dc 01       	movw	r26, r24
    5024:	cb 01       	movw	r24, r22
    5026:	bc 01       	movw	r22, r24
    5028:	cd 01       	movw	r24, r26
    502a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    502e:	dc 01       	movw	r26, r24
    5030:	cb 01       	movw	r24, r22
    5032:	9c 8b       	std	Y+20, r25	; 0x14
    5034:	8b 8b       	std	Y+19, r24	; 0x13
    5036:	0f c0       	rjmp	.+30     	; 0x5056 <main+0x2fc>
    5038:	80 e9       	ldi	r24, 0x90	; 144
    503a:	91 e0       	ldi	r25, 0x01	; 1
    503c:	9a 8b       	std	Y+18, r25	; 0x12
    503e:	89 8b       	std	Y+17, r24	; 0x11
    5040:	89 89       	ldd	r24, Y+17	; 0x11
    5042:	9a 89       	ldd	r25, Y+18	; 0x12
    5044:	01 97       	sbiw	r24, 0x01	; 1
    5046:	f1 f7       	brne	.-4      	; 0x5044 <main+0x2ea>
    5048:	9a 8b       	std	Y+18, r25	; 0x12
    504a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    504c:	8b 89       	ldd	r24, Y+19	; 0x13
    504e:	9c 89       	ldd	r25, Y+20	; 0x14
    5050:	01 97       	sbiw	r24, 0x01	; 1
    5052:	9c 8b       	std	Y+20, r25	; 0x14
    5054:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5056:	8b 89       	ldd	r24, Y+19	; 0x13
    5058:	9c 89       	ldd	r25, Y+20	; 0x14
    505a:	00 97       	sbiw	r24, 0x00	; 0
    505c:	69 f7       	brne	.-38     	; 0x5038 <main+0x2de>
    505e:	14 c0       	rjmp	.+40     	; 0x5088 <main+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5060:	6d 89       	ldd	r22, Y+21	; 0x15
    5062:	7e 89       	ldd	r23, Y+22	; 0x16
    5064:	8f 89       	ldd	r24, Y+23	; 0x17
    5066:	98 8d       	ldd	r25, Y+24	; 0x18
    5068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    506c:	dc 01       	movw	r26, r24
    506e:	cb 01       	movw	r24, r22
    5070:	9c 8b       	std	Y+20, r25	; 0x14
    5072:	8b 8b       	std	Y+19, r24	; 0x13
    5074:	8b 89       	ldd	r24, Y+19	; 0x13
    5076:	9c 89       	ldd	r25, Y+20	; 0x14
    5078:	98 8b       	std	Y+16, r25	; 0x10
    507a:	8f 87       	std	Y+15, r24	; 0x0f
    507c:	8f 85       	ldd	r24, Y+15	; 0x0f
    507e:	98 89       	ldd	r25, Y+16	; 0x10
    5080:	01 97       	sbiw	r24, 0x01	; 1
    5082:	f1 f7       	brne	.-4      	; 0x5080 <main+0x326>
    5084:	98 8b       	std	Y+16, r25	; 0x10
    5086:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		H_LCD_Void_LCDClr();
    5088:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <H_LCD_Void_LCDClr>

		H_LCD_Void_LCDWriteString("Duty cycle = ");
    508c:	8b e7       	ldi	r24, 0x7B	; 123
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <H_LCD_Void_LCDWriteString>
		H_LCD_Void_LCDGoto(1,0);
    5094:	81 e0       	ldi	r24, 0x01	; 1
    5096:	60 e0       	ldi	r22, 0x00	; 0
    5098:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <H_LCD_Void_LCDGoto>
		H_LCD_Void_LCDWriteNumber(Duty);
    509c:	8b a5       	ldd	r24, Y+43	; 0x2b
    509e:	9c a5       	ldd	r25, Y+44	; 0x2c
    50a0:	ad a5       	ldd	r26, Y+45	; 0x2d
    50a2:	be a5       	ldd	r27, Y+46	; 0x2e
    50a4:	bc 01       	movw	r22, r24
    50a6:	cd 01       	movw	r24, r26
    50a8:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <H_LCD_Void_LCDWriteNumber>
		H_LCD_Void_LCDWriteString("%");
    50ac:	89 e8       	ldi	r24, 0x89	; 137
    50ae:	90 e0       	ldi	r25, 0x00	; 0
    50b0:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <H_LCD_Void_LCDWriteString>
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	aa ef       	ldi	r26, 0xFA	; 250
    50ba:	b4 e4       	ldi	r27, 0x44	; 68
    50bc:	8b 87       	std	Y+11, r24	; 0x0b
    50be:	9c 87       	std	Y+12, r25	; 0x0c
    50c0:	ad 87       	std	Y+13, r26	; 0x0d
    50c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    50c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    50c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    50ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    50cc:	20 e0       	ldi	r18, 0x00	; 0
    50ce:	30 e0       	ldi	r19, 0x00	; 0
    50d0:	4a e7       	ldi	r20, 0x7A	; 122
    50d2:	55 e4       	ldi	r21, 0x45	; 69
    50d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50d8:	dc 01       	movw	r26, r24
    50da:	cb 01       	movw	r24, r22
    50dc:	8f 83       	std	Y+7, r24	; 0x07
    50de:	98 87       	std	Y+8, r25	; 0x08
    50e0:	a9 87       	std	Y+9, r26	; 0x09
    50e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    50e4:	6f 81       	ldd	r22, Y+7	; 0x07
    50e6:	78 85       	ldd	r23, Y+8	; 0x08
    50e8:	89 85       	ldd	r24, Y+9	; 0x09
    50ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    50ec:	20 e0       	ldi	r18, 0x00	; 0
    50ee:	30 e0       	ldi	r19, 0x00	; 0
    50f0:	40 e8       	ldi	r20, 0x80	; 128
    50f2:	5f e3       	ldi	r21, 0x3F	; 63
    50f4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    50f8:	88 23       	and	r24, r24
    50fa:	2c f4       	brge	.+10     	; 0x5106 <main+0x3ac>
		__ticks = 1;
    50fc:	81 e0       	ldi	r24, 0x01	; 1
    50fe:	90 e0       	ldi	r25, 0x00	; 0
    5100:	9e 83       	std	Y+6, r25	; 0x06
    5102:	8d 83       	std	Y+5, r24	; 0x05
    5104:	3f c0       	rjmp	.+126    	; 0x5184 <main+0x42a>
	else if (__tmp > 65535)
    5106:	6f 81       	ldd	r22, Y+7	; 0x07
    5108:	78 85       	ldd	r23, Y+8	; 0x08
    510a:	89 85       	ldd	r24, Y+9	; 0x09
    510c:	9a 85       	ldd	r25, Y+10	; 0x0a
    510e:	20 e0       	ldi	r18, 0x00	; 0
    5110:	3f ef       	ldi	r19, 0xFF	; 255
    5112:	4f e7       	ldi	r20, 0x7F	; 127
    5114:	57 e4       	ldi	r21, 0x47	; 71
    5116:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    511a:	18 16       	cp	r1, r24
    511c:	4c f5       	brge	.+82     	; 0x5170 <main+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    511e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5120:	7c 85       	ldd	r23, Y+12	; 0x0c
    5122:	8d 85       	ldd	r24, Y+13	; 0x0d
    5124:	9e 85       	ldd	r25, Y+14	; 0x0e
    5126:	20 e0       	ldi	r18, 0x00	; 0
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	40 e2       	ldi	r20, 0x20	; 32
    512c:	51 e4       	ldi	r21, 0x41	; 65
    512e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5132:	dc 01       	movw	r26, r24
    5134:	cb 01       	movw	r24, r22
    5136:	bc 01       	movw	r22, r24
    5138:	cd 01       	movw	r24, r26
    513a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    513e:	dc 01       	movw	r26, r24
    5140:	cb 01       	movw	r24, r22
    5142:	9e 83       	std	Y+6, r25	; 0x06
    5144:	8d 83       	std	Y+5, r24	; 0x05
    5146:	0f c0       	rjmp	.+30     	; 0x5166 <main+0x40c>
    5148:	80 e9       	ldi	r24, 0x90	; 144
    514a:	91 e0       	ldi	r25, 0x01	; 1
    514c:	9c 83       	std	Y+4, r25	; 0x04
    514e:	8b 83       	std	Y+3, r24	; 0x03
    5150:	8b 81       	ldd	r24, Y+3	; 0x03
    5152:	9c 81       	ldd	r25, Y+4	; 0x04
    5154:	01 97       	sbiw	r24, 0x01	; 1
    5156:	f1 f7       	brne	.-4      	; 0x5154 <main+0x3fa>
    5158:	9c 83       	std	Y+4, r25	; 0x04
    515a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    515c:	8d 81       	ldd	r24, Y+5	; 0x05
    515e:	9e 81       	ldd	r25, Y+6	; 0x06
    5160:	01 97       	sbiw	r24, 0x01	; 1
    5162:	9e 83       	std	Y+6, r25	; 0x06
    5164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5166:	8d 81       	ldd	r24, Y+5	; 0x05
    5168:	9e 81       	ldd	r25, Y+6	; 0x06
    516a:	00 97       	sbiw	r24, 0x00	; 0
    516c:	69 f7       	brne	.-38     	; 0x5148 <main+0x3ee>
    516e:	14 c0       	rjmp	.+40     	; 0x5198 <main+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5170:	6f 81       	ldd	r22, Y+7	; 0x07
    5172:	78 85       	ldd	r23, Y+8	; 0x08
    5174:	89 85       	ldd	r24, Y+9	; 0x09
    5176:	9a 85       	ldd	r25, Y+10	; 0x0a
    5178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    517c:	dc 01       	movw	r26, r24
    517e:	cb 01       	movw	r24, r22
    5180:	9e 83       	std	Y+6, r25	; 0x06
    5182:	8d 83       	std	Y+5, r24	; 0x05
    5184:	8d 81       	ldd	r24, Y+5	; 0x05
    5186:	9e 81       	ldd	r25, Y+6	; 0x06
    5188:	9a 83       	std	Y+2, r25	; 0x02
    518a:	89 83       	std	Y+1, r24	; 0x01
    518c:	89 81       	ldd	r24, Y+1	; 0x01
    518e:	9a 81       	ldd	r25, Y+2	; 0x02
    5190:	01 97       	sbiw	r24, 0x01	; 1
    5192:	f1 f7       	brne	.-4      	; 0x5190 <main+0x436>
    5194:	9a 83       	std	Y+2, r25	; 0x02
    5196:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		H_LCD_Void_LCDClr();
    5198:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <H_LCD_Void_LCDClr>
    519c:	67 ce       	rjmp	.-818    	; 0x4e6c <main+0x112>

0000519e <ICU_HW>:

	return 0;
}

void ICU_HW(void)
{
    519e:	df 93       	push	r29
    51a0:	cf 93       	push	r28
    51a2:	00 d0       	rcall	.+0      	; 0x51a4 <ICU_HW+0x6>
    51a4:	cd b7       	in	r28, 0x3d	; 61
    51a6:	de b7       	in	r29, 0x3e	; 62
	switch(StateCounter)
    51a8:	80 91 93 01 	lds	r24, 0x0193
    51ac:	28 2f       	mov	r18, r24
    51ae:	30 e0       	ldi	r19, 0x00	; 0
    51b0:	3a 83       	std	Y+2, r19	; 0x02
    51b2:	29 83       	std	Y+1, r18	; 0x01
    51b4:	89 81       	ldd	r24, Y+1	; 0x01
    51b6:	9a 81       	ldd	r25, Y+2	; 0x02
    51b8:	82 30       	cpi	r24, 0x02	; 2
    51ba:	91 05       	cpc	r25, r1
    51bc:	b1 f0       	breq	.+44     	; 0x51ea <ICU_HW+0x4c>
    51be:	29 81       	ldd	r18, Y+1	; 0x01
    51c0:	3a 81       	ldd	r19, Y+2	; 0x02
    51c2:	23 30       	cpi	r18, 0x03	; 3
    51c4:	31 05       	cpc	r19, r1
    51c6:	01 f1       	breq	.+64     	; 0x5208 <ICU_HW+0x6a>
    51c8:	89 81       	ldd	r24, Y+1	; 0x01
    51ca:	9a 81       	ldd	r25, Y+2	; 0x02
    51cc:	81 30       	cpi	r24, 0x01	; 1
    51ce:	91 05       	cpc	r25, r1
    51d0:	41 f5       	brne	.+80     	; 0x5222 <ICU_HW+0x84>
	{
	case 1:
		Reading1 = M_Timer1_Void_InputCapture();
    51d2:	0e 94 c2 09 	call	0x1384	; 0x1384 <M_Timer1_Void_InputCapture>
    51d6:	90 93 af 01 	sts	0x01AF, r25
    51da:	80 93 ae 01 	sts	0x01AE, r24
		StateCounter++;
    51de:	80 91 93 01 	lds	r24, 0x0193
    51e2:	8f 5f       	subi	r24, 0xFF	; 255
    51e4:	80 93 93 01 	sts	0x0193, r24
    51e8:	1c c0       	rjmp	.+56     	; 0x5222 <ICU_HW+0x84>
		break;
	case 2:
		Reading2 = M_Timer1_Void_InputCapture();
    51ea:	0e 94 c2 09 	call	0x1384	; 0x1384 <M_Timer1_Void_InputCapture>
    51ee:	90 93 b1 01 	sts	0x01B1, r25
    51f2:	80 93 b0 01 	sts	0x01B0, r24
		M_Timer1_Void_Settrigger(Timer1_FALLING_EDGE_TRIGGER);
    51f6:	81 e0       	ldi	r24, 0x01	; 1
    51f8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <M_Timer1_Void_Settrigger>
		StateCounter++;
    51fc:	80 91 93 01 	lds	r24, 0x0193
    5200:	8f 5f       	subi	r24, 0xFF	; 255
    5202:	80 93 93 01 	sts	0x0193, r24
    5206:	0d c0       	rjmp	.+26     	; 0x5222 <ICU_HW+0x84>
		break;
	case 3:
		Reading3 = M_Timer1_Void_InputCapture();
    5208:	0e 94 c2 09 	call	0x1384	; 0x1384 <M_Timer1_Void_InputCapture>
    520c:	90 93 b3 01 	sts	0x01B3, r25
    5210:	80 93 b2 01 	sts	0x01B2, r24
		StateCounter++;
    5214:	80 91 93 01 	lds	r24, 0x0193
    5218:	8f 5f       	subi	r24, 0xFF	; 255
    521a:	80 93 93 01 	sts	0x0193, r24
		M_Timer1_Void_InterruptDisable();
    521e:	0e 94 a2 09 	call	0x1344	; 0x1344 <M_Timer1_Void_InterruptDisable>
		break;
	default:
		break;
	}
}
    5222:	0f 90       	pop	r0
    5224:	0f 90       	pop	r0
    5226:	cf 91       	pop	r28
    5228:	df 91       	pop	r29
    522a:	08 95       	ret

0000522c <__udivmodqi4>:
    522c:	99 1b       	sub	r25, r25
    522e:	79 e0       	ldi	r23, 0x09	; 9
    5230:	04 c0       	rjmp	.+8      	; 0x523a <__udivmodqi4_ep>

00005232 <__udivmodqi4_loop>:
    5232:	99 1f       	adc	r25, r25
    5234:	96 17       	cp	r25, r22
    5236:	08 f0       	brcs	.+2      	; 0x523a <__udivmodqi4_ep>
    5238:	96 1b       	sub	r25, r22

0000523a <__udivmodqi4_ep>:
    523a:	88 1f       	adc	r24, r24
    523c:	7a 95       	dec	r23
    523e:	c9 f7       	brne	.-14     	; 0x5232 <__udivmodqi4_loop>
    5240:	80 95       	com	r24
    5242:	08 95       	ret

00005244 <__divmodhi4>:
    5244:	97 fb       	bst	r25, 7
    5246:	09 2e       	mov	r0, r25
    5248:	07 26       	eor	r0, r23
    524a:	0a d0       	rcall	.+20     	; 0x5260 <__divmodhi4_neg1>
    524c:	77 fd       	sbrc	r23, 7
    524e:	04 d0       	rcall	.+8      	; 0x5258 <__divmodhi4_neg2>
    5250:	27 d0       	rcall	.+78     	; 0x52a0 <__udivmodhi4>
    5252:	06 d0       	rcall	.+12     	; 0x5260 <__divmodhi4_neg1>
    5254:	00 20       	and	r0, r0
    5256:	1a f4       	brpl	.+6      	; 0x525e <__divmodhi4_exit>

00005258 <__divmodhi4_neg2>:
    5258:	70 95       	com	r23
    525a:	61 95       	neg	r22
    525c:	7f 4f       	sbci	r23, 0xFF	; 255

0000525e <__divmodhi4_exit>:
    525e:	08 95       	ret

00005260 <__divmodhi4_neg1>:
    5260:	f6 f7       	brtc	.-4      	; 0x525e <__divmodhi4_exit>
    5262:	90 95       	com	r25
    5264:	81 95       	neg	r24
    5266:	9f 4f       	sbci	r25, 0xFF	; 255
    5268:	08 95       	ret

0000526a <__divmodsi4>:
    526a:	97 fb       	bst	r25, 7
    526c:	09 2e       	mov	r0, r25
    526e:	05 26       	eor	r0, r21
    5270:	0e d0       	rcall	.+28     	; 0x528e <__divmodsi4_neg1>
    5272:	57 fd       	sbrc	r21, 7
    5274:	04 d0       	rcall	.+8      	; 0x527e <__divmodsi4_neg2>
    5276:	28 d0       	rcall	.+80     	; 0x52c8 <__udivmodsi4>
    5278:	0a d0       	rcall	.+20     	; 0x528e <__divmodsi4_neg1>
    527a:	00 1c       	adc	r0, r0
    527c:	38 f4       	brcc	.+14     	; 0x528c <__divmodsi4_exit>

0000527e <__divmodsi4_neg2>:
    527e:	50 95       	com	r21
    5280:	40 95       	com	r20
    5282:	30 95       	com	r19
    5284:	21 95       	neg	r18
    5286:	3f 4f       	sbci	r19, 0xFF	; 255
    5288:	4f 4f       	sbci	r20, 0xFF	; 255
    528a:	5f 4f       	sbci	r21, 0xFF	; 255

0000528c <__divmodsi4_exit>:
    528c:	08 95       	ret

0000528e <__divmodsi4_neg1>:
    528e:	f6 f7       	brtc	.-4      	; 0x528c <__divmodsi4_exit>
    5290:	90 95       	com	r25
    5292:	80 95       	com	r24
    5294:	70 95       	com	r23
    5296:	61 95       	neg	r22
    5298:	7f 4f       	sbci	r23, 0xFF	; 255
    529a:	8f 4f       	sbci	r24, 0xFF	; 255
    529c:	9f 4f       	sbci	r25, 0xFF	; 255
    529e:	08 95       	ret

000052a0 <__udivmodhi4>:
    52a0:	aa 1b       	sub	r26, r26
    52a2:	bb 1b       	sub	r27, r27
    52a4:	51 e1       	ldi	r21, 0x11	; 17
    52a6:	07 c0       	rjmp	.+14     	; 0x52b6 <__udivmodhi4_ep>

000052a8 <__udivmodhi4_loop>:
    52a8:	aa 1f       	adc	r26, r26
    52aa:	bb 1f       	adc	r27, r27
    52ac:	a6 17       	cp	r26, r22
    52ae:	b7 07       	cpc	r27, r23
    52b0:	10 f0       	brcs	.+4      	; 0x52b6 <__udivmodhi4_ep>
    52b2:	a6 1b       	sub	r26, r22
    52b4:	b7 0b       	sbc	r27, r23

000052b6 <__udivmodhi4_ep>:
    52b6:	88 1f       	adc	r24, r24
    52b8:	99 1f       	adc	r25, r25
    52ba:	5a 95       	dec	r21
    52bc:	a9 f7       	brne	.-22     	; 0x52a8 <__udivmodhi4_loop>
    52be:	80 95       	com	r24
    52c0:	90 95       	com	r25
    52c2:	bc 01       	movw	r22, r24
    52c4:	cd 01       	movw	r24, r26
    52c6:	08 95       	ret

000052c8 <__udivmodsi4>:
    52c8:	a1 e2       	ldi	r26, 0x21	; 33
    52ca:	1a 2e       	mov	r1, r26
    52cc:	aa 1b       	sub	r26, r26
    52ce:	bb 1b       	sub	r27, r27
    52d0:	fd 01       	movw	r30, r26
    52d2:	0d c0       	rjmp	.+26     	; 0x52ee <__udivmodsi4_ep>

000052d4 <__udivmodsi4_loop>:
    52d4:	aa 1f       	adc	r26, r26
    52d6:	bb 1f       	adc	r27, r27
    52d8:	ee 1f       	adc	r30, r30
    52da:	ff 1f       	adc	r31, r31
    52dc:	a2 17       	cp	r26, r18
    52de:	b3 07       	cpc	r27, r19
    52e0:	e4 07       	cpc	r30, r20
    52e2:	f5 07       	cpc	r31, r21
    52e4:	20 f0       	brcs	.+8      	; 0x52ee <__udivmodsi4_ep>
    52e6:	a2 1b       	sub	r26, r18
    52e8:	b3 0b       	sbc	r27, r19
    52ea:	e4 0b       	sbc	r30, r20
    52ec:	f5 0b       	sbc	r31, r21

000052ee <__udivmodsi4_ep>:
    52ee:	66 1f       	adc	r22, r22
    52f0:	77 1f       	adc	r23, r23
    52f2:	88 1f       	adc	r24, r24
    52f4:	99 1f       	adc	r25, r25
    52f6:	1a 94       	dec	r1
    52f8:	69 f7       	brne	.-38     	; 0x52d4 <__udivmodsi4_loop>
    52fa:	60 95       	com	r22
    52fc:	70 95       	com	r23
    52fe:	80 95       	com	r24
    5300:	90 95       	com	r25
    5302:	9b 01       	movw	r18, r22
    5304:	ac 01       	movw	r20, r24
    5306:	bd 01       	movw	r22, r26
    5308:	cf 01       	movw	r24, r30
    530a:	08 95       	ret

0000530c <__prologue_saves__>:
    530c:	2f 92       	push	r2
    530e:	3f 92       	push	r3
    5310:	4f 92       	push	r4
    5312:	5f 92       	push	r5
    5314:	6f 92       	push	r6
    5316:	7f 92       	push	r7
    5318:	8f 92       	push	r8
    531a:	9f 92       	push	r9
    531c:	af 92       	push	r10
    531e:	bf 92       	push	r11
    5320:	cf 92       	push	r12
    5322:	df 92       	push	r13
    5324:	ef 92       	push	r14
    5326:	ff 92       	push	r15
    5328:	0f 93       	push	r16
    532a:	1f 93       	push	r17
    532c:	cf 93       	push	r28
    532e:	df 93       	push	r29
    5330:	cd b7       	in	r28, 0x3d	; 61
    5332:	de b7       	in	r29, 0x3e	; 62
    5334:	ca 1b       	sub	r28, r26
    5336:	db 0b       	sbc	r29, r27
    5338:	0f b6       	in	r0, 0x3f	; 63
    533a:	f8 94       	cli
    533c:	de bf       	out	0x3e, r29	; 62
    533e:	0f be       	out	0x3f, r0	; 63
    5340:	cd bf       	out	0x3d, r28	; 61
    5342:	09 94       	ijmp

00005344 <__epilogue_restores__>:
    5344:	2a 88       	ldd	r2, Y+18	; 0x12
    5346:	39 88       	ldd	r3, Y+17	; 0x11
    5348:	48 88       	ldd	r4, Y+16	; 0x10
    534a:	5f 84       	ldd	r5, Y+15	; 0x0f
    534c:	6e 84       	ldd	r6, Y+14	; 0x0e
    534e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5350:	8c 84       	ldd	r8, Y+12	; 0x0c
    5352:	9b 84       	ldd	r9, Y+11	; 0x0b
    5354:	aa 84       	ldd	r10, Y+10	; 0x0a
    5356:	b9 84       	ldd	r11, Y+9	; 0x09
    5358:	c8 84       	ldd	r12, Y+8	; 0x08
    535a:	df 80       	ldd	r13, Y+7	; 0x07
    535c:	ee 80       	ldd	r14, Y+6	; 0x06
    535e:	fd 80       	ldd	r15, Y+5	; 0x05
    5360:	0c 81       	ldd	r16, Y+4	; 0x04
    5362:	1b 81       	ldd	r17, Y+3	; 0x03
    5364:	aa 81       	ldd	r26, Y+2	; 0x02
    5366:	b9 81       	ldd	r27, Y+1	; 0x01
    5368:	ce 0f       	add	r28, r30
    536a:	d1 1d       	adc	r29, r1
    536c:	0f b6       	in	r0, 0x3f	; 63
    536e:	f8 94       	cli
    5370:	de bf       	out	0x3e, r29	; 62
    5372:	0f be       	out	0x3f, r0	; 63
    5374:	cd bf       	out	0x3d, r28	; 61
    5376:	ed 01       	movw	r28, r26
    5378:	08 95       	ret

0000537a <_exit>:
    537a:	f8 94       	cli

0000537c <__stop_program>:
    537c:	ff cf       	rjmp	.-2      	; 0x537c <__stop_program>
